
stm32_sd_operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  080079c8  080079c8  000179c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fcc  08007fcc  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007fcc  08007fcc  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fcc  08007fcc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000080  08008054  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08008054  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e01b  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c4  00000000  00000000  0002e107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  000309d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c24  00000000  00000000  000319a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ce5  00000000  00000000  000325c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fc6  00000000  00000000  0004c2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d079  00000000  00000000  0005f26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004890  00000000  00000000  000ec2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f0b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080079b0 	.word	0x080079b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080079b0 	.word	0x080079b0

0800014c <processBuffer>:
/* USER CODE BEGIN 0 */
TIM_HandleTypeDef * P_TIM = &htim2;


void processBuffer(uint8_t* buffer, size_t bytesRead)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	printf(buffer);
 8000156:	6878      	ldr	r0, [r7, #4]
 8000158:	f006 fdac 	bl	8006cb4 <iprintf>
	//memcpy(destination, buffer, bytesRead);
	//HAL_Delay(10000);
}
 800015c:	bf00      	nop
 800015e:	3708      	adds	r7, #8
 8000160:	46bd      	mov	sp, r7
 8000162:	bd80      	pop	{r7, pc}

08000164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000168:	f004 fe68 	bl	8004e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016c:	f000 f812 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000170:	f000 f8d0 	bl	8000314 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000174:	f000 f84a 	bl	800020c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000178:	f000 f87e 	bl	8000278 <MX_TIM2_Init>
  MX_FATFS_Init();
 800017c:	f000 fbc2 	bl	8000904 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  readFileAndProcessData("data.bin", processBuffer);
 8000180:	4902      	ldr	r1, [pc, #8]	; (800018c <main+0x28>)
 8000182:	4803      	ldr	r0, [pc, #12]	; (8000190 <main+0x2c>)
 8000184:	f006 fbd4 	bl	8006930 <readFileAndProcessData>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000188:	e7fe      	b.n	8000188 <main+0x24>
 800018a:	bf00      	nop
 800018c:	0800014d 	.word	0x0800014d
 8000190:	080079c8 	.word	0x080079c8

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	; 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f006 fddb 	bl	8006d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2302      	movs	r3, #2
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001be:	2310      	movs	r3, #16
 80001c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c2:	2300      	movs	r3, #0
 80001c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	4618      	mov	r0, r3
 80001cc:	f005 f93c 	bl	8005448 <HAL_RCC_OscConfig>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001d6:	f000 f8db 	bl	8000390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001da:	230f      	movs	r3, #15
 80001dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001de:	2300      	movs	r3, #0
 80001e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f005 fbaa 	bl	800594c <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001fe:	f000 f8c7 	bl	8000390 <Error_Handler>
  }
}
 8000202:	bf00      	nop
 8000204:	3740      	adds	r7, #64	; 0x40
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
	...

0800020c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <MX_SPI1_Init+0x64>)
 8000212:	4a18      	ldr	r2, [pc, #96]	; (8000274 <MX_SPI1_Init+0x68>)
 8000214:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000216:	4b16      	ldr	r3, [pc, #88]	; (8000270 <MX_SPI1_Init+0x64>)
 8000218:	f44f 7282 	mov.w	r2, #260	; 0x104
 800021c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_SPI1_Init+0x64>)
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_SPI1_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <MX_SPI1_Init+0x64>)
 800022c:	2200      	movs	r2, #0
 800022e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_SPI1_Init+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <MX_SPI1_Init+0x64>)
 8000238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800023c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <MX_SPI1_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <MX_SPI1_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <MX_SPI1_Init+0x64>)
 800024c:	2200      	movs	r2, #0
 800024e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <MX_SPI1_Init+0x64>)
 8000252:	2200      	movs	r2, #0
 8000254:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <MX_SPI1_Init+0x64>)
 8000258:	220a      	movs	r2, #10
 800025a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <MX_SPI1_Init+0x64>)
 800025e:	f005 fcd1 	bl	8005c04 <HAL_SPI_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000268:	f000 f892 	bl	8000390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000009c 	.word	0x2000009c
 8000274:	40013000 	.word	0x40013000

08000278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800028c:	463b      	mov	r3, r7
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000294:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <MX_TIM2_Init+0x98>)
 8000296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <MX_TIM2_Init+0x98>)
 800029e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a4:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <MX_TIM2_Init+0x98>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002aa:	4b19      	ldr	r3, [pc, #100]	; (8000310 <MX_TIM2_Init+0x98>)
 80002ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <MX_TIM2_Init+0x98>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002b8:	4b15      	ldr	r3, [pc, #84]	; (8000310 <MX_TIM2_Init+0x98>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002be:	4814      	ldr	r0, [pc, #80]	; (8000310 <MX_TIM2_Init+0x98>)
 80002c0:	f006 f8ca 	bl	8006458 <HAL_TIM_Base_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002ca:	f000 f861 	bl	8000390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	4619      	mov	r1, r3
 80002da:	480d      	ldr	r0, [pc, #52]	; (8000310 <MX_TIM2_Init+0x98>)
 80002dc:	f006 f90b 	bl	80064f6 <HAL_TIM_ConfigClockSource>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80002e6:	f000 f853 	bl	8000390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ea:	2300      	movs	r3, #0
 80002ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002ee:	2300      	movs	r3, #0
 80002f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002f2:	463b      	mov	r3, r7
 80002f4:	4619      	mov	r1, r3
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <MX_TIM2_Init+0x98>)
 80002f8:	f006 fabc 	bl	8006874 <HAL_TIMEx_MasterConfigSynchronization>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000302:	f000 f845 	bl	8000390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000f4 	.word	0x200000f4

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0308 	add.w	r3, r7, #8
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_GPIO_Init+0x74>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a16      	ldr	r2, [pc, #88]	; (8000388 <MX_GPIO_Init+0x74>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_GPIO_Init+0x74>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_GPIO_Init+0x74>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <MX_GPIO_Init+0x74>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_GPIO_Init+0x74>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	480b      	ldr	r0, [pc, #44]	; (800038c <MX_GPIO_Init+0x78>)
 800035e:	f005 f85b 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000362:	2310      	movs	r3, #16
 8000364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2302      	movs	r3, #2
 8000370:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	4619      	mov	r1, r3
 8000378:	4804      	ldr	r0, [pc, #16]	; (800038c <MX_GPIO_Init+0x78>)
 800037a:	f004 fec9 	bl	8005110 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037e:	bf00      	nop
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	40010800 	.word	0x40010800

08000390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000394:	b672      	cpsid	i
}
 8000396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000398:	e7fe      	b.n	8000398 <Error_Handler+0x8>
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <HAL_MspInit+0x60>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <HAL_MspInit+0x60>)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010000 	.word	0x40010000

08000400 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <HAL_SPI_MspInit+0x88>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d12f      	bne.n	8000480 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <HAL_SPI_MspInit+0x8c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a19      	ldr	r2, [pc, #100]	; (800048c <HAL_SPI_MspInit+0x8c>)
 8000426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <HAL_SPI_MspInit+0x8c>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <HAL_SPI_MspInit+0x8c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a13      	ldr	r2, [pc, #76]	; (800048c <HAL_SPI_MspInit+0x8c>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <HAL_SPI_MspInit+0x8c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000450:	23a0      	movs	r3, #160	; 0xa0
 8000452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000454:	2302      	movs	r3, #2
 8000456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000458:	2303      	movs	r3, #3
 800045a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	480b      	ldr	r0, [pc, #44]	; (8000490 <HAL_SPI_MspInit+0x90>)
 8000464:	f004 fe54 	bl	8005110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000468:	2340      	movs	r3, #64	; 0x40
 800046a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	4619      	mov	r1, r3
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <HAL_SPI_MspInit+0x90>)
 800047c:	f004 fe48 	bl	8005110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000480:	bf00      	nop
 8000482:	3720      	adds	r7, #32
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40013000 	.word	0x40013000
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800

08000494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004a4:	d10b      	bne.n	80004be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_TIM_Base_MspInit+0x34>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <HAL_TIM_Base_MspInit+0x34>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_TIM_Base_MspInit+0x34>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000

080004cc <SDTimer_Handler>:
/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void SDTimer_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <SDTimer_Handler+0x3c>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d006      	beq.n	80004e8 <SDTimer_Handler+0x1c>
    Timer1--;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <SDTimer_Handler+0x3c>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	3b01      	subs	r3, #1
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <SDTimer_Handler+0x3c>)
 80004e6:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <SDTimer_Handler+0x40>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d006      	beq.n	8000500 <SDTimer_Handler+0x34>
    Timer2--;
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <SDTimer_Handler+0x40>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	3b01      	subs	r3, #1
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <SDTimer_Handler+0x40>)
 80004fe:	801a      	strh	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	20000148 	.word	0x20000148
 800050c:	20000149 	.word	0x20000149

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000514:	e7fe      	b.n	8000514 <NMI_Handler+0x4>

08000516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <HardFault_Handler+0x4>

0800051c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <MemManage_Handler+0x4>

08000522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <BusFault_Handler+0x4>

08000528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <UsageFault_Handler+0x4>

0800052e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SDTimer_Handler();
 8000556:	f7ff ffb9 	bl	80004cc <SDTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055a:	f004 fcb5 	bl	8004ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}

08000562 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b086      	sub	sp, #24
 8000566:	af00      	add	r7, sp, #0
 8000568:	60f8      	str	r0, [r7, #12]
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e00a      	b.n	800058a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000574:	f3af 8000 	nop.w
 8000578:	4601      	mov	r1, r0
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	60ba      	str	r2, [r7, #8]
 8000580:	b2ca      	uxtb	r2, r1
 8000582:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	3301      	adds	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	dbf0      	blt.n	8000574 <_read+0x12>
  }

  return len;
 8000592:	687b      	ldr	r3, [r7, #4]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	e009      	b.n	80005c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	60ba      	str	r2, [r7, #8]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	3301      	adds	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dbf1      	blt.n	80005ae <_write+0x12>
  }
  return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_close>:

int _close(int file)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr

080005ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005fa:	605a      	str	r2, [r3, #4]
  return 0;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <_isatty>:

int _isatty(int file)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000610:	2301      	movs	r3, #1
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <_sbrk+0x5c>)
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <_sbrk+0x60>)
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <_sbrk+0x64>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <_sbrk+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <_sbrk+0x64>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	429a      	cmp	r2, r3
 8000662:	d207      	bcs.n	8000674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000664:	f006 fbca 	bl	8006dfc <__errno>
 8000668:	4603      	mov	r3, r0
 800066a:	220c      	movs	r2, #12
 800066c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000672:	e009      	b.n	8000688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <_sbrk+0x64>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	4a05      	ldr	r2, [pc, #20]	; (8000698 <_sbrk+0x64>)
 8000684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20005000 	.word	0x20005000
 8000694:	00000400 	.word	0x00000400
 8000698:	2000013c 	.word	0x2000013c
 800069c:	200004c8 	.word	0x200004c8

080006a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ac:	f7ff fff8 	bl	80006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006b2:	490c      	ldr	r1, [pc, #48]	; (80006e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006b4:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a09      	ldr	r2, [pc, #36]	; (80006ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006c8:	4c09      	ldr	r4, [pc, #36]	; (80006f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006d6:	f006 fb97 	bl	8006e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006da:	f7ff fd43 	bl	8000164 <main>
  bx lr
 80006de:	4770      	bx	lr
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80006e8:	08007fd4 	.word	0x08007fd4
  ldr r2, =_sbss
 80006ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80006f0:	200004c8 	.word	0x200004c8

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>
	...

080006f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	2b7f      	cmp	r3, #127	; 0x7f
 8000708:	d802      	bhi.n	8000710 <ff_convert+0x18>
		c = chr;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	81fb      	strh	r3, [r7, #14]
 800070e:	e025      	b.n	800075c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00b      	beq.n	800072e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	2bff      	cmp	r3, #255	; 0xff
 800071a:	d805      	bhi.n	8000728 <ff_convert+0x30>
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	3b80      	subs	r3, #128	; 0x80
 8000720:	4a11      	ldr	r2, [pc, #68]	; (8000768 <ff_convert+0x70>)
 8000722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000726:	e000      	b.n	800072a <ff_convert+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	81fb      	strh	r3, [r7, #14]
 800072c:	e016      	b.n	800075c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800072e:	2300      	movs	r3, #0
 8000730:	81fb      	strh	r3, [r7, #14]
 8000732:	e009      	b.n	8000748 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8000734:	89fb      	ldrh	r3, [r7, #14]
 8000736:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <ff_convert+0x70>)
 8000738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800073c:	88fa      	ldrh	r2, [r7, #6]
 800073e:	429a      	cmp	r2, r3
 8000740:	d006      	beq.n	8000750 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8000742:	89fb      	ldrh	r3, [r7, #14]
 8000744:	3301      	adds	r3, #1
 8000746:	81fb      	strh	r3, [r7, #14]
 8000748:	89fb      	ldrh	r3, [r7, #14]
 800074a:	2b7f      	cmp	r3, #127	; 0x7f
 800074c:	d9f2      	bls.n	8000734 <ff_convert+0x3c>
 800074e:	e000      	b.n	8000752 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8000750:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8000752:	89fb      	ldrh	r3, [r7, #14]
 8000754:	3380      	adds	r3, #128	; 0x80
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800075c:	89fb      	ldrh	r3, [r7, #14]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	08007a34 	.word	0x08007a34

0800076c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e002      	b.n	8000782 <ff_wtoupper+0x16>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <ff_wtoupper+0x54>)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d006      	beq.n	800079c <ff_wtoupper+0x30>
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <ff_wtoupper+0x54>)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	429a      	cmp	r2, r3
 800079a:	d1ef      	bne.n	800077c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800079c:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <ff_wtoupper+0x54>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <ff_wtoupper+0x46>
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <ff_wtoupper+0x58>)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b0:	e000      	b.n	80007b4 <ff_wtoupper+0x48>
 80007b2:	88fb      	ldrh	r3, [r7, #6]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	08007b34 	.word	0x08007b34
 80007c4:	08007d14 	.word	0x08007d14

080007c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <disk_status+0x30>)
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	4905      	ldr	r1, [pc, #20]	; (80007f8 <disk_status+0x30>)
 80007e2:	440a      	add	r2, r1
 80007e4:	7a12      	ldrb	r2, [r2, #8]
 80007e6:	4610      	mov	r0, r2
 80007e8:	4798      	blx	r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000036c 	.word	0x2000036c

080007fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <disk_initialize+0x48>)
 800080e:	5cd3      	ldrb	r3, [r2, r3]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d111      	bne.n	8000838 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <disk_initialize+0x48>)
 8000818:	2101      	movs	r1, #1
 800081a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4a09      	ldr	r2, [pc, #36]	; (8000844 <disk_initialize+0x48>)
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	4906      	ldr	r1, [pc, #24]	; (8000844 <disk_initialize+0x48>)
 800082c:	440a      	add	r2, r1
 800082e:	7a12      	ldrb	r2, [r2, #8]
 8000830:	4610      	mov	r0, r2
 8000832:	4798      	blx	r3
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000036c 	.word	0x2000036c

08000848 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b087      	sub	sp, #28
 800084c:	af00      	add	r7, sp, #0
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4603      	mov	r3, r0
 8000856:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <disk_read+0x3c>)
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	689c      	ldr	r4, [r3, #8]
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <disk_read+0x3c>)
 8000868:	4413      	add	r3, r2
 800086a:	7a18      	ldrb	r0, [r3, #8]
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	47a0      	blx	r4
 8000874:	4603      	mov	r3, r0
 8000876:	75fb      	strb	r3, [r7, #23]
  return res;
 8000878:	7dfb      	ldrb	r3, [r7, #23]
}
 800087a:	4618      	mov	r0, r3
 800087c:	371c      	adds	r7, #28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	bf00      	nop
 8000884:	2000036c 	.word	0x2000036c

08000888 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <disk_write+0x3c>)
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	68dc      	ldr	r4, [r3, #12]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <disk_write+0x3c>)
 80008a8:	4413      	add	r3, r2
 80008aa:	7a18      	ldrb	r0, [r3, #8]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	47a0      	blx	r4
 80008b4:	4603      	mov	r3, r0
 80008b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000036c 	.word	0x2000036c

080008c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	603a      	str	r2, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	460b      	mov	r3, r1
 80008d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4a09      	ldr	r2, [pc, #36]	; (8000900 <disk_ioctl+0x38>)
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	79fa      	ldrb	r2, [r7, #7]
 80008e6:	4906      	ldr	r1, [pc, #24]	; (8000900 <disk_ioctl+0x38>)
 80008e8:	440a      	add	r2, r1
 80008ea:	7a10      	ldrb	r0, [r2, #8]
 80008ec:	79b9      	ldrb	r1, [r7, #6]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	4798      	blx	r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000036c 	.word	0x2000036c

08000904 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000908:	4904      	ldr	r1, [pc, #16]	; (800091c <MX_FATFS_Init+0x18>)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_FATFS_Init+0x1c>)
 800090c:	f004 fa2c 	bl	8004d68 <FATFS_LinkDriver>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <MX_FATFS_Init+0x20>)
 8000916:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000144 	.word	0x20000144
 8000920:	20000008 	.word	0x20000008
 8000924:	20000140 	.word	0x20000140

08000928 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800092c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
	...

08000938 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2110      	movs	r1, #16
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <SELECT+0x14>)
 8000942:	f004 fd69 	bl	8005418 <HAL_GPIO_WritePin>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010800 	.word	0x40010800

08000950 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <DESELECT+0x14>)
 800095a:	f004 fd5d 	bl	8005418 <HAL_GPIO_WritePin>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010800 	.word	0x40010800

08000968 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000972:	bf00      	nop
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <SPI_TxByte+0x30>)
 8000976:	f005 fcbc 	bl	80062f2 <HAL_SPI_GetState>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d1f9      	bne.n	8000974 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000980:	1df9      	adds	r1, r7, #7
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	2201      	movs	r2, #1
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <SPI_TxByte+0x30>)
 800098a:	f005 f9bf 	bl	8005d0c <HAL_SPI_Transmit>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000009c 	.word	0x2000009c

0800099c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80009a2:	23ff      	movs	r3, #255	; 0xff
 80009a4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80009aa:	bf00      	nop
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <SPI_RxByte+0x38>)
 80009ae:	f005 fca0 	bl	80062f2 <HAL_SPI_GetState>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d1f9      	bne.n	80009ac <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80009b8:	1dba      	adds	r2, r7, #6
 80009ba:	1df9      	adds	r1, r7, #7
 80009bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2301      	movs	r3, #1
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <SPI_RxByte+0x38>)
 80009c6:	f005 fae4 	bl	8005f92 <HAL_SPI_TransmitReceive>

  return data;
 80009ca:	79bb      	ldrb	r3, [r7, #6]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000009c 	.word	0x2000009c

080009d8 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80009e0:	f7ff ffdc 	bl	800099c <SPI_RxByte>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	701a      	strb	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <SD_ReadyWait+0x34>)
 80009fc:	2232      	movs	r2, #50	; 0x32
 80009fe:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000a00:	f7ff ffcc 	bl	800099c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000a04:	f7ff ffca 	bl	800099c <SPI_RxByte>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2bff      	cmp	r3, #255	; 0xff
 8000a10:	d004      	beq.n	8000a1c <SD_ReadyWait+0x28>
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SD_ReadyWait+0x34>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1f3      	bne.n	8000a04 <SD_ReadyWait+0x10>

  return res;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000149 	.word	0x20000149

08000a2c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000a32:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a36:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000a38:	f7ff ff8a 	bl	8000950 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	e005      	b.n	8000a4e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000a42:	20ff      	movs	r0, #255	; 0xff
 8000a44:	f7ff ff90 	bl	8000968 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	2b09      	cmp	r3, #9
 8000a52:	ddf6      	ble.n	8000a42 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000a54:	f7ff ff70 	bl	8000938 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000a6c:	2395      	movs	r3, #149	; 0x95
 8000a6e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e009      	b.n	8000a8a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000a76:	1d3a      	adds	r2, r7, #4
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff72 	bl	8000968 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	3301      	adds	r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2b05      	cmp	r3, #5
 8000a8e:	ddf2      	ble.n	8000a76 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000a90:	e002      	b.n	8000a98 <SD_PowerOn+0x6c>
  {
    Count--;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000a98:	f7ff ff80 	bl	800099c <SPI_RxByte>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d002      	beq.n	8000aa8 <SD_PowerOn+0x7c>
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1f4      	bne.n	8000a92 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000aa8:	f7ff ff52 	bl	8000950 <DESELECT>
  SPI_TxByte(0XFF);
 8000aac:	20ff      	movs	r0, #255	; 0xff
 8000aae:	f7ff ff5b 	bl	8000968 <SPI_TxByte>

  PowerFlag = 1;
 8000ab2:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <SD_PowerOn+0x94>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000014b 	.word	0x2000014b

08000ac4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <SD_PowerOff+0x14>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000014b 	.word	0x2000014b

08000adc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <SD_CheckPower+0x10>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	2000014b 	.word	0x2000014b

08000af0 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <SD_RxDataBlock+0x68>)
 8000afc:	220a      	movs	r2, #10
 8000afe:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000b00:	f7ff ff4c 	bl	800099c <SPI_RxByte>
 8000b04:	4603      	mov	r3, r0
 8000b06:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2bff      	cmp	r3, #255	; 0xff
 8000b0c:	d104      	bne.n	8000b18 <SD_RxDataBlock+0x28>
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <SD_RxDataBlock+0x68>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f3      	bne.n	8000b00 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2bfe      	cmp	r3, #254	; 0xfe
 8000b1c:	d001      	beq.n	8000b22 <SD_RxDataBlock+0x32>
    return FALSE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e016      	b.n	8000b50 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff55 	bl	80009d8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff4f 	bl	80009d8 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	3b02      	subs	r3, #2
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1ed      	bne.n	8000b22 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000b46:	f7ff ff29 	bl	800099c <SPI_RxByte>
  SPI_RxByte();
 8000b4a:	f7ff ff27 	bl	800099c <SPI_RxByte>

  return TRUE;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000148 	.word	0x20000148

08000b5c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000b6c:	f7ff ff42 	bl	80009f4 <SD_ReadyWait>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2bff      	cmp	r3, #255	; 0xff
 8000b74:	d001      	beq.n	8000b7a <SD_TxDataBlock+0x1e>
    return FALSE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e040      	b.n	8000bfc <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fef3 	bl	8000968 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	2bfd      	cmp	r3, #253	; 0xfd
 8000b86:	d031      	beq.n	8000bec <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fee7 	bl	8000968 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fee0 	bl	8000968 <SPI_TxByte>
    } while (--wc);
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	73bb      	strb	r3, [r7, #14]
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1eb      	bne.n	8000b8c <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000bb4:	f7ff fef2 	bl	800099c <SPI_RxByte>
    SPI_RxByte();
 8000bb8:	f7ff fef0 	bl	800099c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000bbc:	e00b      	b.n	8000bd6 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000bbe:	f7ff feed 	bl	800099c <SPI_RxByte>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	f003 031f 	and.w	r3, r3, #31
 8000bcc:	2b05      	cmp	r3, #5
 8000bce:	d006      	beq.n	8000bde <SD_TxDataBlock+0x82>
        break;

      i++;
 8000bd0:	7b7b      	ldrb	r3, [r7, #13]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000bd6:	7b7b      	ldrb	r3, [r7, #13]
 8000bd8:	2b40      	cmp	r3, #64	; 0x40
 8000bda:	d9f0      	bls.n	8000bbe <SD_TxDataBlock+0x62>
 8000bdc:	e000      	b.n	8000be0 <SD_TxDataBlock+0x84>
        break;
 8000bde:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000be0:	bf00      	nop
 8000be2:	f7ff fedb 	bl	800099c <SPI_RxByte>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0fa      	beq.n	8000be2 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f003 031f 	and.w	r3, r3, #31
 8000bf2:	2b05      	cmp	r3, #5
 8000bf4:	d101      	bne.n	8000bfa <SD_TxDataBlock+0x9e>
    return TRUE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000c10:	f7ff fef0 	bl	80009f4 <SD_ReadyWait>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2bff      	cmp	r3, #255	; 0xff
 8000c18:	d001      	beq.n	8000c1e <SD_SendCmd+0x1a>
    return 0xFF;
 8000c1a:	23ff      	movs	r3, #255	; 0xff
 8000c1c:	e040      	b.n	8000ca0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fea1 	bl	8000968 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	0e1b      	lsrs	r3, r3, #24
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe9b 	bl	8000968 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	0c1b      	lsrs	r3, r3, #16
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fe95 	bl	8000968 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fe8f 	bl	8000968 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fe8a 	bl	8000968 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b40      	cmp	r3, #64	; 0x40
 8000c5c:	d101      	bne.n	8000c62 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000c5e:	2395      	movs	r3, #149	; 0x95
 8000c60:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b48      	cmp	r3, #72	; 0x48
 8000c66:	d101      	bne.n	8000c6c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000c68:	2387      	movs	r3, #135	; 0x87
 8000c6a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe7a 	bl	8000968 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b4c      	cmp	r3, #76	; 0x4c
 8000c78:	d101      	bne.n	8000c7e <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000c7a:	f7ff fe8f 	bl	800099c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000c7e:	230a      	movs	r3, #10
 8000c80:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000c82:	f7ff fe8b 	bl	800099c <SPI_RxByte>
 8000c86:	4603      	mov	r3, r0
 8000c88:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000c8a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	da05      	bge.n	8000c9e <SD_SendCmd+0x9a>
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	73bb      	strb	r3, [r7, #14]
 8000c98:	7bbb      	ldrb	r3, [r7, #14]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f1      	bne.n	8000c82 <SD_SendCmd+0x7e>

  return res;
 8000c9e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e0d5      	b.n	8000e68 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000cbc:	4b6c      	ldr	r3, [pc, #432]	; (8000e70 <SD_disk_initialize+0x1c8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <SD_disk_initialize+0x2a>
    return Stat;
 8000cca:	4b69      	ldr	r3, [pc, #420]	; (8000e70 <SD_disk_initialize+0x1c8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	e0ca      	b.n	8000e68 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000cd2:	f7ff feab 	bl	8000a2c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000cd6:	f7ff fe2f 	bl	8000938 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2040      	movs	r0, #64	; 0x40
 8000ce2:	f7ff ff8f 	bl	8000c04 <SD_SendCmd>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	f040 80a5 	bne.w	8000e38 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000cee:	4b61      	ldr	r3, [pc, #388]	; (8000e74 <SD_disk_initialize+0x1cc>)
 8000cf0:	2264      	movs	r2, #100	; 0x64
 8000cf2:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000cf4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000cf8:	2048      	movs	r0, #72	; 0x48
 8000cfa:	f7ff ff83 	bl	8000c04 <SD_SendCmd>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d158      	bne.n	8000db6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e00c      	b.n	8000d24 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000d0a:	7bfc      	ldrb	r4, [r7, #15]
 8000d0c:	f7ff fe46 	bl	800099c <SPI_RxByte>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	f104 0310 	add.w	r3, r4, #16
 8000d18:	443b      	add	r3, r7
 8000d1a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	3301      	adds	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d9ef      	bls.n	8000d0a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000d2a:	7abb      	ldrb	r3, [r7, #10]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	f040 8083 	bne.w	8000e38 <SD_disk_initialize+0x190>
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	2baa      	cmp	r3, #170	; 0xaa
 8000d36:	d17f      	bne.n	8000e38 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2077      	movs	r0, #119	; 0x77
 8000d3c:	f7ff ff62 	bl	8000c04 <SD_SendCmd>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d807      	bhi.n	8000d56 <SD_disk_initialize+0xae>
 8000d46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d4a:	2069      	movs	r0, #105	; 0x69
 8000d4c:	f7ff ff5a 	bl	8000c04 <SD_SendCmd>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d005      	beq.n	8000d62 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000d56:	4b47      	ldr	r3, [pc, #284]	; (8000e74 <SD_disk_initialize+0x1cc>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1eb      	bne.n	8000d38 <SD_disk_initialize+0x90>
 8000d60:	e000      	b.n	8000d64 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000d62:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d64:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <SD_disk_initialize+0x1cc>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d064      	beq.n	8000e38 <SD_disk_initialize+0x190>
 8000d6e:	2100      	movs	r1, #0
 8000d70:	207a      	movs	r0, #122	; 0x7a
 8000d72:	f7ff ff47 	bl	8000c04 <SD_SendCmd>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d15d      	bne.n	8000e38 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e00c      	b.n	8000d9c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000d82:	7bfc      	ldrb	r4, [r7, #15]
 8000d84:	f7ff fe0a 	bl	800099c <SPI_RxByte>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f104 0310 	add.w	r3, r4, #16
 8000d90:	443b      	add	r3, r7
 8000d92:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d9ef      	bls.n	8000d82 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000da2:	7a3b      	ldrb	r3, [r7, #8]
 8000da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SD_disk_initialize+0x108>
 8000dac:	2306      	movs	r3, #6
 8000dae:	e000      	b.n	8000db2 <SD_disk_initialize+0x10a>
 8000db0:	2302      	movs	r3, #2
 8000db2:	73bb      	strb	r3, [r7, #14]
 8000db4:	e040      	b.n	8000e38 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000db6:	2100      	movs	r1, #0
 8000db8:	2077      	movs	r0, #119	; 0x77
 8000dba:	f7ff ff23 	bl	8000c04 <SD_SendCmd>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d808      	bhi.n	8000dd6 <SD_disk_initialize+0x12e>
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2069      	movs	r0, #105	; 0x69
 8000dc8:	f7ff ff1c 	bl	8000c04 <SD_SendCmd>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d801      	bhi.n	8000dd6 <SD_disk_initialize+0x12e>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e000      	b.n	8000dd8 <SD_disk_initialize+0x130>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d10e      	bne.n	8000dfe <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000de0:	2100      	movs	r1, #0
 8000de2:	2077      	movs	r0, #119	; 0x77
 8000de4:	f7ff ff0e 	bl	8000c04 <SD_SendCmd>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d80e      	bhi.n	8000e0c <SD_disk_initialize+0x164>
 8000dee:	2100      	movs	r1, #0
 8000df0:	2069      	movs	r0, #105	; 0x69
 8000df2:	f7ff ff07 	bl	8000c04 <SD_SendCmd>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d107      	bne.n	8000e0c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000dfc:	e00d      	b.n	8000e1a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2041      	movs	r0, #65	; 0x41
 8000e02:	f7ff feff 	bl	8000c04 <SD_SendCmd>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <SD_disk_initialize+0x1cc>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1e1      	bne.n	8000dda <SD_disk_initialize+0x132>
 8000e16:	e000      	b.n	8000e1a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000e18:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <SD_disk_initialize+0x1cc>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d007      	beq.n	8000e34 <SD_disk_initialize+0x18c>
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	2050      	movs	r0, #80	; 0x50
 8000e2a:	f7ff feeb 	bl	8000c04 <SD_SendCmd>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <SD_disk_initialize+0x1d0>)
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000e3e:	f7ff fd87 	bl	8000950 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000e42:	f7ff fdab 	bl	800099c <SPI_RxByte>

  if (type)
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d008      	beq.n	8000e5e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <SD_disk_initialize+0x1c8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f023 0301 	bic.w	r3, r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SD_disk_initialize+0x1c8>)
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e001      	b.n	8000e62 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000e5e:	f7ff fe31 	bl	8000ac4 <SD_PowerOff>
  }

  return Stat;
 8000e62:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <SD_disk_initialize+0x1c8>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20000148 	.word	0x20000148
 8000e78:	2000014a 	.word	0x2000014a

08000e7c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e002      	b.n	8000e96 <SD_disk_status+0x1a>

  return Stat;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <SD_disk_status+0x24>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d102      	bne.n	8000ec0 <SD_disk_read+0x1c>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <SD_disk_read+0x20>
    return RES_PARERR;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e051      	b.n	8000f68 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <SD_disk_read+0xcc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e048      	b.n	8000f68 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <SD_disk_read+0xd0>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	025b      	lsls	r3, r3, #9
 8000ee6:	607b      	str	r3, [r7, #4]

  SELECT();
 8000ee8:	f7ff fd26 	bl	8000938 <SELECT>

  if (count == 1)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d111      	bne.n	8000f16 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	2051      	movs	r0, #81	; 0x51
 8000ef6:	f7ff fe85 	bl	8000c04 <SD_SendCmd>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d129      	bne.n	8000f54 <SD_disk_read+0xb0>
 8000f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f7ff fdf3 	bl	8000af0 <SD_RxDataBlock>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d021      	beq.n	8000f54 <SD_disk_read+0xb0>
      count = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	e01e      	b.n	8000f54 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	2052      	movs	r0, #82	; 0x52
 8000f1a:	f7ff fe73 	bl	8000c04 <SD_SendCmd>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d117      	bne.n	8000f54 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	68b8      	ldr	r0, [r7, #8]
 8000f2a:	f7ff fde1 	bl	8000af0 <SD_RxDataBlock>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00a      	beq.n	8000f4a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f3a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1ed      	bne.n	8000f24 <SD_disk_read+0x80>
 8000f48:	e000      	b.n	8000f4c <SD_disk_read+0xa8>
          break;
 8000f4a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	204c      	movs	r0, #76	; 0x4c
 8000f50:	f7ff fe58 	bl	8000c04 <SD_SendCmd>
    }
  }

  DESELECT();
 8000f54:	f7ff fcfc 	bl	8000950 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000f58:	f7ff fd20 	bl	800099c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000004 	.word	0x20000004
 8000f74:	2000014a 	.word	0x2000014a

08000f78 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	4603      	mov	r3, r0
 8000f86:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d102      	bne.n	8000f94 <SD_disk_write+0x1c>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <SD_disk_write+0x20>
    return RES_PARERR;
 8000f94:	2304      	movs	r3, #4
 8000f96:	e06b      	b.n	8001070 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000f98:	4b37      	ldr	r3, [pc, #220]	; (8001078 <SD_disk_write+0x100>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e062      	b.n	8001070 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000faa:	4b33      	ldr	r3, [pc, #204]	; (8001078 <SD_disk_write+0x100>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SD_disk_write+0x44>
    return RES_WRPRT;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e059      	b.n	8001070 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <SD_disk_write+0x104>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	025b      	lsls	r3, r3, #9
 8000fcc:	607b      	str	r3, [r7, #4]

  SELECT();
 8000fce:	f7ff fcb3 	bl	8000938 <SELECT>

  if (count == 1)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d110      	bne.n	8000ffa <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	2058      	movs	r0, #88	; 0x58
 8000fdc:	f7ff fe12 	bl	8000c04 <SD_SendCmd>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d13a      	bne.n	800105c <SD_disk_write+0xe4>
 8000fe6:	21fe      	movs	r1, #254	; 0xfe
 8000fe8:	68b8      	ldr	r0, [r7, #8]
 8000fea:	f7ff fdb7 	bl	8000b5c <SD_TxDataBlock>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d033      	beq.n	800105c <SD_disk_write+0xe4>
      count = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	e030      	b.n	800105c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <SD_disk_write+0x104>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001006:	2100      	movs	r1, #0
 8001008:	2077      	movs	r0, #119	; 0x77
 800100a:	f7ff fdfb 	bl	8000c04 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800100e:	6839      	ldr	r1, [r7, #0]
 8001010:	2057      	movs	r0, #87	; 0x57
 8001012:	f7ff fdf7 	bl	8000c04 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	2059      	movs	r0, #89	; 0x59
 800101a:	f7ff fdf3 	bl	8000c04 <SD_SendCmd>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d11b      	bne.n	800105c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001024:	21fc      	movs	r1, #252	; 0xfc
 8001026:	68b8      	ldr	r0, [r7, #8]
 8001028:	f7ff fd98 	bl	8000b5c <SD_TxDataBlock>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00a      	beq.n	8001048 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001038:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1ee      	bne.n	8001024 <SD_disk_write+0xac>
 8001046:	e000      	b.n	800104a <SD_disk_write+0xd2>
          break;
 8001048:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800104a:	21fd      	movs	r1, #253	; 0xfd
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fd85 	bl	8000b5c <SD_TxDataBlock>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <SD_disk_write+0xe4>
      {
        count = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800105c:	f7ff fc78 	bl	8000950 <DESELECT>
  SPI_RxByte();
 8001060:	f7ff fc9c 	bl	800099c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	bf14      	ite	ne
 800106a:	2301      	movne	r3, #1
 800106c:	2300      	moveq	r3, #0
 800106e:	b2db      	uxtb	r3, r3
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000004 	.word	0x20000004
 800107c:	2000014a 	.word	0x2000014a

08001080 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	603a      	str	r2, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	460b      	mov	r3, r1
 800108e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800109a:	2304      	movs	r3, #4
 800109c:	e11b      	b.n	80012d6 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d129      	bne.n	80010fe <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d017      	beq.n	80010e2 <SD_disk_ioctl+0x62>
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	dc1f      	bgt.n	80010f6 <SD_disk_ioctl+0x76>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <SD_disk_ioctl+0x40>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d00b      	beq.n	80010d6 <SD_disk_ioctl+0x56>
 80010be:	e01a      	b.n	80010f6 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80010c0:	f7ff fd0c 	bl	8000adc <SD_CheckPower>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80010ca:	f7ff fcfb 	bl	8000ac4 <SD_PowerOff>
      res = RES_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010d4:	e0fd      	b.n	80012d2 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80010d6:	f7ff fca9 	bl	8000a2c <SD_PowerOn>
      res = RES_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010e0:	e0f7      	b.n	80012d2 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	1c5c      	adds	r4, r3, #1
 80010e6:	f7ff fcf9 	bl	8000adc <SD_CheckPower>
 80010ea:	4603      	mov	r3, r0
 80010ec:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010f4:	e0ed      	b.n	80012d2 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80010f6:	2304      	movs	r3, #4
 80010f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010fc:	e0e9      	b.n	80012d2 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80010fe:	4b78      	ldr	r3, [pc, #480]	; (80012e0 <SD_disk_ioctl+0x260>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800110c:	2303      	movs	r3, #3
 800110e:	e0e2      	b.n	80012d6 <SD_disk_ioctl+0x256>

    SELECT();
 8001110:	f7ff fc12 	bl	8000938 <SELECT>

    switch (ctrl)
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	2b0d      	cmp	r3, #13
 8001118:	f200 80cc 	bhi.w	80012b4 <SD_disk_ioctl+0x234>
 800111c:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <SD_disk_ioctl+0xa4>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	0800121f 	.word	0x0800121f
 8001128:	0800115d 	.word	0x0800115d
 800112c:	0800120f 	.word	0x0800120f
 8001130:	080012b5 	.word	0x080012b5
 8001134:	080012b5 	.word	0x080012b5
 8001138:	080012b5 	.word	0x080012b5
 800113c:	080012b5 	.word	0x080012b5
 8001140:	080012b5 	.word	0x080012b5
 8001144:	080012b5 	.word	0x080012b5
 8001148:	080012b5 	.word	0x080012b5
 800114c:	080012b5 	.word	0x080012b5
 8001150:	08001231 	.word	0x08001231
 8001154:	08001255 	.word	0x08001255
 8001158:	08001279 	.word	0x08001279
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800115c:	2100      	movs	r1, #0
 800115e:	2049      	movs	r0, #73	; 0x49
 8001160:	f7ff fd50 	bl	8000c04 <SD_SendCmd>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 80a8 	bne.w	80012bc <SD_disk_ioctl+0x23c>
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	2110      	movs	r1, #16
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fcbc 	bl	8000af0 <SD_RxDataBlock>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 809e 	beq.w	80012bc <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001180:	7b3b      	ldrb	r3, [r7, #12]
 8001182:	099b      	lsrs	r3, r3, #6
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10e      	bne.n	80011a8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800118a:	7d7b      	ldrb	r3, [r7, #21]
 800118c:	b29a      	uxth	r2, r3
 800118e:	7d3b      	ldrb	r3, [r7, #20]
 8001190:	b29b      	uxth	r3, r3
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b29b      	uxth	r3, r3
 8001196:	4413      	add	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800119e:	8bfb      	ldrh	r3, [r7, #30]
 80011a0:	029a      	lsls	r2, r3, #10
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e02e      	b.n	8001206 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80011a8:	7c7b      	ldrb	r3, [r7, #17]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	7dbb      	ldrb	r3, [r7, #22]
 80011b2:	09db      	lsrs	r3, r3, #7
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	7d7b      	ldrb	r3, [r7, #21]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 0306 	and.w	r3, r3, #6
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3302      	adds	r3, #2
 80011cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80011d0:	7d3b      	ldrb	r3, [r7, #20]
 80011d2:	099b      	lsrs	r3, r3, #6
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	7cfb      	ldrb	r3, [r7, #19]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	b29b      	uxth	r3, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	7cbb      	ldrb	r3, [r7, #18]
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80011f8:	8bfa      	ldrh	r2, [r7, #30]
 80011fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011fe:	3b09      	subs	r3, #9
 8001200:	409a      	lsls	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800120c:	e056      	b.n	80012bc <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001214:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800121c:	e055      	b.n	80012ca <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800121e:	f7ff fbe9 	bl	80009f4 <SD_ReadyWait>
 8001222:	4603      	mov	r3, r0
 8001224:	2bff      	cmp	r3, #255	; 0xff
 8001226:	d14b      	bne.n	80012c0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800122e:	e047      	b.n	80012c0 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001230:	2100      	movs	r1, #0
 8001232:	2049      	movs	r0, #73	; 0x49
 8001234:	f7ff fce6 	bl	8000c04 <SD_SendCmd>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d142      	bne.n	80012c4 <SD_disk_ioctl+0x244>
 800123e:	2110      	movs	r1, #16
 8001240:	6a38      	ldr	r0, [r7, #32]
 8001242:	f7ff fc55 	bl	8000af0 <SD_RxDataBlock>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d03b      	beq.n	80012c4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001252:	e037      	b.n	80012c4 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001254:	2100      	movs	r1, #0
 8001256:	204a      	movs	r0, #74	; 0x4a
 8001258:	f7ff fcd4 	bl	8000c04 <SD_SendCmd>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d132      	bne.n	80012c8 <SD_disk_ioctl+0x248>
 8001262:	2110      	movs	r1, #16
 8001264:	6a38      	ldr	r0, [r7, #32]
 8001266:	f7ff fc43 	bl	8000af0 <SD_RxDataBlock>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02b      	beq.n	80012c8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001276:	e027      	b.n	80012c8 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001278:	2100      	movs	r1, #0
 800127a:	207a      	movs	r0, #122	; 0x7a
 800127c:	f7ff fcc2 	bl	8000c04 <SD_SendCmd>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001286:	2300      	movs	r3, #0
 8001288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800128c:	e00b      	b.n	80012a6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800128e:	6a3c      	ldr	r4, [r7, #32]
 8001290:	1c63      	adds	r3, r4, #1
 8001292:	623b      	str	r3, [r7, #32]
 8001294:	f7ff fb82 	bl	800099c <SPI_RxByte>
 8001298:	4603      	mov	r3, r0
 800129a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800129c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012a0:	3301      	adds	r3, #1
 80012a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d9ef      	bls.n	800128e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80012b4:	2304      	movs	r3, #4
 80012b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012ba:	e006      	b.n	80012ca <SD_disk_ioctl+0x24a>
      break;
 80012bc:	bf00      	nop
 80012be:	e004      	b.n	80012ca <SD_disk_ioctl+0x24a>
      break;
 80012c0:	bf00      	nop
 80012c2:	e002      	b.n	80012ca <SD_disk_ioctl+0x24a>
      break;
 80012c4:	bf00      	nop
 80012c6:	e000      	b.n	80012ca <SD_disk_ioctl+0x24a>
      break;
 80012c8:	bf00      	nop
    }

    DESELECT();
 80012ca:	f7ff fb41 	bl	8000950 <DESELECT>
    SPI_RxByte();
 80012ce:	f7ff fb65 	bl	800099c <SPI_RxByte>
  }

  return res;
 80012d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	372c      	adds	r7, #44	; 0x2c
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000004 	.word	0x20000004

080012e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80012f8:	e007      	b.n	800130a <mem_cpy+0x26>
		*d++ = *s++;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	1c53      	adds	r3, r2, #1
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	6179      	str	r1, [r7, #20]
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f2      	bne.n	80012fa <mem_cpy+0x16>
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8001330:	e005      	b.n	800133e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	617a      	str	r2, [r7, #20]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	1e5a      	subs	r2, r3, #1
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f4      	bne.n	8001332 <mem_set+0x12>
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800136c:	bf00      	nop
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00d      	beq.n	8001394 <mem_cmp+0x40>
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	61fa      	str	r2, [r7, #28]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	61ba      	str	r2, [r7, #24]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	1acb      	subs	r3, r1, r3
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0ec      	beq.n	800136e <mem_cmp+0x1a>
	return r;
 8001394:	697b      	ldr	r3, [r7, #20]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80013aa:	e002      	b.n	80013b2 <chk_chr+0x12>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <chk_chr+0x26>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d1f2      	bne.n	80013ac <chk_chr+0xc>
	return *str;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	781b      	ldrb	r3, [r3, #0]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e03b      	b.n	8001460 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80013e8:	4931      	ldr	r1, [pc, #196]	; (80014b0 <chk_lock+0xdc>)
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d02c      	beq.n	8001456 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80013fc:	492c      	ldr	r1, [pc, #176]	; (80014b0 <chk_lock+0xdc>)
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d120      	bne.n	800145a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8001418:	4925      	ldr	r1, [pc, #148]	; (80014b0 <chk_lock+0xdc>)
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3304      	adds	r3, #4
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001430:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8001432:	429a      	cmp	r2, r3
 8001434:	d111      	bne.n	800145a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8001436:	491e      	ldr	r1, [pc, #120]	; (80014b0 <chk_lock+0xdc>)
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3308      	adds	r3, #8
 8001446:	881a      	ldrh	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8001450:	429a      	cmp	r2, r3
 8001452:	d102      	bne.n	800145a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8001454:	e007      	b.n	8001466 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8001456:	2301      	movs	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3301      	adds	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d9c0      	bls.n	80013e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d109      	bne.n	8001480 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <chk_lock+0xa4>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d101      	bne.n	800147c <chk_lock+0xa8>
 8001478:	2300      	movs	r3, #0
 800147a:	e013      	b.n	80014a4 <chk_lock+0xd0>
 800147c:	2312      	movs	r3, #18
 800147e:	e011      	b.n	80014a4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10b      	bne.n	800149e <chk_lock+0xca>
 8001486:	490a      	ldr	r1, [pc, #40]	; (80014b0 <chk_lock+0xdc>)
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	330a      	adds	r3, #10
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800149c:	d101      	bne.n	80014a2 <chk_lock+0xce>
 800149e:	2310      	movs	r3, #16
 80014a0:	e000      	b.n	80014a4 <chk_lock+0xd0>
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000154 	.word	0x20000154

080014b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e002      	b.n	80014c6 <enq_lock+0x12>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3301      	adds	r3, #1
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d809      	bhi.n	80014e0 <enq_lock+0x2c>
 80014cc:	490a      	ldr	r1, [pc, #40]	; (80014f8 <enq_lock+0x44>)
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ef      	bne.n	80014c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	bf14      	ite	ne
 80014e6:	2301      	movne	r3, #1
 80014e8:	2300      	moveq	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000154 	.word	0x20000154

080014fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e02e      	b.n	800156a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800150c:	4958      	ldr	r1, [pc, #352]	; (8001670 <inc_lock+0x174>)
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d11d      	bne.n	8001564 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8001528:	4951      	ldr	r1, [pc, #324]	; (8001670 <inc_lock+0x174>)
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3304      	adds	r3, #4
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001540:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8001542:	429a      	cmp	r2, r3
 8001544:	d10e      	bne.n	8001564 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8001546:	494a      	ldr	r1, [pc, #296]	; (8001670 <inc_lock+0x174>)
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3308      	adds	r3, #8
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8001560:	429a      	cmp	r2, r3
 8001562:	d006      	beq.n	8001572 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3301      	adds	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d9cd      	bls.n	800150c <inc_lock+0x10>
 8001570:	e000      	b.n	8001574 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8001572:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d148      	bne.n	800160c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	e002      	b.n	8001586 <inc_lock+0x8a>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d809      	bhi.n	80015a0 <inc_lock+0xa4>
 800158c:	4938      	ldr	r1, [pc, #224]	; (8001670 <inc_lock+0x174>)
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ef      	bne.n	8001580 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d101      	bne.n	80015aa <inc_lock+0xae>
 80015a6:	2300      	movs	r3, #0
 80015a8:	e05d      	b.n	8001666 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b0:	6819      	ldr	r1, [r3, #0]
 80015b2:	482f      	ldr	r0, [pc, #188]	; (8001670 <inc_lock+0x174>)
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4403      	add	r3, r0
 80015c0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c8:	6899      	ldr	r1, [r3, #8]
 80015ca:	4829      	ldr	r0, [pc, #164]	; (8001670 <inc_lock+0x174>)
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4403      	add	r3, r0
 80015d8:	3304      	adds	r3, #4
 80015da:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e2:	88d8      	ldrh	r0, [r3, #6]
 80015e4:	4922      	ldr	r1, [pc, #136]	; (8001670 <inc_lock+0x174>)
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3308      	adds	r3, #8
 80015f4:	4602      	mov	r2, r0
 80015f6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80015f8:	491d      	ldr	r1, [pc, #116]	; (8001670 <inc_lock+0x174>)
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	330a      	adds	r3, #10
 8001608:	2200      	movs	r2, #0
 800160a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00c      	beq.n	800162c <inc_lock+0x130>
 8001612:	4917      	ldr	r1, [pc, #92]	; (8001670 <inc_lock+0x174>)
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	330a      	adds	r3, #10
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <inc_lock+0x130>
 8001628:	2300      	movs	r3, #0
 800162a:	e01c      	b.n	8001666 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10b      	bne.n	800164a <inc_lock+0x14e>
 8001632:	490f      	ldr	r1, [pc, #60]	; (8001670 <inc_lock+0x174>)
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	330a      	adds	r3, #10
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	b299      	uxth	r1, r3
 8001648:	e001      	b.n	800164e <inc_lock+0x152>
 800164a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164e:	4808      	ldr	r0, [pc, #32]	; (8001670 <inc_lock+0x174>)
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4403      	add	r3, r0
 800165c:	330a      	adds	r3, #10
 800165e:	460a      	mov	r2, r1
 8001660:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	20000154 	.word	0x20000154

08001674 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d82e      	bhi.n	80016e6 <dec_lock+0x72>
		n = Files[i].ctr;
 8001688:	491b      	ldr	r1, [pc, #108]	; (80016f8 <dec_lock+0x84>)
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	330a      	adds	r3, #10
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a2:	d101      	bne.n	80016a8 <dec_lock+0x34>
 80016a4:	2300      	movs	r3, #0
 80016a6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <dec_lock+0x40>
 80016ae:	89fb      	ldrh	r3, [r7, #14]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80016b4:	4910      	ldr	r1, [pc, #64]	; (80016f8 <dec_lock+0x84>)
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	330a      	adds	r3, #10
 80016c4:	89fa      	ldrh	r2, [r7, #14]
 80016c6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <dec_lock+0x6c>
 80016ce:	490a      	ldr	r1, [pc, #40]	; (80016f8 <dec_lock+0x84>)
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	737b      	strb	r3, [r7, #13]
 80016e4:	e001      	b.n	80016ea <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80016e6:	2302      	movs	r3, #2
 80016e8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000154 	.word	0x20000154

080016fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e016      	b.n	8001738 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800170a:	4910      	ldr	r1, [pc, #64]	; (800174c <clear_lock+0x50>)
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	d108      	bne.n	8001732 <clear_lock+0x36>
 8001720:	490a      	ldr	r1, [pc, #40]	; (800174c <clear_lock+0x50>)
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3301      	adds	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d9e5      	bls.n	800170a <clear_lock+0xe>
	}
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000154 	.word	0x20000154

08001750 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001762:	791b      	ldrb	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d040      	beq.n	80017ea <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001778:	7858      	ldrb	r0, [r3, #1]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	2301      	movs	r3, #1
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	f7ff f882 	bl	8000888 <disk_write>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <sync_window+0x40>
			res = FR_DISK_ERR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e02c      	b.n	80017ea <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001796:	2200      	movs	r2, #0
 8001798:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	1ad2      	subs	r2, r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d21b      	bcs.n	80017ea <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	e012      	b.n	80017e4 <sync_window+0x94>
					wsect += fs->fsize;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4413      	add	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d2:	7858      	ldrb	r0, [r3, #1]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	2301      	movs	r3, #1
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	f7ff f855 	bl	8000888 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d8e9      	bhi.n	80017be <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d01e      	beq.n	800184e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff9d 	bl	8001750 <sync_window>
 8001816:	4603      	mov	r3, r0
 8001818:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d116      	bne.n	800184e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001826:	7858      	ldrb	r0, [r3, #1]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	2301      	movs	r3, #1
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	f7ff f80b 	bl	8000848 <disk_read>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	461a      	mov	r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff75 	bl	8001750 <sync_window>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 80ad 	bne.w	80019cc <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b03      	cmp	r3, #3
 800187c:	f040 8098 	bne.w	80019b0 <sync_fs+0x158>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001886:	795b      	ldrb	r3, [r3, #5]
 8001888:	2b01      	cmp	r3, #1
 800188a:	f040 8091 	bne.w	80019b0 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001896:	895b      	ldrh	r3, [r3, #10]
 8001898:	461a      	mov	r2, r3
 800189a:	2100      	movs	r1, #0
 800189c:	f7ff fd40 	bl	8001320 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2255      	movs	r2, #85	; 0x55
 80018a4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	22aa      	movs	r2, #170	; 0xaa
 80018ac:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2252      	movs	r2, #82	; 0x52
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2252      	movs	r2, #82	; 0x52
 80018ba:	705a      	strb	r2, [r3, #1]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2261      	movs	r2, #97	; 0x61
 80018c0:	709a      	strb	r2, [r3, #2]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2241      	movs	r2, #65	; 0x41
 80018c6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2272      	movs	r2, #114	; 0x72
 80018cc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2272      	movs	r2, #114	; 0x72
 80018d4:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2241      	movs	r2, #65	; 0x41
 80018dc:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2261      	movs	r2, #97	; 0x61
 80018e4:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	b29b      	uxth	r3, r3
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b29b      	uxth	r3, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	b2da      	uxtb	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	0e1b      	lsrs	r3, r3, #24
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	b29b      	uxth	r3, r3
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	b29b      	uxth	r3, r3
 8001950:	b2da      	uxtb	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	b2da      	uxtb	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	0e1b      	lsrs	r3, r3, #24
 8001974:	b2da      	uxtb	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	3301      	adds	r3, #1
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800198c:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001994:	7858      	ldrb	r0, [r3, #1]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	2301      	movs	r3, #1
 80019a2:	f7fe ff71 	bl	8000888 <disk_write>
			fs->fsi_flag = 0;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ac:	2200      	movs	r2, #0
 80019ae:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b6:	785b      	ldrb	r3, [r3, #1]
 80019b8:	2200      	movs	r2, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe ff83 	bl	80008c8 <disk_ioctl>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <sync_fs+0x174>
			res = FR_DISK_ERR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	3b02      	subs	r3, #2
 80019e4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	3b02      	subs	r3, #2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d301      	bcc.n	80019fa <clust2sect+0x24>
 80019f6:	2300      	movs	r3, #0
 80019f8:	e00c      	b.n	8001a14 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a00:	789b      	ldrb	r3, [r3, #2]
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	fb03 f202 	mul.w	r2, r3, r2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	4413      	add	r3, r2
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d906      	bls.n	8001a3c <get_fat+0x1e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d302      	bcc.n	8001a42 <get_fat+0x24>
		val = 1;	/* Internal error */
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e0e4      	b.n	8001c0c <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a46:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	f000 8098 	beq.w	8001b86 <get_fat+0x168>
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	f300 80ce 	bgt.w	8001bf8 <get_fat+0x1da>
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d002      	beq.n	8001a66 <get_fat+0x48>
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d05f      	beq.n	8001b24 <get_fat+0x106>
 8001a64:	e0c8      	b.n	8001bf8 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7a:	6a1a      	ldr	r2, [r3, #32]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a82:	895b      	ldrh	r3, [r3, #10]
 8001a84:	4619      	mov	r1, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff feaf 	bl	80017f4 <move_window>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f040 80b0 	bne.w	8001bfe <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aaa:	8952      	ldrh	r2, [r2, #10]
 8001aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ab0:	fb01 f202 	mul.w	r2, r1, r2
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac2:	6a1a      	ldr	r2, [r3, #32]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aca:	895b      	ldrh	r3, [r3, #10]
 8001acc:	4619      	mov	r1, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fe8b 	bl	80017f4 <move_window>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f040 808e 	bne.w	8001c02 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aec:	895b      	ldrh	r3, [r3, #10]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001af6:	fb01 f202 	mul.w	r2, r1, r2
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	5cd3      	ldrb	r3, [r2, r3]
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	461a      	mov	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <get_fat+0xfc>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	e002      	b.n	8001b20 <get_fat+0x102>
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	617b      	str	r3, [r7, #20]
			break;
 8001b22:	e073      	b.n	8001c0c <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2a:	6a1a      	ldr	r2, [r3, #32]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b32:	895b      	ldrh	r3, [r3, #10]
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4619      	mov	r1, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b40:	4413      	add	r3, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fe55 	bl	80017f4 <move_window>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d15a      	bne.n	8001c06 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b5a:	8952      	ldrh	r2, [r2, #10]
 8001b5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b60:	fb01 f202 	mul.w	r2, r1, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	617b      	str	r3, [r7, #20]
			break;
 8001b84:	e042      	b.n	8001c0c <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b94:	895b      	ldrh	r3, [r3, #10]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fe24 	bl	80017f4 <move_window>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d12b      	bne.n	8001c0a <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bbc:	8952      	ldrh	r2, [r2, #10]
 8001bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bc2:	fb01 f202 	mul.w	r2, r1, r2
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	061a      	lsls	r2, r3, #24
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	4313      	orrs	r3, r2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	3201      	adds	r2, #1
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	0212      	lsls	r2, r2, #8
 8001be8:	4313      	orrs	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001bf4:	617b      	str	r3, [r7, #20]
			break;
 8001bf6:	e009      	b.n	8001c0c <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e006      	b.n	8001c0c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001bfe:	bf00      	nop
 8001c00:	e004      	b.n	8001c0c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001c02:	bf00      	nop
 8001c04:	e002      	b.n	8001c0c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001c06:	bf00      	nop
 8001c08:	e000      	b.n	8001c0c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001c0a:	bf00      	nop
		}
	}

	return val;
 8001c0c:	697b      	ldr	r3, [r7, #20]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b088      	sub	sp, #32
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d906      	bls.n	8001c36 <put_fat+0x20>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d302      	bcc.n	8001c3c <put_fat+0x26>
		res = FR_INT_ERR;
 8001c36:	2302      	movs	r3, #2
 8001c38:	77fb      	strb	r3, [r7, #31]
 8001c3a:	e13a      	b.n	8001eb2 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	f000 80d0 	beq.w	8001dea <put_fat+0x1d4>
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	f300 8127 	bgt.w	8001e9e <put_fat+0x288>
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d003      	beq.n	8001c5c <put_fat+0x46>
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	f000 808f 	beq.w	8001d78 <put_fat+0x162>
 8001c5a:	e120      	b.n	8001e9e <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	4413      	add	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c70:	6a1a      	ldr	r2, [r3, #32]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c78:	895b      	ldrh	r3, [r3, #10]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	4413      	add	r3, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7ff fdb4 	bl	80017f4 <move_window>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 8106 	bne.w	8001ea4 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	617a      	str	r2, [r7, #20]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ca4:	8952      	ldrh	r2, [r2, #10]
 8001ca6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001caa:	fb01 f202 	mul.w	r2, r1, r2
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <put_fat+0xc6>
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	e001      	b.n	8001ce0 <put_fat+0xca>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cea:	2201      	movs	r2, #1
 8001cec:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfc:	895b      	ldrh	r3, [r3, #10]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	4413      	add	r3, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff fd72 	bl	80017f4 <move_window>
 8001d10:	4603      	mov	r3, r0
 8001d12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001d14:	7ffb      	ldrb	r3, [r7, #31]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 80c6 	bne.w	8001ea8 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d22:	895b      	ldrh	r3, [r3, #10]
 8001d24:	461a      	mov	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d2c:	fb01 f202 	mul.w	r2, r1, r2
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4413      	add	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <put_fat+0x134>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	e00e      	b.n	8001d68 <put_fat+0x152>
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	f023 030f 	bic.w	r3, r3, #15
 8001d54:	b25a      	sxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b25b      	sxtb	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d72:	2201      	movs	r2, #1
 8001d74:	711a      	strb	r2, [r3, #4]
			break;
 8001d76:	e09c      	b.n	8001eb2 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7e:	6a1a      	ldr	r2, [r3, #32]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d86:	895b      	ldrh	r3, [r3, #10]
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7ff fd2b 	bl	80017f4 <move_window>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001da2:	7ffb      	ldrb	r3, [r7, #31]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 8081 	bne.w	8001eac <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001db4:	8952      	ldrh	r2, [r2, #10]
 8001db6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dba:	fb01 f202 	mul.w	r2, r1, r2
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de4:	2201      	movs	r2, #1
 8001de6:	711a      	strb	r2, [r3, #4]
			break;
 8001de8:	e063      	b.n	8001eb2 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	895b      	ldrh	r3, [r3, #10]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	4413      	add	r3, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff fcf2 	bl	80017f4 <move_window>
 8001e10:	4603      	mov	r3, r0
 8001e12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001e14:	7ffb      	ldrb	r3, [r7, #31]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d14a      	bne.n	8001eb0 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e24:	8952      	ldrh	r2, [r2, #10]
 8001e26:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e2a:	fb01 f202 	mul.w	r2, r1, r2
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	3303      	adds	r3, #3
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	061a      	lsls	r2, r3, #24
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	3302      	adds	r3, #2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	4313      	orrs	r3, r2
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	3201      	adds	r2, #1
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	0212      	lsls	r2, r2, #8
 8001e50:	4313      	orrs	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0c1a      	lsrs	r2, r3, #16
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	3302      	adds	r3, #2
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0e1a      	lsrs	r2, r3, #24
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e98:	2201      	movs	r2, #1
 8001e9a:	711a      	strb	r2, [r3, #4]
			break;
 8001e9c:	e009      	b.n	8001eb2 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	77fb      	strb	r3, [r7, #31]
 8001ea2:	e006      	b.n	8001eb2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8001ea4:	bf00      	nop
 8001ea6:	e004      	b.n	8001eb2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8001ea8:	bf00      	nop
 8001eaa:	e002      	b.n	8001eb2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8001eac:	bf00      	nop
 8001eae:	e000      	b.n	8001eb2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8001eb0:	bf00      	nop
		}
	}

	return res;
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d906      	bls.n	8001eda <remove_chain+0x1e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d302      	bcc.n	8001ee0 <remove_chain+0x24>
		res = FR_INT_ERR;
 8001eda:	2302      	movs	r3, #2
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e049      	b.n	8001f74 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8001ee4:	e03b      	b.n	8001f5e <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8001ee6:	6839      	ldr	r1, [r7, #0]
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fd98 	bl	8001a1e <get_fat>
 8001eee:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d03b      	beq.n	8001f6e <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <remove_chain+0x46>
 8001efc:	2302      	movs	r3, #2
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e038      	b.n	8001f74 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f08:	d102      	bne.n	8001f10 <remove_chain+0x54>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	e031      	b.n	8001f74 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8001f10:	2200      	movs	r2, #0
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff fe7e 	bl	8001c16 <put_fat>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d126      	bne.n	8001f72 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f30:	d013      	beq.n	8001f5a <remove_chain+0x9e>
				fs->free_clust++;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f42:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	795b      	ldrb	r3, [r3, #5]
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f58:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d3bc      	bcc.n	8001ee6 <remove_chain+0x2a>
 8001f6c:	e002      	b.n	8001f74 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8001f72:	bf00      	nop
		}
	}

	return res;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d111      	bne.n	8001fb2 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <create_chain+0x2e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d31d      	bcc.n	8001fe8 <create_chain+0x6a>
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e01a      	b.n	8001fe8 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8001fb2:	6839      	ldr	r1, [r7, #0]
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fd32 	bl	8001a1e <get_fat>
 8001fba:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d801      	bhi.n	8001fc6 <create_chain+0x48>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e07f      	b.n	80020c6 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fcc:	d101      	bne.n	8001fd2 <create_chain+0x54>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	e079      	b.n	80020c6 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d201      	bcs.n	8001fe4 <create_chain+0x66>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	e070      	b.n	80020c6 <create_chain+0x148>
		scl = clst;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d307      	bcc.n	8002010 <create_chain+0x92>
			ncl = 2;
 8002000:	2302      	movs	r3, #2
 8002002:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d901      	bls.n	8002010 <create_chain+0x92>
 800200c:	2300      	movs	r3, #0
 800200e:	e05a      	b.n	80020c6 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8002010:	6979      	ldr	r1, [r7, #20]
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fd03 	bl	8001a1e <get_fat>
 8002018:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002026:	d002      	beq.n	800202e <create_chain+0xb0>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <create_chain+0xb4>
			return cs;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	e049      	b.n	80020c6 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	429a      	cmp	r2, r3
 8002038:	d1d8      	bne.n	8001fec <create_chain+0x6e>
 800203a:	2300      	movs	r3, #0
 800203c:	e043      	b.n	80020c6 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800203e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8002040:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002044:	6979      	ldr	r1, [r7, #20]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fde5 	bl	8001c16 <put_fat>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <create_chain+0xec>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff fdd8 	bl	8001c16 <put_fat>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d121      	bne.n	80020b4 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002076:	461a      	mov	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002088:	d01c      	beq.n	80020c4 <create_chain+0x146>
			fs->free_clust--;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	3b01      	subs	r3, #1
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800209a:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a2:	795b      	ldrb	r3, [r3, #5]
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b0:	715a      	strb	r2, [r3, #5]
 80020b2:	e007      	b.n	80020c4 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d102      	bne.n	80020c0 <create_chain+0x142>
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020be:	e000      	b.n	80020c2 <create_chain+0x144>
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80020c4:	697b      	ldr	r3, [r7, #20]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b087      	sub	sp, #28
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	3304      	adds	r3, #4
 80020e2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f0:	895b      	ldrh	r3, [r3, #10]
 80020f2:	461a      	mov	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002106:	7892      	ldrb	r2, [r2, #2]
 8002108:	fbb3 f3f2 	udiv	r3, r3, r2
 800210c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1d1a      	adds	r2, r3, #4
 8002112:	613a      	str	r2, [r7, #16]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <clmt_clust+0x54>
 800211e:	2300      	movs	r3, #0
 8002120:	e010      	b.n	8002144 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	429a      	cmp	r2, r3
 8002128:	d307      	bcc.n	800213a <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	3304      	adds	r3, #4
 8002136:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002138:	e7e9      	b.n	800210e <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800213a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	4413      	add	r3, r2
}
 8002144:	4618      	mov	r0, r3
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d009      	beq.n	8002188 <dir_sdi+0x3a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	d301      	bcc.n	800218c <dir_sdi+0x3e>
		return FR_INT_ERR;
 8002188:	2302      	movs	r3, #2
 800218a:	e0aa      	b.n	80022e2 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d110      	bne.n	80021b4 <dir_sdi+0x66>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d107      	bne.n	80021b4 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c6:	891b      	ldrh	r3, [r3, #8]
 80021c8:	461a      	mov	r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d301      	bcc.n	80021d4 <dir_sdi+0x86>
			return FR_INT_ERR;
 80021d0:	2302      	movs	r3, #2
 80021d2:	e086      	b.n	80022e2 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	e043      	b.n	800226e <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f2:	895b      	ldrh	r3, [r3, #10]
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002206:	789b      	ldrb	r3, [r3, #2]
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800220e:	e021      	b.n	8002254 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6979      	ldr	r1, [r7, #20]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fbff 	bl	8001a1e <get_fat>
 8002220:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002228:	d101      	bne.n	800222e <dir_sdi+0xe0>
 800222a:	2301      	movs	r3, #1
 800222c:	e059      	b.n	80022e2 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d909      	bls.n	8002248 <dir_sdi+0xfa>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	d301      	bcc.n	800224c <dir_sdi+0xfe>
				return FR_INT_ERR;
 8002248:	2302      	movs	r3, #2
 800224a:	e04a      	b.n	80022e2 <dir_sdi+0x194>
			idx -= ic;
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d2d9      	bcs.n	8002210 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6979      	ldr	r1, [r7, #20]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fbb5 	bl	80019d6 <clust2sect>
 800226c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002274:	461a      	mov	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <dir_sdi+0x136>
 8002280:	2302      	movs	r3, #2
 8002282:	e02e      	b.n	80022e2 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002290:	895b      	ldrh	r3, [r3, #10]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	fbb3 f2f2 	udiv	r2, r3, r2
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022a8:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c0:	895b      	ldrh	r3, [r3, #10]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80022ce:	fb01 f202 	mul.w	r2, r1, r2
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	015b      	lsls	r3, r3, #5
 80022d6:	4403      	add	r3, r0
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022de:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80022ea:	b590      	push	{r4, r7, lr}
 80022ec:	b087      	sub	sp, #28
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fa:	88db      	ldrh	r3, [r3, #6]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <dir_next+0x2a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <dir_next+0x2e>
		return FR_NO_FILE;
 8002314:	2304      	movs	r3, #4
 8002316:	e12e      	b.n	8002576 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002324:	895b      	ldrh	r3, [r3, #10]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b29b      	uxth	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002332:	fb01 f202 	mul.w	r2, r1, r2
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 80fa 	bne.w	8002532 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	3301      	adds	r3, #1
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800234e:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10d      	bne.n	8002378 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002368:	891b      	ldrh	r3, [r3, #8]
 800236a:	461a      	mov	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4293      	cmp	r3, r2
 8002370:	f0c0 80df 	bcc.w	8002532 <dir_next+0x248>
				return FR_NO_FILE;
 8002374:	2304      	movs	r3, #4
 8002376:	e0fe      	b.n	8002576 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	895b      	ldrh	r3, [r3, #10]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	b29b      	uxth	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800239e:	7892      	ldrb	r2, [r2, #2]
 80023a0:	3a01      	subs	r2, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 80c4 	bne.w	8002532 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7ff fb2e 	bl	8001a1e <get_fat>
 80023c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d801      	bhi.n	80023ce <dir_next+0xe4>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e0d3      	b.n	8002576 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023d4:	d101      	bne.n	80023da <dir_next+0xf0>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0cd      	b.n	8002576 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	f0c0 808e 	bcc.w	800250c <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <dir_next+0x110>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e0bd      	b.n	8002576 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f7ff fdb6 	bl	8001f7e <create_chain>
 8002412:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <dir_next+0x134>
 800241a:	2307      	movs	r3, #7
 800241c:	e0ab      	b.n	8002576 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <dir_next+0x13e>
 8002424:	2302      	movs	r3, #2
 8002426:	e0a6      	b.n	8002576 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800242e:	d101      	bne.n	8002434 <dir_next+0x14a>
 8002430:	2301      	movs	r3, #1
 8002432:	e0a0      	b.n	8002576 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff f987 	bl	8001750 <sync_window>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <dir_next+0x162>
 8002448:	2301      	movs	r3, #1
 800244a:	e094      	b.n	8002576 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002462:	895b      	ldrh	r3, [r3, #10]
 8002464:	461a      	mov	r2, r3
 8002466:	2100      	movs	r1, #0
 8002468:	f7fe ff5a 	bl	8001320 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247a:	681c      	ldr	r4, [r3, #0]
 800247c:	6979      	ldr	r1, [r7, #20]
 800247e:	4610      	mov	r0, r2
 8002480:	f7ff faa9 	bl	80019d6 <clust2sect>
 8002484:	4603      	mov	r3, r0
 8002486:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800248a:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e021      	b.n	80024d6 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249e:	2201      	movs	r2, #1
 80024a0:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f950 	bl	8001750 <sync_window>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <dir_next+0x1d0>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e05d      	b.n	8002576 <dir_next+0x28c>
						dp->fs->winsect++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80024c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024c8:	3201      	adds	r2, #1
 80024ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	3301      	adds	r3, #1
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e2:	789b      	ldrb	r3, [r3, #2]
 80024e4:	461a      	mov	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d3d2      	bcc.n	8002492 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1acb      	subs	r3, r1, r3
 8002506:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800250a:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002512:	461a      	mov	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6979      	ldr	r1, [r7, #20]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fa57 	bl	80019d6 <clust2sect>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002530:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253c:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002554:	895b      	ldrh	r3, [r3, #10]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002562:	fb01 f202 	mul.w	r2, r1, r2
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	015b      	lsls	r3, r3, #5
 800256a:	4403      	add	r3, r0
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002572:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd90      	pop	{r4, r7, pc}

0800257e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8002588:	2100      	movs	r1, #0
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fddf 	bl	800214e <dir_sdi>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d135      	bne.n	8002606 <dir_alloc+0x88>
		n = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f7ff f91f 	bl	80017f4 <move_window>
 80025b6:	4603      	mov	r3, r0
 80025b8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d121      	bne.n	8002604 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2be5      	cmp	r3, #229	; 0xe5
 80025cc:	d006      	beq.n	80025dc <dir_alloc+0x5e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	3301      	adds	r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d102      	bne.n	80025f0 <dir_alloc+0x72>
 80025ea:	e00c      	b.n	8002606 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80025f0:	2101      	movs	r1, #1
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fe79 	bl	80022ea <dir_next>
 80025f8:	4603      	mov	r3, r0
 80025fa:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0cd      	beq.n	800259e <dir_alloc+0x20>
 8002602:	e000      	b.n	8002606 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8002604:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d101      	bne.n	8002610 <dir_alloc+0x92>
 800260c:	2307      	movs	r3, #7
 800260e:	73fb      	strb	r3, [r7, #15]
	return res;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	331b      	adds	r3, #27
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	b21a      	sxth	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	331a      	adds	r3, #26
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	b21b      	sxth	r3, r3
 8002636:	4313      	orrs	r3, r2
 8002638:	b21b      	sxth	r3, r3
 800263a:	b29b      	uxth	r3, r3
 800263c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d10f      	bne.n	800266a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	3315      	adds	r3, #21
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	b21a      	sxth	r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	b21b      	sxth	r3, r3
 8002660:	b29b      	uxth	r3, r3
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

	return cl;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	331a      	adds	r3, #26
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	331b      	adds	r3, #27
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	0c1a      	lsrs	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3314      	adds	r3, #20
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3315      	adds	r3, #21
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
	...

080026c4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	2301      	movs	r3, #1
 80026ea:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80026ec:	4a2b      	ldr	r2, [pc, #172]	; (800279c <cmp_lfn+0xd8>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	b21a      	sxth	r2, r3
 8002700:	4926      	ldr	r1, [pc, #152]	; (800279c <cmp_lfn+0xd8>)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	440b      	add	r3, r1
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	440b      	add	r3, r1
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b21b      	sxth	r3, r3
 8002712:	4313      	orrs	r3, r2
 8002714:	b21b      	sxth	r3, r3
 8002716:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8002718:	89fb      	ldrh	r3, [r7, #14]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d019      	beq.n	8002752 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800271e:	89bb      	ldrh	r3, [r7, #12]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe f823 	bl	800076c <ff_wtoupper>
 8002726:	4603      	mov	r3, r0
 8002728:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2bfe      	cmp	r3, #254	; 0xfe
 800272e:	d80e      	bhi.n	800274e <cmp_lfn+0x8a>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	617a      	str	r2, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4413      	add	r3, r2
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe f814 	bl	800076c <ff_wtoupper>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	89fb      	ldrh	r3, [r7, #14]
 800274a:	4293      	cmp	r3, r2
 800274c:	d008      	beq.n	8002760 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800274e:	2300      	movs	r3, #0
 8002750:	e01f      	b.n	8002792 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8002752:	89bb      	ldrh	r3, [r7, #12]
 8002754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002758:	4293      	cmp	r3, r2
 800275a:	d001      	beq.n	8002760 <cmp_lfn+0x9c>
 800275c:	2300      	movs	r3, #0
 800275e:	e018      	b.n	8002792 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	3301      	adds	r3, #1
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d9bf      	bls.n	80026ec <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <cmp_lfn+0xcc>
 8002778:	89fb      	ldrh	r3, [r7, #14]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <cmp_lfn+0xcc>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <cmp_lfn+0xcc>
		return 0;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	08007f74 	.word	0x08007f74

080027a0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	71fb      	strb	r3, [r7, #7]
 80027b2:	4613      	mov	r3, r2
 80027b4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	330d      	adds	r3, #13
 80027ba:	79ba      	ldrb	r2, [r7, #6]
 80027bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	330b      	adds	r3, #11
 80027c2:	220f      	movs	r2, #15
 80027c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	330c      	adds	r3, #12
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	331a      	adds	r3, #26
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	331b      	adds	r3, #27
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	82fb      	strh	r3, [r7, #22]
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80027f6:	8afb      	ldrh	r3, [r7, #22]
 80027f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <fit_lfn+0x70>
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	61fa      	str	r2, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8002810:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <fit_lfn+0xe4>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4413      	add	r3, r2
 800281e:	8afa      	ldrh	r2, [r7, #22]
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	8afb      	ldrh	r3, [r7, #22]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b299      	uxth	r1, r3
 800282a:	4a16      	ldr	r2, [pc, #88]	; (8002884 <fit_lfn+0xe4>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	4413      	add	r3, r2
 8002838:	b2ca      	uxtb	r2, r1
 800283a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800283c:	8afb      	ldrh	r3, [r7, #22]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <fit_lfn+0xa8>
 8002842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002846:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3301      	adds	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d9d0      	bls.n	80027f6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8002854:	8afb      	ldrh	r3, [r7, #22]
 8002856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800285a:	4293      	cmp	r3, r2
 800285c:	d006      	beq.n	800286c <fit_lfn+0xcc>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <fit_lfn+0xd4>
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002872:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	79fa      	ldrb	r2, [r7, #7]
 8002878:	701a      	strb	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	08007f74 	.word	0x08007f74

08002888 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8002896:	220b      	movs	r2, #11
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7fe fd22 	bl	80012e4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	d92b      	bls.n	80028fe <gen_numname+0x76>
		sr = seq;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80028aa:	e022      	b.n	80028f2 <gen_numname+0x6a>
			wc = *lfn++;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	1c9a      	adds	r2, r3, #2
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80028b6:	2300      	movs	r3, #0
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ba:	e017      	b.n	80028ec <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005a      	lsls	r2, r3, #1
 80028c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80028ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <gen_numname+0x5e>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80028e0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80028e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	3301      	adds	r3, #1
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	d9e4      	bls.n	80028bc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1d8      	bne.n	80028ac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80028fe:	2307      	movs	r3, #7
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3330      	adds	r3, #48	; 0x30
 800290e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8002912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002916:	2b39      	cmp	r3, #57	; 0x39
 8002918:	d904      	bls.n	8002924 <gen_numname+0x9c>
 800291a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800291e:	3307      	adds	r3, #7
 8002920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	1e5a      	subs	r2, r3, #1
 8002928:	62ba      	str	r2, [r7, #40]	; 0x28
 800292a:	3330      	adds	r3, #48	; 0x30
 800292c:	443b      	add	r3, r7
 800292e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002932:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1df      	bne.n	8002902 <gen_numname+0x7a>
	ns[i] = '~';
 8002942:	f107 0214 	add.w	r2, r7, #20
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	4413      	add	r3, r2
 800294a:	227e      	movs	r2, #126	; 0x7e
 800294c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
 8002952:	e002      	b.n	800295a <gen_numname+0xd2>
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3301      	adds	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	429a      	cmp	r2, r3
 8002960:	d205      	bcs.n	800296e <gen_numname+0xe6>
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b20      	cmp	r3, #32
 800296c:	d1f2      	bne.n	8002954 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	2b07      	cmp	r3, #7
 8002972:	d807      	bhi.n	8002984 <gen_numname+0xfc>
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	62ba      	str	r2, [r7, #40]	; 0x28
 800297a:	3330      	adds	r3, #48	; 0x30
 800297c:	443b      	add	r3, r7
 800297e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8002982:	e000      	b.n	8002986 <gen_numname+0xfe>
 8002984:	2120      	movs	r1, #32
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	627a      	str	r2, [r7, #36]	; 0x24
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	460a      	mov	r2, r1
 8002992:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	2b07      	cmp	r3, #7
 8002998:	d9e9      	bls.n	800296e <gen_numname+0xe6>
}
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	3730      	adds	r7, #48	; 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80029b0:	230b      	movs	r3, #11
 80029b2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	0852      	lsrs	r2, r2, #1
 80029ba:	01db      	lsls	r3, r3, #7
 80029bc:	4313      	orrs	r3, r2
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	6079      	str	r1, [r7, #4]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ed      	bne.n	80029b4 <sum_sfn+0x10>
	return sum;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80029ec:	2100      	movs	r1, #0
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fbad 	bl	800214e <dir_sdi>
 80029f4:	4603      	mov	r3, r0
 80029f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <dir_find+0x1e>
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	e0b8      	b.n	8002b74 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002a02:	23ff      	movs	r3, #255	; 0xff
 8002a04:	753b      	strb	r3, [r7, #20]
 8002a06:	7d3b      	ldrb	r3, [r7, #20]
 8002a08:	757b      	strb	r3, [r7, #21]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a14:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f7fe fee3 	bl	80017f4 <move_window>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 8097 	bne.w	8002b68 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002a4a:	7dbb      	ldrb	r3, [r7, #22]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <dir_find+0x72>
 8002a50:	2304      	movs	r3, #4
 8002a52:	75fb      	strb	r3, [r7, #23]
 8002a54:	e08d      	b.n	8002b72 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	330b      	adds	r3, #11
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a60:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002a62:	7dbb      	ldrb	r3, [r7, #22]
 8002a64:	2be5      	cmp	r3, #229	; 0xe5
 8002a66:	d007      	beq.n	8002a78 <dir_find+0x94>
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <dir_find+0xa6>
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b0f      	cmp	r3, #15
 8002a76:	d008      	beq.n	8002a8a <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002a78:	23ff      	movs	r3, #255	; 0xff
 8002a7a:	757b      	strb	r3, [r7, #21]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a86:	849a      	strh	r2, [r3, #36]	; 0x24
 8002a88:	e063      	b.n	8002b52 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b0f      	cmp	r3, #15
 8002a8e:	d137      	bne.n	8002b00 <dir_find+0x11c>
				if (dp->lfn) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05a      	beq.n	8002b52 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8002a9c:	7dbb      	ldrb	r3, [r7, #22]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	7b5b      	ldrb	r3, [r3, #13]
 8002aaa:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8002aac:	7dbb      	ldrb	r3, [r7, #22]
 8002aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab2:	75bb      	strb	r3, [r7, #22]
 8002ab4:	7dbb      	ldrb	r3, [r7, #22]
 8002ab6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abe:	88da      	ldrh	r2, [r3, #6]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac6:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8002ac8:	7dba      	ldrb	r2, [r7, #22]
 8002aca:	7d7b      	ldrb	r3, [r7, #21]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d114      	bne.n	8002afa <dir_find+0x116>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	330d      	adds	r3, #13
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	7d3a      	ldrb	r2, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d10e      	bne.n	8002afa <dir_find+0x116>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	6939      	ldr	r1, [r7, #16]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fdec 	bl	80026c4 <cmp_lfn>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <dir_find+0x116>
 8002af2:	7d7b      	ldrb	r3, [r7, #21]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	e000      	b.n	8002afc <dir_find+0x118>
 8002afa:	23ff      	movs	r3, #255	; 0xff
 8002afc:	757b      	strb	r3, [r7, #21]
 8002afe:	e028      	b.n	8002b52 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8002b00:	7d7b      	ldrb	r3, [r7, #21]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <dir_find+0x132>
 8002b06:	6938      	ldr	r0, [r7, #16]
 8002b08:	f7ff ff4c 	bl	80029a4 <sum_sfn>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	7d3b      	ldrb	r3, [r7, #20]
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02a      	beq.n	8002b6c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	330b      	adds	r3, #11
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <dir_find+0x15e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	220b      	movs	r2, #11
 8002b34:	4619      	mov	r1, r3
 8002b36:	6938      	ldr	r0, [r7, #16]
 8002b38:	f7fe fc0c 	bl	8001354 <mem_cmp>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d016      	beq.n	8002b70 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002b42:	23ff      	movs	r3, #255	; 0xff
 8002b44:	757b      	strb	r3, [r7, #21]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b50:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8002b52:	2100      	movs	r1, #0
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fbc8 	bl	80022ea <dir_next>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f43f af58 	beq.w	8002a16 <dir_find+0x32>
 8002b66:	e004      	b.n	8002b72 <dir_find+0x18e>
		if (res != FR_OK) break;
 8002b68:	bf00      	nop
 8002b6a:	e002      	b.n	8002b72 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8002b70:	bf00      	nop

	return res;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	220c      	movs	r2, #12
 8002b9e:	6a39      	ldr	r1, [r7, #32]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fb9f 	bl	80012e4 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d03b      	beq.n	8002c28 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	330b      	adds	r3, #11
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc8:	e013      	b.n	8002bf2 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8002bca:	f107 010c 	add.w	r1, r7, #12
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	6a38      	ldr	r0, [r7, #32]
 8002bd4:	f7ff fe58 	bl	8002888 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff03 	bl	80029e4 <dir_find>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8002be4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	3301      	adds	r3, #1
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	2b63      	cmp	r3, #99	; 0x63
 8002bf6:	d9e8      	bls.n	8002bca <dir_register+0x4e>
 8002bf8:	e000      	b.n	8002bfc <dir_register+0x80>
			if (res != FR_OK) break;
 8002bfa:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d101      	bne.n	8002c06 <dir_register+0x8a>
 8002c02:	2307      	movs	r3, #7
 8002c04:	e0d8      	b.n	8002db8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8002c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d002      	beq.n	8002c14 <dir_register+0x98>
 8002c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c12:	e0d1      	b.n	8002db8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	330b      	adds	r3, #11
 8002c18:	7dfa      	ldrb	r2, [r7, #23]
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c22:	461a      	mov	r2, r3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d014      	beq.n	8002c5c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c36:	e002      	b.n	8002c3e <dir_register+0xc2>
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f5      	bne.n	8002c38 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	3319      	adds	r3, #25
 8002c50:	4a5b      	ldr	r2, [pc, #364]	; (8002dc0 <dir_register+0x244>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	e001      	b.n	8002c60 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8002c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fc8b 	bl	800257e <dir_alloc>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8002c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d15b      	bne.n	8002d2e <dir_register+0x1b2>
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d055      	beq.n	8002d2e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c88:	88db      	ldrh	r3, [r3, #6]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	4619      	mov	r1, r3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fa5b 	bl	800214e <dir_sdi>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8002c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d143      	bne.n	8002d2e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fe78 	bl	80029a4 <sum_sfn>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f7fe fd92 	bl	80017f4 <move_window>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8002cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d126      	bne.n	8002d2c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce4:	6a18      	ldr	r0, [r3, #32]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cec:	6959      	ldr	r1, [r3, #20]
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	7efb      	ldrb	r3, [r7, #27]
 8002cf4:	f7ff fd54 	bl	80027a0 <fit_lfn>
				dp->fs->wflag = 1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d04:	2201      	movs	r2, #1
 8002d06:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8002d08:	2100      	movs	r1, #0
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff faed 	bl	80022ea <dir_next>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8002d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <dir_register+0x1b2>
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	3b01      	subs	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1c6      	bne.n	8002cb8 <dir_register+0x13c>
 8002d2a:	e000      	b.n	8002d2e <dir_register+0x1b2>
				if (res != FR_OK) break;
 8002d2c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8002d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d13e      	bne.n	8002db4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f7fe fd53 	bl	80017f4 <move_window>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8002d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d12b      	bne.n	8002db4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	2220      	movs	r2, #32
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fad9 	bl	8001320 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d74:	6958      	ldr	r0, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	220b      	movs	r2, #11
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fe faaf 	bl	80012e4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	330b      	adds	r3, #11
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	f002 0218 	and.w	r2, r2, #24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db0:	2201      	movs	r2, #1
 8002db2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8002db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3730      	adds	r7, #48	; 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	4ec4ec4f 	.word	0x4ec4ec4f

08002dc4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e002      	b.n	8002ddc <create_name+0x18>
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b2f      	cmp	r3, #47	; 0x2f
 8002de2:	d0f8      	beq.n	8002dd6 <create_name+0x12>
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b5c      	cmp	r3, #92	; 0x5c
 8002dea:	d0f4      	beq.n	8002dd6 <create_name+0x12>
	lfn = dp->lfn;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	61ba      	str	r2, [r7, #24]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8002e0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e0e:	2b1f      	cmp	r3, #31
 8002e10:	d92f      	bls.n	8002e72 <create_name+0xae>
 8002e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e14:	2b2f      	cmp	r3, #47	; 0x2f
 8002e16:	d02c      	beq.n	8002e72 <create_name+0xae>
 8002e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e1a:	2b5c      	cmp	r3, #92	; 0x5c
 8002e1c:	d029      	beq.n	8002e72 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2bfe      	cmp	r3, #254	; 0xfe
 8002e22:	d901      	bls.n	8002e28 <create_name+0x64>
			return FR_INVALID_NAME;
 8002e24:	2306      	movs	r3, #6
 8002e26:	e186      	b.n	8003136 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8002e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8002e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e30:	2101      	movs	r1, #1
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fc60 	bl	80006f8 <ff_convert>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8002e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <create_name+0x82>
 8002e42:	2306      	movs	r3, #6
 8002e44:	e177      	b.n	8003136 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8002e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e48:	2b7f      	cmp	r3, #127	; 0x7f
 8002e4a:	d809      	bhi.n	8002e60 <create_name+0x9c>
 8002e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	488e      	ldr	r0, [pc, #568]	; (800308c <create_name+0x2c8>)
 8002e52:	f7fe faa5 	bl	80013a0 <chk_chr>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <create_name+0x9c>
			return FR_INVALID_NAME;
 8002e5c:	2306      	movs	r3, #6
 8002e5e:	e16a      	b.n	8003136 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	617a      	str	r2, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e6e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8002e70:	e7c5      	b.n	8002dfe <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	441a      	add	r2, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8002e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e7e:	2b1f      	cmp	r3, #31
 8002e80:	d801      	bhi.n	8002e86 <create_name+0xc2>
 8002e82:	2304      	movs	r3, #4
 8002e84:	e000      	b.n	8002e88 <create_name+0xc4>
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8002e8c:	e011      	b.n	8002eb2 <create_name+0xee>
		w = lfn[di - 1];
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002e94:	3b01      	subs	r3, #1
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8002ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d002      	beq.n	8002eac <create_name+0xe8>
 8002ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eaa:	d106      	bne.n	8002eba <create_name+0xf6>
		di--;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ea      	bne.n	8002e8e <create_name+0xca>
 8002eb8:	e000      	b.n	8002ebc <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8002eba:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <create_name+0x102>
 8002ec2:	2306      	movs	r3, #6
 8002ec4:	e137      	b.n	8003136 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4413      	add	r3, r2
 8002ece:	2200      	movs	r2, #0
 8002ed0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	220b      	movs	r2, #11
 8002edc:	2120      	movs	r1, #32
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe fa1e 	bl	8001320 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	e002      	b.n	8002ef0 <create_name+0x12c>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	3301      	adds	r3, #1
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d0f5      	beq.n	8002eea <create_name+0x126>
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	2b2e      	cmp	r3, #46	; 0x2e
 8002f0a:	d0ee      	beq.n	8002eea <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <create_name+0x162>
 8002f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f16:	f043 0303 	orr.w	r3, r3, #3
 8002f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8002f1e:	e002      	b.n	8002f26 <create_name+0x162>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <create_name+0x17c>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002f32:	3b01      	subs	r3, #1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8002f3e:	d1ef      	bne.n	8002f20 <create_name+0x15c>

	b = i = 0; ni = 8;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	61ba      	str	r2, [r7, #24]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8002f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8091 	beq.w	8003088 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8002f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d006      	beq.n	8002f7a <create_name+0x1b6>
 8002f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f70:	d10a      	bne.n	8002f88 <create_name+0x1c4>
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d006      	beq.n	8002f88 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8002f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f7e:	f043 0303 	orr.w	r3, r3, #3
 8002f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f86:	e07e      	b.n	8003086 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8002f88:	6a3a      	ldr	r2, [r7, #32]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d203      	bcs.n	8002f98 <create_name+0x1d4>
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d123      	bne.n	8002fe0 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b0b      	cmp	r3, #11
 8002f9c:	d106      	bne.n	8002fac <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8002f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa2:	f043 0303 	orr.w	r3, r3, #3
 8002fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002faa:	e076      	b.n	800309a <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d005      	beq.n	8002fc0 <create_name+0x1fc>
 8002fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb8:	f043 0303 	orr.w	r3, r3, #3
 8002fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d867      	bhi.n	8003098 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	2308      	movs	r3, #8
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	230b      	movs	r3, #11
 8002fd2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8002fd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002fde:	e052      	b.n	8003086 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8002fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe4:	d914      	bls.n	8003010 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8002fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fb84 	bl	80006f8 <ff_convert>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8002ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <create_name+0x240>
 8002ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ffc:	3b80      	subs	r3, #128	; 0x80
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <create_name+0x2cc>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
 8003002:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8003004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <create_name+0x262>
 8003016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003018:	4619      	mov	r1, r3
 800301a:	481e      	ldr	r0, [pc, #120]	; (8003094 <create_name+0x2d0>)
 800301c:	f7fe f9c0 	bl	80013a0 <chk_chr>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003026:	235f      	movs	r3, #95	; 0x5f
 8003028:	84bb      	strh	r3, [r7, #36]	; 0x24
 800302a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800302e:	f043 0303 	orr.w	r3, r3, #3
 8003032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003036:	e01b      	b.n	8003070 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d909      	bls.n	8003052 <create_name+0x28e>
 800303e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003040:	2b5a      	cmp	r3, #90	; 0x5a
 8003042:	d806      	bhi.n	8003052 <create_name+0x28e>
					b |= 2;
 8003044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003050:	e00e      	b.n	8003070 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8003052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d90b      	bls.n	8003070 <create_name+0x2ac>
 8003058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800305a:	2b7a      	cmp	r3, #122	; 0x7a
 800305c:	d808      	bhi.n	8003070 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800305e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800306a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800306c:	3b20      	subs	r3, #32
 800306e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	1c59      	adds	r1, r3, #1
 800307c:	6239      	str	r1, [r7, #32]
 800307e:	4413      	add	r3, r2
 8003080:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8003086:	e762      	b.n	8002f4e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8003088:	bf00      	nop
 800308a:	e006      	b.n	800309a <create_name+0x2d6>
 800308c:	080079d4 	.word	0x080079d4
 8003090:	08007ef4 	.word	0x08007ef4
 8003094:	080079e0 	.word	0x080079e0
			if (si > di) break;			/* No extension */
 8003098:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2be5      	cmp	r3, #229	; 0xe5
 80030a6:	d105      	bne.n	80030b4 <create_name+0x2f0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2205      	movs	r2, #5
 80030b2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d104      	bne.n	80030c4 <create_name+0x300>
 80030ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80030c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	d005      	beq.n	80030dc <create_name+0x318>
 80030d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d105      	bne.n	80030e8 <create_name+0x324>
		cf |= NS_LFN;
 80030dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80030e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d117      	bne.n	8003124 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80030f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <create_name+0x348>
 8003100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003104:	f043 0310 	orr.w	r3, r3, #16
 8003108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800310c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b04      	cmp	r3, #4
 8003116:	d105      	bne.n	8003124 <create_name+0x360>
 8003118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800311c:	f043 0308 	orr.w	r3, r3, #8
 8003120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	330b      	adds	r3, #11
 800312e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003132:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003134:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8003136:	4618      	mov	r0, r3
 8003138:	3728      	adds	r7, #40	; 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop

08003140 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b2f      	cmp	r3, #47	; 0x2f
 8003150:	d003      	beq.n	800315a <follow_path+0x1a>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b5c      	cmp	r3, #92	; 0x5c
 8003158:	d102      	bne.n	8003160 <follow_path+0x20>
		path++;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003166:	461a      	mov	r2, r3
 8003168:	2300      	movs	r3, #0
 800316a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b1f      	cmp	r3, #31
 8003172:	d80c      	bhi.n	800318e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8003174:	2100      	movs	r1, #0
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe ffe9 	bl	800214e <dir_sdi>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003186:	461a      	mov	r2, r3
 8003188:	2300      	movs	r3, #0
 800318a:	6153      	str	r3, [r2, #20]
 800318c:	e049      	b.n	8003222 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800318e:	463b      	mov	r3, r7
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fe16 	bl	8002dc4 <create_name>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d13a      	bne.n	8003218 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff fc1e 	bl	80029e4 <dir_find>
 80031a8:	4603      	mov	r3, r0
 80031aa:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	7adb      	ldrb	r3, [r3, #11]
 80031b6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d12b      	bne.n	800321c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80031c4:	7bbb      	ldrb	r3, [r7, #14]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d126      	bne.n	800321c <follow_path+0xdc>
 80031ce:	2305      	movs	r3, #5
 80031d0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80031d2:	e023      	b.n	800321c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80031d4:	7bbb      	ldrb	r3, [r7, #14]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d120      	bne.n	8003220 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	330b      	adds	r3, #11
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80031f6:	2305      	movs	r3, #5
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	e012      	b.n	8003222 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fa07 	bl	800261a <ld_clust>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003214:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003216:	e7ba      	b.n	800318e <follow_path+0x4e>
			if (res != FR_OK) break;
 8003218:	bf00      	nop
 800321a:	e002      	b.n	8003222 <follow_path+0xe2>
				break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003220:	bf00      	nop
		}
	}

	return res;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003238:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d031      	beq.n	80032a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e002      	b.n	8003250 <get_ldnumber+0x24>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b1f      	cmp	r3, #31
 8003256:	d903      	bls.n	8003260 <get_ldnumber+0x34>
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b3a      	cmp	r3, #58	; 0x3a
 800325e:	d1f4      	bne.n	800324a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b3a      	cmp	r3, #58	; 0x3a
 8003266:	d11c      	bne.n	80032a2 <get_ldnumber+0x76>
			tp = *path;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	60fa      	str	r2, [r7, #12]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	3b30      	subs	r3, #48	; 0x30
 8003278:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b09      	cmp	r3, #9
 800327e:	d80e      	bhi.n	800329e <get_ldnumber+0x72>
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	429a      	cmp	r2, r3
 8003286:	d10a      	bne.n	800329e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <get_ldnumber+0x72>
					vol = (int)i;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3301      	adds	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	e002      	b.n	80032a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80032a6:	693b      	ldr	r3, [r7, #16]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
	...

080032b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c4:	2200      	movs	r2, #0
 80032c6:	711a      	strb	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ce:	461a      	mov	r2, r3
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d4:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80032d6:	6839      	ldr	r1, [r7, #0]
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7fe fa8b 	bl	80017f4 <move_window>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <check_fs+0x34>
		return 3;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e04a      	b.n	800337e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80032ee:	3301      	adds	r3, #1
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	b21a      	sxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	4313      	orrs	r3, r2
 8003300:	b21b      	sxth	r3, r3
 8003302:	4a21      	ldr	r2, [pc, #132]	; (8003388 <check_fs+0xd4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d001      	beq.n	800330c <check_fs+0x58>
		return 2;
 8003308:	2302      	movs	r3, #2
 800330a:	e038      	b.n	800337e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3336      	adds	r3, #54	; 0x36
 8003310:	3303      	adds	r3, #3
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	061a      	lsls	r2, r3, #24
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3336      	adds	r3, #54	; 0x36
 800331a:	3302      	adds	r3, #2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	4313      	orrs	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	3236      	adds	r2, #54	; 0x36
 8003326:	3201      	adds	r2, #1
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	0212      	lsls	r2, r2, #8
 800332c:	4313      	orrs	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003334:	4313      	orrs	r3, r2
 8003336:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800333a:	4a14      	ldr	r2, [pc, #80]	; (800338c <check_fs+0xd8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <check_fs+0x90>
		return 0;
 8003340:	2300      	movs	r3, #0
 8003342:	e01c      	b.n	800337e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3352      	adds	r3, #82	; 0x52
 8003348:	3303      	adds	r3, #3
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	061a      	lsls	r2, r3, #24
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3352      	adds	r3, #82	; 0x52
 8003352:	3302      	adds	r3, #2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	4313      	orrs	r3, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	3252      	adds	r2, #82	; 0x52
 800335e:	3201      	adds	r2, #1
 8003360:	7812      	ldrb	r2, [r2, #0]
 8003362:	0212      	lsls	r2, r2, #8
 8003364:	4313      	orrs	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800336c:	4313      	orrs	r3, r2
 800336e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003372:	4a06      	ldr	r2, [pc, #24]	; (800338c <check_fs+0xd8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <check_fs+0xc8>
		return 0;
 8003378:	2300      	movs	r3, #0
 800337a:	e000      	b.n	800337e <check_fs+0xca>

	return 1;
 800337c:	2301      	movs	r3, #1
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	ffffaa55 	.word	0xffffaa55
 800338c:	00544146 	.word	0x00544146

08003390 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b096      	sub	sp, #88	; 0x58
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	4613      	mov	r3, r2
 800339c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80033a4:	68b8      	ldr	r0, [r7, #8]
 80033a6:	f7ff ff41 	bl	800322c <get_ldnumber>
 80033aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80033ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da01      	bge.n	80033b6 <find_volume+0x26>
 80033b2:	230b      	movs	r3, #11
 80033b4:	e311      	b.n	80039da <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80033b6:	4a98      	ldr	r2, [pc, #608]	; (8003618 <find_volume+0x288>)
 80033b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <find_volume+0x3a>
 80033c6:	230c      	movs	r3, #12
 80033c8:	e307      	b.n	80039da <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ce:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80033d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01c      	beq.n	8003416 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80033dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd f9ef 	bl	80007c8 <disk_status>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80033f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10c      	bne.n	8003416 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <find_volume+0x82>
 8003402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800340e:	230a      	movs	r3, #10
 8003410:	e2e3      	b.n	80039da <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8003412:	2300      	movs	r3, #0
 8003414:	e2e1      	b.n	80039da <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003422:	b2da      	uxtb	r2, r3
 8003424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800342a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd f9e1 	bl	80007fc <disk_initialize>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800344c:	2303      	movs	r3, #3
 800344e:	e2c4      	b.n	80039da <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <find_volume+0xd6>
 8003456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8003462:	230a      	movs	r3, #10
 8003464:	e2b9      	b.n	80039da <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800346c:	7858      	ldrb	r0, [r3, #1]
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003474:	330a      	adds	r3, #10
 8003476:	461a      	mov	r2, r3
 8003478:	2102      	movs	r1, #2
 800347a:	f7fd fa25 	bl	80008c8 <disk_ioctl>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10d      	bne.n	80034a0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348a:	895b      	ldrh	r3, [r3, #10]
 800348c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003490:	d306      	bcc.n	80034a0 <find_volume+0x110>
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003498:	895b      	ldrh	r3, [r3, #10]
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349e:	d901      	bls.n	80034a4 <find_volume+0x114>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e29a      	b.n	80039da <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80034a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034ac:	f7ff ff02 	bl	80032b4 <check_fs>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80034b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d153      	bne.n	8003566 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80034be:	2300      	movs	r3, #0
 80034c0:	643b      	str	r3, [r7, #64]	; 0x40
 80034c2:	e028      	b.n	8003516 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80034c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80034ce:	4413      	add	r3, r2
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	3304      	adds	r3, #4
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d012      	beq.n	8003502 <find_volume+0x172>
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	330b      	adds	r3, #11
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	061a      	lsls	r2, r3, #24
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	330a      	adds	r3, #10
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	4313      	orrs	r3, r2
 80034ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f0:	3209      	adds	r2, #9
 80034f2:	7812      	ldrb	r2, [r2, #0]
 80034f4:	0212      	lsls	r2, r2, #8
 80034f6:	4313      	orrs	r3, r2
 80034f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034fa:	3208      	adds	r2, #8
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	431a      	orrs	r2, r3
 8003500:	e000      	b.n	8003504 <find_volume+0x174>
 8003502:	2200      	movs	r2, #0
 8003504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	3358      	adds	r3, #88	; 0x58
 800350a:	443b      	add	r3, r7
 800350c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003512:	3301      	adds	r3, #1
 8003514:	643b      	str	r3, [r7, #64]	; 0x40
 8003516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003518:	2b03      	cmp	r3, #3
 800351a:	d9d3      	bls.n	80034c4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800351c:	2300      	movs	r3, #0
 800351e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <find_volume+0x19c>
 8003526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003528:	3b01      	subs	r3, #1
 800352a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800352c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	3358      	adds	r3, #88	; 0x58
 8003532:	443b      	add	r3, r7
 8003534:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003538:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800353a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <find_volume+0x1bc>
 8003540:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003542:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003544:	f7ff feb6 	bl	80032b4 <check_fs>
 8003548:	4603      	mov	r3, r0
 800354a:	e000      	b.n	800354e <find_volume+0x1be>
 800354c:	2302      	movs	r3, #2
 800354e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <find_volume+0x1d6>
 800355a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355c:	3301      	adds	r3, #1
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	2b03      	cmp	r3, #3
 8003564:	d9e2      	bls.n	800352c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003566:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800356a:	2b03      	cmp	r3, #3
 800356c:	d101      	bne.n	8003572 <find_volume+0x1e2>
 800356e:	2301      	movs	r3, #1
 8003570:	e233      	b.n	80039da <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8003572:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <find_volume+0x1ee>
 800357a:	230d      	movs	r3, #13
 800357c:	e22d      	b.n	80039da <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	7b1b      	ldrb	r3, [r3, #12]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	b21a      	sxth	r2, r3
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	7adb      	ldrb	r3, [r3, #11]
 800358a:	b21b      	sxth	r3, r3
 800358c:	4313      	orrs	r3, r2
 800358e:	b21a      	sxth	r2, r3
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003596:	895b      	ldrh	r3, [r3, #10]
 8003598:	b21b      	sxth	r3, r3
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800359e:	230d      	movs	r3, #13
 80035a0:	e21b      	b.n	80039da <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80035a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a4:	7ddb      	ldrb	r3, [r3, #23]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	7d9b      	ldrb	r3, [r3, #22]
 80035ae:	b21b      	sxth	r3, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80035b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d112      	bne.n	80035e4 <find_volume+0x254>
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80035c4:	061a      	lsls	r2, r3, #24
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	4313      	orrs	r3, r2
 80035d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035d2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80035d6:	0212      	lsls	r2, r2, #8
 80035d8:	4313      	orrs	r3, r2
 80035da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035dc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80035e0:	4313      	orrs	r3, r2
 80035e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ea:	461a      	mov	r2, r3
 80035ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ee:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	7c1a      	ldrb	r2, [r3, #16]
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035fa:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d009      	beq.n	800361c <find_volume+0x28c>
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360e:	78db      	ldrb	r3, [r3, #3]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d003      	beq.n	800361c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8003614:	230d      	movs	r3, #13
 8003616:	e1e0      	b.n	80039da <find_volume+0x64a>
 8003618:	2000014c 	.word	0x2000014c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800361c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003622:	78db      	ldrb	r3, [r3, #3]
 8003624:	461a      	mov	r2, r3
 8003626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	7b5a      	ldrb	r2, [r3, #13]
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003638:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003640:	789b      	ldrb	r3, [r3, #2]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <find_volume+0x2d0>
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364c:	789b      	ldrb	r3, [r3, #2]
 800364e:	461a      	mov	r2, r3
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003656:	789b      	ldrb	r3, [r3, #2]
 8003658:	3b01      	subs	r3, #1
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8003660:	230d      	movs	r3, #13
 8003662:	e1ba      	b.n	80039da <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	7c9b      	ldrb	r3, [r3, #18]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	b21a      	sxth	r2, r3
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	7c5b      	ldrb	r3, [r3, #17]
 8003670:	b21b      	sxth	r3, r3
 8003672:	4313      	orrs	r3, r2
 8003674:	b21b      	sxth	r3, r3
 8003676:	b29a      	uxth	r2, r3
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003686:	891b      	ldrh	r3, [r3, #8]
 8003688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800368a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800368e:	8952      	ldrh	r2, [r2, #10]
 8003690:	0952      	lsrs	r2, r2, #5
 8003692:	b292      	uxth	r2, r2
 8003694:	fbb3 f1f2 	udiv	r1, r3, r2
 8003698:	fb01 f202 	mul.w	r2, r1, r2
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80036a4:	230d      	movs	r3, #13
 80036a6:	e198      	b.n	80039da <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	7d1b      	ldrb	r3, [r3, #20]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	b21a      	sxth	r2, r3
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	7cdb      	ldrb	r3, [r3, #19]
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	4313      	orrs	r3, r2
 80036b8:	b21b      	sxth	r3, r3
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80036be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d112      	bne.n	80036ea <find_volume+0x35a>
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80036ca:	061a      	lsls	r2, r3, #24
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	4313      	orrs	r3, r2
 80036d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036d8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80036dc:	0212      	lsls	r2, r2, #8
 80036de:	4313      	orrs	r3, r2
 80036e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	7bdb      	ldrb	r3, [r3, #15]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	b21a      	sxth	r2, r3
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	7b9b      	ldrb	r3, [r3, #14]
 80036f6:	b21b      	sxth	r3, r3
 80036f8:	4313      	orrs	r3, r2
 80036fa:	b21b      	sxth	r3, r3
 80036fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80036fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <find_volume+0x378>
 8003704:	230d      	movs	r3, #13
 8003706:	e168      	b.n	80039da <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003708:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	4413      	add	r3, r2
 800370e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003710:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003714:	8911      	ldrh	r1, [r2, #8]
 8003716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003718:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800371c:	8952      	ldrh	r2, [r2, #10]
 800371e:	0952      	lsrs	r2, r2, #5
 8003720:	b292      	uxth	r2, r2
 8003722:	fbb1 f2f2 	udiv	r2, r1, r2
 8003726:	b292      	uxth	r2, r2
 8003728:	4413      	add	r3, r2
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800372c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	429a      	cmp	r2, r3
 8003732:	d201      	bcs.n	8003738 <find_volume+0x3a8>
 8003734:	230d      	movs	r3, #13
 8003736:	e150      	b.n	80039da <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8003738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003740:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003744:	7892      	ldrb	r2, [r2, #2]
 8003746:	fbb3 f3f2 	udiv	r3, r3, r2
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <find_volume+0x3c6>
 8003752:	230d      	movs	r3, #13
 8003754:	e141      	b.n	80039da <find_volume+0x64a>
	fmt = FS_FAT12;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003762:	4293      	cmp	r3, r2
 8003764:	d902      	bls.n	800376c <find_volume+0x3dc>
 8003766:	2302      	movs	r3, #2
 8003768:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003772:	4293      	cmp	r3, r2
 8003774:	d902      	bls.n	800377c <find_volume+0x3ec>
 8003776:	2303      	movs	r3, #3
 8003778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	3302      	adds	r3, #2
 8003780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003782:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003786:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378e:	461a      	mov	r2, r3
 8003790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003792:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003794:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003798:	4413      	add	r3, r2
 800379a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800379c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037a0:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80037a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	4413      	add	r3, r2
 80037a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037ae:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80037b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d124      	bne.n	8003802 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037be:	891b      	ldrh	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <find_volume+0x438>
 80037c4:	230d      	movs	r3, #13
 80037c6:	e108      	b.n	80039da <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80037ce:	061a      	lsls	r2, r3, #24
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	4313      	orrs	r3, r2
 80037da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037dc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80037e0:	0212      	lsls	r2, r2, #8
 80037e2:	4313      	orrs	r3, r2
 80037e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037e6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80037ea:	4313      	orrs	r3, r2
 80037ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037f2:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003800:	e02b      	b.n	800385a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003808:	891b      	ldrh	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <find_volume+0x482>
 800380e:	230d      	movs	r3, #13
 8003810:	e0e3      	b.n	80039da <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381c:	4413      	add	r3, r2
 800381e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003820:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003824:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003826:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800382a:	2b02      	cmp	r3, #2
 800382c:	d105      	bne.n	800383a <find_volume+0x4aa>
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	e00e      	b.n	8003858 <find_volume+0x4c8>
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	085a      	lsrs	r2, r3, #1
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003868:	895b      	ldrh	r3, [r3, #10]
 800386a:	4619      	mov	r1, r3
 800386c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386e:	440b      	add	r3, r1
 8003870:	3b01      	subs	r3, #1
 8003872:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003874:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8003878:	8949      	ldrh	r1, [r1, #10]
 800387a:	fbb3 f3f1 	udiv	r3, r3, r1
 800387e:	429a      	cmp	r2, r3
 8003880:	d201      	bcs.n	8003886 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8003882:	230d      	movs	r3, #13
 8003884:	e0a9      	b.n	80039da <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800388c:	461a      	mov	r2, r3
 800388e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003892:	6113      	str	r3, [r2, #16]
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038a2:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80038ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d17a      	bne.n	80039ac <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	b21a      	sxth	r2, r3
 80038c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	4313      	orrs	r3, r2
 80038ca:	b21b      	sxth	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d16d      	bne.n	80039ac <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80038d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d2:	3301      	adds	r3, #1
 80038d4:	4619      	mov	r1, r3
 80038d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038d8:	f7fd ff8c 	bl	80017f4 <move_window>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d164      	bne.n	80039ac <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e8:	2200      	movs	r2, #0
 80038ea:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	b21a      	sxth	r2, r3
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80038fc:	b21b      	sxth	r3, r3
 80038fe:	4313      	orrs	r3, r2
 8003900:	b21b      	sxth	r3, r3
 8003902:	4a38      	ldr	r2, [pc, #224]	; (80039e4 <find_volume+0x654>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d151      	bne.n	80039ac <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	78db      	ldrb	r3, [r3, #3]
 800390c:	061a      	lsls	r2, r3, #24
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	789b      	ldrb	r3, [r3, #2]
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	4313      	orrs	r3, r2
 8003916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003918:	7852      	ldrb	r2, [r2, #1]
 800391a:	0212      	lsls	r2, r2, #8
 800391c:	4313      	orrs	r3, r2
 800391e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	4a30      	ldr	r2, [pc, #192]	; (80039e8 <find_volume+0x658>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d140      	bne.n	80039ac <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8003930:	061a      	lsls	r2, r3, #24
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	4313      	orrs	r3, r2
 800393c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800393e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8003942:	0212      	lsls	r2, r2, #8
 8003944:	4313      	orrs	r3, r2
 8003946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003948:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800394c:	4313      	orrs	r3, r2
 800394e:	4a27      	ldr	r2, [pc, #156]	; (80039ec <find_volume+0x65c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d12b      	bne.n	80039ac <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800395a:	061a      	lsls	r2, r3, #24
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8003962:	041b      	lsls	r3, r3, #16
 8003964:	4313      	orrs	r3, r2
 8003966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003968:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800396c:	0212      	lsls	r2, r2, #8
 800396e:	4313      	orrs	r3, r2
 8003970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003972:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8003976:	4313      	orrs	r3, r2
 8003978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800397a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800397e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8003980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003982:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8003986:	061a      	lsls	r2, r3, #24
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	4313      	orrs	r3, r2
 8003992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003994:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8003998:	0212      	lsls	r2, r2, #8
 800399a:	4313      	orrs	r3, r2
 800399c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800399e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80039a2:	4313      	orrs	r3, r2
 80039a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039aa:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b2:	461a      	mov	r2, r3
 80039b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039b8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <find_volume+0x660>)
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <find_volume+0x660>)
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <find_volume+0x660>)
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80039d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039d4:	f7fd fe92 	bl	80016fc <clear_lock>
#endif

	return FR_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3758      	adds	r7, #88	; 0x58
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	ffffaa55 	.word	0xffffaa55
 80039e8:	41615252 	.word	0x41615252
 80039ec:	61417272 	.word	0x61417272
 80039f0:	20000150 	.word	0x20000150

080039f4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d02a      	beq.n	8003a5c <validate+0x68>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d024      	beq.n	8003a5c <validate+0x68>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <validate+0x68>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a30:	88da      	ldrh	r2, [r3, #6]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a38:	889b      	ldrh	r3, [r3, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10e      	bne.n	8003a5c <validate+0x68>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc febb 	bl	80007c8 <disk_status>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8003a5c:	2309      	movs	r3, #9
 8003a5e:	e000      	b.n	8003a62 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8003a7e:	f107 0310 	add.w	r3, r7, #16
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fbd2 	bl	800322c <get_ldnumber>
 8003a88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da01      	bge.n	8003a94 <f_mount+0x28>
 8003a90:	230b      	movs	r3, #11
 8003a92:	e02f      	b.n	8003af4 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003a94:	4a19      	ldr	r2, [pc, #100]	; (8003afc <f_mount+0x90>)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8003aa4:	69b8      	ldr	r0, [r7, #24]
 8003aa6:	f7fd fe29 	bl	80016fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	490d      	ldr	r1, [pc, #52]	; (8003afc <f_mount+0x90>)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <f_mount+0x6e>
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <f_mount+0x72>
 8003ada:	2300      	movs	r3, #0
 8003adc:	e00a      	b.n	8003af4 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8003ade:	f107 0108 	add.w	r1, r7, #8
 8003ae2:	f107 030c 	add.w	r3, r7, #12
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fc51 	bl	8003390 <find_volume>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	2000014c 	.word	0x2000014c

08003b00 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b0e:	f843 0c4c 	str.w	r0, [r3, #-76]
 8003b12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b16:	f843 1c50 	str.w	r1, [r3, #-80]
 8003b1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b1e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8003b22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b26:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <f_open+0x32>
 8003b2e:	2309      	movs	r3, #9
 8003b30:	e2f7      	b.n	8004122 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8003b32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b36:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2300      	movs	r3, #0
 8003b42:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8003b44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b4e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8003b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b5e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	f107 0118 	add.w	r1, r7, #24
 8003b6c:	3910      	subs	r1, #16
 8003b6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b72:	3b18      	subs	r3, #24
 8003b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fc09 	bl	8003390 <find_volume>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003b84:	f102 0217 	add.w	r2, r2, #23
 8003b88:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8003b8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003b8e:	f103 0317 	add.w	r3, r3, #23
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 82bf 	bne.w	8004118 <f_open+0x618>
		INIT_BUF(dj);
 8003b9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f107 0318 	add.w	r3, r7, #24
 8003ba4:	3b04      	subs	r3, #4
 8003ba6:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8003baa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4bd4      	ldr	r3, [pc, #848]	; (8003f04 <f_open+0x404>)
 8003bb2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8003bb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bba:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8003bbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003bc2:	3b18      	subs	r3, #24
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff faba 	bl	8003140 <follow_path>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003bd2:	f102 0217 	add.w	r2, r2, #23
 8003bd6:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8003bd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bdc:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8003be0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003be4:	f102 0210 	add.w	r2, r2, #16
 8003be8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003bea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003bee:	f103 0317 	add.w	r3, r3, #23
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d126      	bne.n	8003c46 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8003bf8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003bfc:	f103 0310 	add.w	r3, r3, #16
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <f_open+0x114>
				res = FR_INVALID_NAME;
 8003c06:	2306      	movs	r3, #6
 8003c08:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003c0c:	f102 0217 	add.w	r2, r2, #23
 8003c10:	7013      	strb	r3, [r2, #0]
 8003c12:	e018      	b.n	8003c46 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003c14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c18:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c30:	3b18      	subs	r3, #24
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fd fbcd 	bl	80013d4 <chk_lock>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003c40:	f102 0217 	add.w	r2, r2, #23
 8003c44:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003c46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c4a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003c4e:	f003 031c 	and.w	r3, r3, #28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 813c 	beq.w	8003ed0 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8003c58:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003c5c:	f103 0317 	add.w	r3, r3, #23
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d02e      	beq.n	8003cc4 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8003c66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003c6a:	f103 0317 	add.w	r3, r3, #23
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d112      	bne.n	8003c9a <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003c74:	f7fd fc1e 	bl	80014b4 <enq_lock>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <f_open+0x18e>
 8003c7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c82:	3b18      	subs	r3, #24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe ff79 	bl	8002b7c <dir_register>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	e000      	b.n	8003c90 <f_open+0x190>
 8003c8e:	2312      	movs	r3, #18
 8003c90:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003c94:	f102 0217 	add.w	r2, r2, #23
 8003c98:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003c9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ca4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003ca8:	f043 0308 	orr.w	r3, r3, #8
 8003cac:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8003cb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cb4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8003cb8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003cbc:	f102 0210 	add.w	r2, r2, #16
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e01f      	b.n	8003d04 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003cc4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003cc8:	f103 0310 	add.w	r3, r3, #16
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330b      	adds	r3, #11
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	f003 0311 	and.w	r3, r3, #17
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d006      	beq.n	8003ce8 <f_open+0x1e8>
					res = FR_DENIED;
 8003cda:	2307      	movs	r3, #7
 8003cdc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003ce0:	f102 0217 	add.w	r2, r2, #23
 8003ce4:	7013      	strb	r3, [r2, #0]
 8003ce6:	e00d      	b.n	8003d04 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8003ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <f_open+0x204>
						res = FR_EXIST;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003cfe:	f102 0217 	add.w	r2, r2, #23
 8003d02:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003d04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d08:	f103 0317 	add.w	r3, r3, #23
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 8113 	bne.w	8003f3a <f_open+0x43a>
 8003d14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d18:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 810a 	beq.w	8003f3a <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8003d26:	f7fc fdff 	bl	8000928 <get_fattime>
 8003d2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d2e:	f103 030c 	add.w	r3, r3, #12
 8003d32:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8003d34:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d38:	f103 0310 	add.w	r3, r3, #16
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330e      	adds	r3, #14
 8003d40:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003d44:	f102 020c 	add.w	r2, r2, #12
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d52:	f103 030c 	add.w	r3, r3, #12
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d62:	f103 0310 	add.w	r3, r3, #16
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330f      	adds	r3, #15
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d72:	f103 030c 	add.w	r3, r3, #12
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0c1a      	lsrs	r2, r3, #16
 8003d7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d7e:	f103 0310 	add.w	r3, r3, #16
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3310      	adds	r3, #16
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d8e:	f103 030c 	add.w	r3, r3, #12
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0e1a      	lsrs	r2, r3, #24
 8003d96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d9a:	f103 0310 	add.w	r3, r3, #16
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3311      	adds	r3, #17
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8003da6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003daa:	f103 0310 	add.w	r3, r3, #16
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330b      	adds	r3, #11
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8003db6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003dba:	f103 0310 	add.w	r3, r3, #16
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	331c      	adds	r3, #28
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003dca:	f103 0310 	add.w	r3, r3, #16
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	331d      	adds	r3, #29
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003dda:	f103 0310 	add.w	r3, r3, #16
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	331e      	adds	r3, #30
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003dea:	f103 0310 	add.w	r3, r3, #16
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	331f      	adds	r3, #31
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003df6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dfa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8003dfe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003e02:	f102 0210 	add.w	r2, r2, #16
 8003e06:	6811      	ldr	r1, [r2, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe fc06 	bl	800261a <ld_clust>
 8003e0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003e12:	f103 0308 	add.w	r3, r3, #8
 8003e16:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003e1e:	f103 0310 	add.w	r3, r3, #16
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	f7fe fc27 	bl	8002676 <st_clust>
				dj.fs->wflag = 1;
 8003e28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e2c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8003e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e34:	2201      	movs	r2, #1
 8003e36:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8003e38:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003e3c:	f103 0308 	add.w	r3, r3, #8
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d079      	beq.n	8003f3a <f_open+0x43a>
					dw = dj.fs->winsect;
 8003e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e4a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8003e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003e58:	f102 020c 	add.w	r2, r2, #12
 8003e5c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8003e5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e62:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8003e66:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003e6a:	f102 0208 	add.w	r2, r2, #8
 8003e6e:	6811      	ldr	r1, [r2, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe f823 	bl	8001ebc <remove_chain>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003e7c:	f102 0217 	add.w	r2, r2, #23
 8003e80:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8003e82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003e86:	f103 0317 	add.w	r3, r3, #23
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d154      	bne.n	8003f3a <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8003e90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e94:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8003e98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003e9c:	f103 0308 	add.w	r3, r3, #8
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ea8:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8003eaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003eae:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8003eb2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003eb6:	f102 020c 	add.w	r2, r2, #12
 8003eba:	6811      	ldr	r1, [r2, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd fc99 	bl	80017f4 <move_window>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003ec8:	f102 0217 	add.w	r2, r2, #23
 8003ecc:	7013      	strb	r3, [r2, #0]
 8003ece:	e034      	b.n	8003f3a <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8003ed0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003ed4:	f103 0317 	add.w	r3, r3, #23
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d12d      	bne.n	8003f3a <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8003ede:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003ee2:	f103 0310 	add.w	r3, r3, #16
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330b      	adds	r3, #11
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <f_open+0x408>
					res = FR_NO_FILE;
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003efa:	f102 0217 	add.w	r2, r2, #23
 8003efe:	7013      	strb	r3, [r2, #0]
 8003f00:	e01b      	b.n	8003f3a <f_open+0x43a>
 8003f02:	bf00      	nop
 8003f04:	2000016c 	.word	0x2000016c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8003f08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f0c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <f_open+0x43a>
 8003f18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003f1c:	f103 0310 	add.w	r3, r3, #16
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	330b      	adds	r3, #11
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <f_open+0x43a>
						res = FR_DENIED;
 8003f2e:	2307      	movs	r3, #7
 8003f30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003f34:	f102 0217 	add.w	r2, r2, #23
 8003f38:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8003f3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003f3e:	f103 0317 	add.w	r3, r3, #23
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d157      	bne.n	8003ff8 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003f48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f4c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <f_open+0x46e>
				mode |= FA__WRITTEN;
 8003f58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f62:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003f66:	f043 0320 	orr.w	r3, r3, #32
 8003f6a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8003f6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f72:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8003f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003f80:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003f84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f88:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8003f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f8e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f96:	461a      	mov	r2, r3
 8003f98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003f9c:	f103 0310 	add.w	r3, r3, #16
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003fa4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fa8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fc0:	3b18      	subs	r3, #24
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fd fa99 	bl	80014fc <inc_lock>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fd0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd8:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8003fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fde:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <f_open+0x4f8>
 8003fec:	2302      	movs	r3, #2
 8003fee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003ff2:	f102 0217 	add.w	r2, r2, #23
 8003ff6:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8003ff8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003ffc:	f103 0317 	add.w	r3, r3, #23
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 8088 	bne.w	8004118 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8004008:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800400c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8004010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004014:	461a      	mov	r2, r3
 8004016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800401a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800401e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8004020:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004024:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8004028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402c:	2200      	movs	r2, #0
 800402e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004030:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004034:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8004038:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800403c:	f102 0210 	add.w	r2, r2, #16
 8004040:	6811      	ldr	r1, [r2, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fae9 	bl	800261a <ld_clust>
 8004048:	4602      	mov	r2, r0
 800404a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800404e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8004058:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800405c:	f103 0310 	add.w	r3, r3, #16
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	331f      	adds	r3, #31
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	061a      	lsls	r2, r3, #24
 8004068:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800406c:	f103 0310 	add.w	r3, r3, #16
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	331e      	adds	r3, #30
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	4313      	orrs	r3, r2
 800407a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800407e:	f102 0210 	add.w	r2, r2, #16
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	321d      	adds	r2, #29
 8004086:	7812      	ldrb	r2, [r2, #0]
 8004088:	0212      	lsls	r2, r2, #8
 800408a:	4313      	orrs	r3, r2
 800408c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004090:	f102 0210 	add.w	r2, r2, #16
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	321c      	adds	r2, #28
 8004098:	7812      	ldrb	r2, [r2, #0]
 800409a:	4313      	orrs	r3, r2
 800409c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80040a0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80040a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040a8:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80040aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040ae:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80040b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b6:	461a      	mov	r2, r3
 80040b8:	2300      	movs	r3, #0
 80040ba:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80040bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040c0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80040c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80040ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040d2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80040d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80040e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040e4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80040e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80040ec:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80040f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040f4:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80040f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040fa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80040fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004108:	88da      	ldrh	r2, [r3, #6]
 800410a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800410e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8004112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004116:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8004118:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800411c:	f103 0317 	add.w	r3, r3, #23
 8004120:	781b      	ldrb	r3, [r3, #0]
}
 8004122:	4618      	mov	r0, r3
 8004124:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop

08004130 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08c      	sub	sp, #48	; 0x30
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff fc53 	bl	80039f4 <validate>
 800414e:	4603      	mov	r3, r0
 8004150:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004152:	7ffb      	ldrb	r3, [r7, #31]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <f_read+0x2c>
 8004158:	7ffb      	ldrb	r3, [r7, #31]
 800415a:	e1cd      	b.n	80044f8 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004162:	79db      	ldrb	r3, [r3, #7]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416e:	79db      	ldrb	r3, [r3, #7]
 8004170:	e1c2      	b.n	80044f8 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004178:	799b      	ldrb	r3, [r3, #6]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8004182:	2307      	movs	r3, #7
 8004184:	e1b8      	b.n	80044f8 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	429a      	cmp	r2, r3
 80041a0:	f240 81a5 	bls.w	80044ee <f_read+0x3be>
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80041a8:	e1a1      	b.n	80044ee <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041be:	8952      	ldrh	r2, [r2, #10]
 80041c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80041c4:	fb01 f202 	mul.w	r2, r1, r2
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 8140 	bne.w	8004450 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041e4:	8952      	ldrh	r2, [r2, #10]
 80041e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f8:	789b      	ldrb	r3, [r3, #2]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	4013      	ands	r3, r2
 8004200:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d143      	bne.n	8004290 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d105      	bne.n	8004220 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421e:	e01c      	b.n	800425a <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4619      	mov	r1, r3
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7fd ff49 	bl	80020ce <clmt_clust>
 800423c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800423e:	e00c      	b.n	800425a <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f7fd fbe3 	bl	8001a1e <get_fat>
 8004258:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d806      	bhi.n	800426e <f_read+0x13e>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004266:	2202      	movs	r2, #2
 8004268:	71da      	strb	r2, [r3, #7]
 800426a:	2302      	movs	r3, #2
 800426c:	e144      	b.n	80044f8 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004274:	d106      	bne.n	8004284 <f_read+0x154>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800427c:	2201      	movs	r2, #1
 800427e:	71da      	strb	r2, [r3, #7]
 8004280:	2301      	movs	r3, #1
 8004282:	e139      	b.n	80044f8 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	461a      	mov	r2, r3
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f7fd fb97 	bl	80019d6 <clust2sect>
 80042a8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <f_read+0x18e>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b6:	2202      	movs	r2, #2
 80042b8:	71da      	strb	r2, [r3, #7]
 80042ba:	2302      	movs	r3, #2
 80042bc:	e11c      	b.n	80044f8 <f_read+0x3c8>
			sect += csect;
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d2:	895b      	ldrh	r3, [r3, #10]
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d066      	beq.n	80043b2 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80042e4:	7dfa      	ldrb	r2, [r7, #23]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	4413      	add	r3, r2
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042f6:	7892      	ldrb	r2, [r2, #2]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d90a      	bls.n	8004312 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	789b      	ldrb	r3, [r3, #2]
 800430a:	461a      	mov	r2, r3
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431e:	7858      	ldrb	r0, [r3, #1]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	6a39      	ldr	r1, [r7, #32]
 8004326:	f7fc fa8f 	bl	8000848 <disk_read>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d006      	beq.n	800433e <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004336:	2201      	movs	r2, #1
 8004338:	71da      	strb	r2, [r3, #7]
 800433a:	2301      	movs	r3, #1
 800433c:	e0dc      	b.n	80044f8 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	799b      	ldrb	r3, [r3, #6]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d024      	beq.n	8004398 <f_read+0x268>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	429a      	cmp	r2, r3
 800435e:	d91b      	bls.n	8004398 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004378:	8952      	ldrh	r2, [r2, #10]
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	18d0      	adds	r0, r2, r3
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004390:	895b      	ldrh	r3, [r3, #10]
 8004392:	461a      	mov	r2, r3
 8004394:	f7fc ffa6 	bl	80012e4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a4:	895b      	ldrh	r3, [r3, #10]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80043b0:	e085      	b.n	80044be <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d041      	beq.n	8004444 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	799b      	ldrb	r3, [r3, #6]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d023      	beq.n	8004418 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043dc:	7858      	ldrb	r0, [r3, #1]
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	2301      	movs	r3, #1
 80043ea:	f7fc fa4d 	bl	8000888 <disk_write>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d006      	beq.n	8004402 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	2201      	movs	r2, #1
 80043fc:	71da      	strb	r2, [r3, #7]
 80043fe:	2301      	movs	r3, #1
 8004400:	e07a      	b.n	80044f8 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004408:	799b      	ldrb	r3, [r3, #6]
 800440a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004416:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004424:	7858      	ldrb	r0, [r3, #1]
 8004426:	68f9      	ldr	r1, [r7, #12]
 8004428:	2301      	movs	r3, #1
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	f7fc fa0c 	bl	8000848 <disk_read>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443c:	2201      	movs	r2, #1
 800443e:	71da      	strb	r2, [r3, #7]
 8004440:	2301      	movs	r3, #1
 8004442:	e059      	b.n	80044f8 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444a:	461a      	mov	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445c:	895b      	ldrh	r3, [r3, #10]
 800445e:	4618      	mov	r0, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004474:	8952      	ldrh	r2, [r2, #10]
 8004476:	fbb3 f1f2 	udiv	r1, r3, r2
 800447a:	fb01 f202 	mul.w	r2, r1, r2
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	1ac3      	subs	r3, r0, r3
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8004484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d901      	bls.n	8004490 <f_read+0x360>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044a4:	8952      	ldrh	r2, [r2, #10]
 80044a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80044aa:	fb01 f202 	mul.w	r2, r1, r2
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b6:	4619      	mov	r1, r3
 80044b8:	6a38      	ldr	r0, [r7, #32]
 80044ba:	f7fc ff13 	bl	80012e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	4413      	add	r3, r2
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	4413      	add	r3, r2
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044d8:	6093      	str	r3, [r2, #8]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	441a      	add	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f47f ae5a 	bne.w	80041aa <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3730      	adds	r7, #48	; 0x30
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fa73 	bl	80039f4 <validate>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f040 80bc 	bne.w	8004692 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004520:	799b      	ldrb	r3, [r3, #6]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80b3 	beq.w	8004692 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	799b      	ldrb	r3, [r3, #6]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01e      	beq.n	800457a <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004548:	7858      	ldrb	r0, [r3, #1]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	2301      	movs	r3, #1
 8004556:	f7fc f997 	bl	8000888 <disk_write>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8004560:	2301      	movs	r3, #1
 8004562:	e097      	b.n	8004694 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	799b      	ldrb	r3, [r3, #6]
 800456c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004570:	b2da      	uxtb	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004578:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7fd f931 	bl	80017f4 <move_window>
 8004592:	4603      	mov	r3, r0
 8004594:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d17a      	bne.n	8004692 <f_sync+0x192>
				dir = fp->dir_ptr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	330b      	adds	r3, #11
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	330b      	adds	r3, #11
 80045b0:	f042 0220 	orr.w	r2, r2, #32
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	331c      	adds	r3, #28
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	331d      	adds	r3, #29
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	0c1a      	lsrs	r2, r3, #16
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	331e      	adds	r3, #30
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	0e1a      	lsrs	r2, r3, #24
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	331f      	adds	r3, #31
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	4619      	mov	r1, r3
 800460c:	6938      	ldr	r0, [r7, #16]
 800460e:	f7fe f832 	bl	8002676 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8004612:	f7fc f989 	bl	8000928 <get_fattime>
 8004616:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	3316      	adds	r3, #22
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	b29b      	uxth	r3, r3
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	b29a      	uxth	r2, r3
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	3317      	adds	r3, #23
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	0c1a      	lsrs	r2, r3, #16
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3318      	adds	r3, #24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	0e1a      	lsrs	r2, r3, #24
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3319      	adds	r3, #25
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3312      	adds	r3, #18
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	3313      	adds	r3, #19
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004660:	799b      	ldrb	r3, [r3, #6]
 8004662:	f023 0320 	bic.w	r3, r3, #32
 8004666:	b2da      	uxtb	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467c:	2201      	movs	r2, #1
 800467e:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7fd f8e5 	bl	8001858 <sync_fs>
 800468e:	4603      	mov	r3, r0
 8004690:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8004692:	7dfb      	ldrb	r3, [r7, #23]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff2b 	bl	8004500 <f_sync>
 80046aa:	4603      	mov	r3, r0
 80046ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d119      	bne.n	80046e8 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff f99d 	bl	80039f4 <validate>
 80046ba:	4603      	mov	r3, r0
 80046bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d111      	bne.n	80046e8 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fc ffd1 	bl	8001674 <dec_lock>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e2:	461a      	mov	r2, r3
 80046e4:	2300      	movs	r3, #0
 80046e6:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b090      	sub	sp, #64	; 0x40
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff f979 	bl	80039f4 <validate>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004708:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <f_lseek+0x24>
 8004710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004714:	e2da      	b.n	8004ccc <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471c:	79db      	ldrb	r3, [r3, #7]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004728:	79db      	ldrb	r3, [r3, #7]
 800472a:	e2cf      	b.n	8004ccc <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8124 	beq.w	8004982 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004740:	d16c      	bne.n	800481c <f_lseek+0x12a>
			tbl = fp->cltbl;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	627a      	str	r2, [r7, #36]	; 0x24
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	2302      	movs	r3, #2
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	2b00      	cmp	r3, #0
 8004768:	d046      	beq.n	80047f8 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	3302      	adds	r3, #2
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	3301      	adds	r3, #1
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800478c:	4618      	mov	r0, r3
 800478e:	f7fd f946 	bl	8001a1e <get_fat>
 8004792:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	2b01      	cmp	r3, #1
 8004798:	d806      	bhi.n	80047a8 <f_lseek+0xb6>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a0:	2202      	movs	r2, #2
 80047a2:	71da      	strb	r2, [r3, #7]
 80047a4:	2302      	movs	r3, #2
 80047a6:	e291      	b.n	8004ccc <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ae:	d106      	bne.n	80047be <f_lseek+0xcc>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b6:	2201      	movs	r2, #1
 80047b8:	71da      	strb	r2, [r3, #7]
 80047ba:	2301      	movs	r3, #1
 80047bc:	e286      	b.n	8004ccc <f_lseek+0x5da>
					} while (cl == pcl + 1);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3301      	adds	r3, #1
 80047c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d0d7      	beq.n	8004778 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80047c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d809      	bhi.n	80047e4 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	627a      	str	r2, [r7, #36]	; 0x24
 80047d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	1d1a      	adds	r2, r3, #4
 80047de:	627a      	str	r2, [r7, #36]	; 0x24
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d3b8      	bcc.n	800476a <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004802:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8004804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	429a      	cmp	r2, r3
 800480a:	d803      	bhi.n	8004814 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e259      	b.n	8004cc8 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8004814:	2311      	movs	r3, #17
 8004816:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800481a:	e255      	b.n	8004cc8 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d904      	bls.n	8004834 <f_lseek+0x142>
				ofs = fp->fsize;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483a:	461a      	mov	r2, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8240 	beq.w	8004cc8 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	3b01      	subs	r3, #1
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fc3d 	bl	80020ce <clmt_clust>
 8004854:	4602      	mov	r2, r0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485c:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f7fd f8b0 	bl	80019d6 <clust2sect>
 8004876:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <f_lseek+0x19a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004884:	2202      	movs	r2, #2
 8004886:	71da      	strb	r2, [r3, #7]
 8004888:	2302      	movs	r3, #2
 800488a:	e21f      	b.n	8004ccc <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800489c:	8952      	ldrh	r2, [r2, #10]
 800489e:	fbb3 f3f2 	udiv	r3, r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048ae:	7892      	ldrb	r2, [r2, #2]
 80048b0:	3a01      	subs	r2, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4413      	add	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048ce:	8952      	ldrh	r2, [r2, #10]
 80048d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80048d4:	fb01 f202 	mul.w	r2, r1, r2
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 81f4 	beq.w	8004cc8 <f_lseek+0x5d6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	f000 81ec 	beq.w	8004cc8 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f6:	799b      	ldrb	r3, [r3, #6]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d023      	beq.n	8004948 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490c:	7858      	ldrb	r0, [r3, #1]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	2301      	movs	r3, #1
 800491a:	f7fb ffb5 	bl	8000888 <disk_write>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d006      	beq.n	8004932 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492a:	2201      	movs	r2, #1
 800492c:	71da      	strb	r2, [r3, #7]
 800492e:	2301      	movs	r3, #1
 8004930:	e1cc      	b.n	8004ccc <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004938:	799b      	ldrb	r3, [r3, #6]
 800493a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493e:	b2da      	uxtb	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004946:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004954:	7858      	ldrb	r0, [r3, #1]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	2301      	movs	r3, #1
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	f7fb ff74 	bl	8000848 <disk_read>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496c:	2201      	movs	r2, #1
 800496e:	71da      	strb	r2, [r3, #7]
 8004970:	2301      	movs	r3, #1
 8004972:	e1ab      	b.n	8004ccc <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497a:	461a      	mov	r2, r3
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	6193      	str	r3, [r2, #24]
 8004980:	e1a2      	b.n	8004cc8 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d90c      	bls.n	80049aa <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004996:	799b      	ldrb	r3, [r3, #6]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d104      	bne.n	80049aa <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049be:	461a      	mov	r2, r3
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	6093      	str	r3, [r2, #8]
		if (ofs) {
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8100 	beq.w	8004bcc <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d8:	789b      	ldrb	r3, [r3, #2]
 80049da:	461a      	mov	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e8:	895b      	ldrh	r3, [r3, #10]
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d021      	beq.n	8004a3a <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	1e5a      	subs	r2, r3, #1
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	1e59      	subs	r1, r3, #1
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d315      	bcc.n	8004a3a <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	1e5a      	subs	r2, r3, #1
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	425b      	negs	r3, r3
 8004a16:	4013      	ands	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a1e:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a38:	e031      	b.n	8004a9e <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d123      	bne.n	8004a92 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd fa92 	bl	8001f7e <create_chain>
 8004a5a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d106      	bne.n	8004a70 <f_lseek+0x37e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a68:	2202      	movs	r2, #2
 8004a6a:	71da      	strb	r2, [r3, #7]
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e12d      	b.n	8004ccc <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a76:	d106      	bne.n	8004a86 <f_lseek+0x394>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7e:	2201      	movs	r2, #1
 8004a80:	71da      	strb	r2, [r3, #7]
 8004a82:	2301      	movs	r3, #1
 8004a84:	e122      	b.n	8004ccc <f_lseek+0x5da>
					fp->sclust = clst;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8093 	beq.w	8004bcc <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8004aa6:	e052      	b.n	8004b4e <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aae:	799b      	ldrb	r3, [r3, #6]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fd fa5b 	bl	8001f7e <create_chain>
 8004ac8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <f_lseek+0x3f6>
							ofs = bcs; break;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	e03f      	b.n	8004b56 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fc ff9c 	bl	8001a1e <get_fat>
 8004ae6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aee:	d106      	bne.n	8004afe <f_lseek+0x40c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af6:	2201      	movs	r2, #1
 8004af8:	71da      	strb	r2, [r3, #7]
 8004afa:	2301      	movs	r3, #1
 8004afc:	e0e6      	b.n	8004ccc <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d909      	bls.n	8004b18 <f_lseek+0x426>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d306      	bcc.n	8004b26 <f_lseek+0x434>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1e:	2202      	movs	r2, #2
 8004b20:	71da      	strb	r2, [r3, #7]
 8004b22:	2302      	movs	r3, #2
 8004b24:	e0d2      	b.n	8004ccc <f_lseek+0x5da>
					fp->clust = clst;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b44:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d8a8      	bhi.n	8004aa8 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	4413      	add	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b68:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b76:	895b      	ldrh	r3, [r3, #10]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b80:	fb01 f202 	mul.w	r2, r1, r2
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d020      	beq.n	8004bcc <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fc ff1e 	bl	80019d6 <clust2sect>
 8004b9a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <f_lseek+0x4be>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba8:	2202      	movs	r2, #2
 8004baa:	71da      	strb	r2, [r3, #7]
 8004bac:	2302      	movs	r3, #2
 8004bae:	e08d      	b.n	8004ccc <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bbc:	895b      	ldrh	r3, [r3, #10]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bc8:	4413      	add	r3, r2
 8004bca:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004be0:	8952      	ldrh	r2, [r2, #10]
 8004be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8004be6:	fb01 f202 	mul.w	r2, r1, r2
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d04e      	beq.n	8004c8e <f_lseek+0x59c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d047      	beq.n	8004c8e <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c04:	799b      	ldrb	r3, [r3, #6]
 8004c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d023      	beq.n	8004c56 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1a:	7858      	ldrb	r0, [r3, #1]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	2301      	movs	r3, #1
 8004c28:	f7fb fe2e 	bl	8000888 <disk_write>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c38:	2201      	movs	r2, #1
 8004c3a:	71da      	strb	r2, [r3, #7]
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e045      	b.n	8004ccc <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c46:	799b      	ldrb	r3, [r3, #6]
 8004c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c54:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c62:	7858      	ldrb	r0, [r3, #1]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	2301      	movs	r3, #1
 8004c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c6a:	f7fb fded 	bl	8000848 <disk_read>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d006      	beq.n	8004c82 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	71da      	strb	r2, [r3, #7]
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e024      	b.n	8004ccc <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8c:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d912      	bls.n	8004cc8 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cb0:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb8:	799b      	ldrb	r3, [r3, #6]
 8004cba:	f043 0320 	orr.w	r3, r3, #32
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc6:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8004cc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3740      	adds	r7, #64	; 0x40
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004cea:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <FATFS_LinkDriverEx+0x90>)
 8004cec:	7a5b      	ldrb	r3, [r3, #9]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d831      	bhi.n	8004d58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <FATFS_LinkDriverEx+0x90>)
 8004cf6:	7a5b      	ldrb	r3, [r3, #9]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <FATFS_LinkDriverEx+0x90>)
 8004cfe:	2100      	movs	r1, #0
 8004d00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8004d02:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <FATFS_LinkDriverEx+0x90>)
 8004d04:	7a5b      	ldrb	r3, [r3, #9]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	4a16      	ldr	r2, [pc, #88]	; (8004d64 <FATFS_LinkDriverEx+0x90>)
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <FATFS_LinkDriverEx+0x90>)
 8004d14:	7a5b      	ldrb	r3, [r3, #9]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <FATFS_LinkDriverEx+0x90>)
 8004d1c:	4413      	add	r3, r2
 8004d1e:	79fa      	ldrb	r2, [r7, #7]
 8004d20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <FATFS_LinkDriverEx+0x90>)
 8004d24:	7a5b      	ldrb	r3, [r3, #9]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	b2d1      	uxtb	r1, r2
 8004d2c:	4a0d      	ldr	r2, [pc, #52]	; (8004d64 <FATFS_LinkDriverEx+0x90>)
 8004d2e:	7251      	strb	r1, [r2, #9]
 8004d30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004d32:	7dbb      	ldrb	r3, [r7, #22]
 8004d34:	3330      	adds	r3, #48	; 0x30
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	223a      	movs	r2, #58	; 0x3a
 8004d42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	3302      	adds	r3, #2
 8004d48:	222f      	movs	r2, #47	; 0x2f
 8004d4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	3303      	adds	r3, #3
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	2000036c 	.word	0x2000036c

08004d68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004d72:	2200      	movs	r2, #0
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ffac 	bl	8004cd4 <FATFS_LinkDriverEx>
 8004d7c:	4603      	mov	r3, r0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    /*Stat = STA_NOINIT;
    return Stat;*/

	return SD_disk_initialize(pdrv);
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fb ff88 	bl	8000ca8 <SD_disk_initialize>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    /*Stat = STA_NOINIT;
    return Stat;*/
	return SD_disk_status(pdrv);
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fc f863 	bl	8000e7c <SD_disk_status>
 8004db6:	4603      	mov	r3, r0
 8004db8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	4603      	mov	r3, r0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8004dd2:	7bf8      	ldrb	r0, [r7, #15]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	f7fc f863 	bl	8000ea4 <SD_disk_read>
 8004dde:	4603      	mov	r3, r0
 8004de0:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	4603      	mov	r3, r0
 8004df8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  //  return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 8004dfa:	7bf8      	ldrb	r0, [r7, #15]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	f7fc f8b9 	bl	8000f78 <SD_disk_write>
 8004e06:	4603      	mov	r3, r0
 8004e08:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	603a      	str	r2, [r7, #0]
 8004e1c:	71fb      	strb	r3, [r7, #7]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   /* DRESULT res = RES_ERROR;
    return res;*/
	return SD_disk_ioctl (pdrv, cmd, buff);
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	79b9      	ldrb	r1, [r7, #6]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fc f929 	bl	8001080 <SD_disk_ioctl>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <HAL_Init+0x28>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <HAL_Init+0x28>)
 8004e46:	f043 0310 	orr.w	r3, r3, #16
 8004e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e4c:	2003      	movs	r0, #3
 8004e4e:	f000 f92b 	bl	80050a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e52:	200f      	movs	r0, #15
 8004e54:	f000 f808 	bl	8004e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e58:	f7fb faa0 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40022000 	.word	0x40022000

08004e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e70:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_InitTick+0x54>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <HAL_InitTick+0x58>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f935 	bl	80050f6 <HAL_SYSTICK_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e00e      	b.n	8004eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b0f      	cmp	r3, #15
 8004e9a:	d80a      	bhi.n	8004eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ea4:	f000 f90b 	bl	80050be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ea8:	4a06      	ldr	r2, [pc, #24]	; (8004ec4 <HAL_InitTick+0x5c>)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	20000020 	.word	0x20000020
 8004ec4:	2000001c 	.word	0x2000001c

08004ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_IncTick+0x1c>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <HAL_IncTick+0x20>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	4a03      	ldr	r2, [pc, #12]	; (8004ee8 <HAL_IncTick+0x20>)
 8004eda:	6013      	str	r3, [r2, #0]
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	20000020 	.word	0x20000020
 8004ee8:	20000378 	.word	0x20000378

08004eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return uwTick;
 8004ef0:	4b02      	ldr	r3, [pc, #8]	; (8004efc <HAL_GetTick+0x10>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	20000378 	.word	0x20000378

08004f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f08:	f7ff fff0 	bl	8004eec <HAL_GetTick>
 8004f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f18:	d005      	beq.n	8004f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <HAL_Delay+0x44>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f26:	bf00      	nop
 8004f28:	f7ff ffe0 	bl	8004eec <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d8f7      	bhi.n	8004f28 <HAL_Delay+0x28>
  {
  }
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000020 	.word	0x20000020

08004f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f58:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <__NVIC_SetPriorityGrouping+0x44>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f64:	4013      	ands	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f7a:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <__NVIC_SetPriorityGrouping+0x44>)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	60d3      	str	r3, [r2, #12]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	e000ed00 	.word	0xe000ed00

08004f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	f003 0307 	and.w	r3, r3, #7
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	6039      	str	r1, [r7, #0]
 8004fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	db0a      	blt.n	8004fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	490c      	ldr	r1, [pc, #48]	; (8004ff8 <__NVIC_SetPriority+0x4c>)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	0112      	lsls	r2, r2, #4
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	440b      	add	r3, r1
 8004fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fd4:	e00a      	b.n	8004fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	4908      	ldr	r1, [pc, #32]	; (8004ffc <__NVIC_SetPriority+0x50>)
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	3b04      	subs	r3, #4
 8004fe4:	0112      	lsls	r2, r2, #4
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	440b      	add	r3, r1
 8004fea:	761a      	strb	r2, [r3, #24]
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	e000e100 	.word	0xe000e100
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005000:	b480      	push	{r7}
 8005002:	b089      	sub	sp, #36	; 0x24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f1c3 0307 	rsb	r3, r3, #7
 800501a:	2b04      	cmp	r3, #4
 800501c:	bf28      	it	cs
 800501e:	2304      	movcs	r3, #4
 8005020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3304      	adds	r3, #4
 8005026:	2b06      	cmp	r3, #6
 8005028:	d902      	bls.n	8005030 <NVIC_EncodePriority+0x30>
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3b03      	subs	r3, #3
 800502e:	e000      	b.n	8005032 <NVIC_EncodePriority+0x32>
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	43da      	mvns	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	401a      	ands	r2, r3
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	fa01 f303 	lsl.w	r3, r1, r3
 8005052:	43d9      	mvns	r1, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005058:	4313      	orrs	r3, r2
         );
}
 800505a:	4618      	mov	r0, r3
 800505c:	3724      	adds	r7, #36	; 0x24
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr

08005064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3b01      	subs	r3, #1
 8005070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005074:	d301      	bcc.n	800507a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005076:	2301      	movs	r3, #1
 8005078:	e00f      	b.n	800509a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800507a:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <SysTick_Config+0x40>)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3b01      	subs	r3, #1
 8005080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005082:	210f      	movs	r1, #15
 8005084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005088:	f7ff ff90 	bl	8004fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <SysTick_Config+0x40>)
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005092:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <SysTick_Config+0x40>)
 8005094:	2207      	movs	r2, #7
 8005096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	e000e010 	.word	0xe000e010

080050a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff ff49 	bl	8004f48 <__NVIC_SetPriorityGrouping>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050be:	b580      	push	{r7, lr}
 80050c0:	b086      	sub	sp, #24
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	4603      	mov	r3, r0
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050d0:	f7ff ff5e 	bl	8004f90 <__NVIC_GetPriorityGrouping>
 80050d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	6978      	ldr	r0, [r7, #20]
 80050dc:	f7ff ff90 	bl	8005000 <NVIC_EncodePriority>
 80050e0:	4602      	mov	r2, r0
 80050e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff ff5f 	bl	8004fac <__NVIC_SetPriority>
}
 80050ee:	bf00      	nop
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff ffb0 	bl	8005064 <SysTick_Config>
 8005104:	4603      	mov	r3, r0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005110:	b480      	push	{r7}
 8005112:	b08b      	sub	sp, #44	; 0x2c
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800511e:	2300      	movs	r3, #0
 8005120:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005122:	e169      	b.n	80053f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005124:	2201      	movs	r2, #1
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	429a      	cmp	r2, r3
 800513e:	f040 8158 	bne.w	80053f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4a9a      	ldr	r2, [pc, #616]	; (80053b0 <HAL_GPIO_Init+0x2a0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d05e      	beq.n	800520a <HAL_GPIO_Init+0xfa>
 800514c:	4a98      	ldr	r2, [pc, #608]	; (80053b0 <HAL_GPIO_Init+0x2a0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d875      	bhi.n	800523e <HAL_GPIO_Init+0x12e>
 8005152:	4a98      	ldr	r2, [pc, #608]	; (80053b4 <HAL_GPIO_Init+0x2a4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d058      	beq.n	800520a <HAL_GPIO_Init+0xfa>
 8005158:	4a96      	ldr	r2, [pc, #600]	; (80053b4 <HAL_GPIO_Init+0x2a4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d86f      	bhi.n	800523e <HAL_GPIO_Init+0x12e>
 800515e:	4a96      	ldr	r2, [pc, #600]	; (80053b8 <HAL_GPIO_Init+0x2a8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d052      	beq.n	800520a <HAL_GPIO_Init+0xfa>
 8005164:	4a94      	ldr	r2, [pc, #592]	; (80053b8 <HAL_GPIO_Init+0x2a8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d869      	bhi.n	800523e <HAL_GPIO_Init+0x12e>
 800516a:	4a94      	ldr	r2, [pc, #592]	; (80053bc <HAL_GPIO_Init+0x2ac>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d04c      	beq.n	800520a <HAL_GPIO_Init+0xfa>
 8005170:	4a92      	ldr	r2, [pc, #584]	; (80053bc <HAL_GPIO_Init+0x2ac>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d863      	bhi.n	800523e <HAL_GPIO_Init+0x12e>
 8005176:	4a92      	ldr	r2, [pc, #584]	; (80053c0 <HAL_GPIO_Init+0x2b0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d046      	beq.n	800520a <HAL_GPIO_Init+0xfa>
 800517c:	4a90      	ldr	r2, [pc, #576]	; (80053c0 <HAL_GPIO_Init+0x2b0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d85d      	bhi.n	800523e <HAL_GPIO_Init+0x12e>
 8005182:	2b12      	cmp	r3, #18
 8005184:	d82a      	bhi.n	80051dc <HAL_GPIO_Init+0xcc>
 8005186:	2b12      	cmp	r3, #18
 8005188:	d859      	bhi.n	800523e <HAL_GPIO_Init+0x12e>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <HAL_GPIO_Init+0x80>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	0800520b 	.word	0x0800520b
 8005194:	080051e5 	.word	0x080051e5
 8005198:	080051f7 	.word	0x080051f7
 800519c:	08005239 	.word	0x08005239
 80051a0:	0800523f 	.word	0x0800523f
 80051a4:	0800523f 	.word	0x0800523f
 80051a8:	0800523f 	.word	0x0800523f
 80051ac:	0800523f 	.word	0x0800523f
 80051b0:	0800523f 	.word	0x0800523f
 80051b4:	0800523f 	.word	0x0800523f
 80051b8:	0800523f 	.word	0x0800523f
 80051bc:	0800523f 	.word	0x0800523f
 80051c0:	0800523f 	.word	0x0800523f
 80051c4:	0800523f 	.word	0x0800523f
 80051c8:	0800523f 	.word	0x0800523f
 80051cc:	0800523f 	.word	0x0800523f
 80051d0:	0800523f 	.word	0x0800523f
 80051d4:	080051ed 	.word	0x080051ed
 80051d8:	08005201 	.word	0x08005201
 80051dc:	4a79      	ldr	r2, [pc, #484]	; (80053c4 <HAL_GPIO_Init+0x2b4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80051e2:	e02c      	b.n	800523e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	623b      	str	r3, [r7, #32]
          break;
 80051ea:	e029      	b.n	8005240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	3304      	adds	r3, #4
 80051f2:	623b      	str	r3, [r7, #32]
          break;
 80051f4:	e024      	b.n	8005240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	3308      	adds	r3, #8
 80051fc:	623b      	str	r3, [r7, #32]
          break;
 80051fe:	e01f      	b.n	8005240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	330c      	adds	r3, #12
 8005206:	623b      	str	r3, [r7, #32]
          break;
 8005208:	e01a      	b.n	8005240 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d102      	bne.n	8005218 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005212:	2304      	movs	r3, #4
 8005214:	623b      	str	r3, [r7, #32]
          break;
 8005216:	e013      	b.n	8005240 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d105      	bne.n	800522c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005220:	2308      	movs	r3, #8
 8005222:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	611a      	str	r2, [r3, #16]
          break;
 800522a:	e009      	b.n	8005240 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800522c:	2308      	movs	r3, #8
 800522e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	615a      	str	r2, [r3, #20]
          break;
 8005236:	e003      	b.n	8005240 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005238:	2300      	movs	r3, #0
 800523a:	623b      	str	r3, [r7, #32]
          break;
 800523c:	e000      	b.n	8005240 <HAL_GPIO_Init+0x130>
          break;
 800523e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2bff      	cmp	r3, #255	; 0xff
 8005244:	d801      	bhi.n	800524a <HAL_GPIO_Init+0x13a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	e001      	b.n	800524e <HAL_GPIO_Init+0x13e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2bff      	cmp	r3, #255	; 0xff
 8005254:	d802      	bhi.n	800525c <HAL_GPIO_Init+0x14c>
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	e002      	b.n	8005262 <HAL_GPIO_Init+0x152>
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	3b08      	subs	r3, #8
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	210f      	movs	r1, #15
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	6a39      	ldr	r1, [r7, #32]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	fa01 f303 	lsl.w	r3, r1, r3
 800527c:	431a      	orrs	r2, r3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80b1 	beq.w	80053f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005290:	4b4d      	ldr	r3, [pc, #308]	; (80053c8 <HAL_GPIO_Init+0x2b8>)
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	4a4c      	ldr	r2, [pc, #304]	; (80053c8 <HAL_GPIO_Init+0x2b8>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6193      	str	r3, [r2, #24]
 800529c:	4b4a      	ldr	r3, [pc, #296]	; (80053c8 <HAL_GPIO_Init+0x2b8>)
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80052a8:	4a48      	ldr	r2, [pc, #288]	; (80053cc <HAL_GPIO_Init+0x2bc>)
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	3302      	adds	r3, #2
 80052b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	220f      	movs	r2, #15
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	43db      	mvns	r3, r3
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4013      	ands	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a40      	ldr	r2, [pc, #256]	; (80053d0 <HAL_GPIO_Init+0x2c0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_GPIO_Init+0x1ec>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3f      	ldr	r2, [pc, #252]	; (80053d4 <HAL_GPIO_Init+0x2c4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00d      	beq.n	80052f8 <HAL_GPIO_Init+0x1e8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3e      	ldr	r2, [pc, #248]	; (80053d8 <HAL_GPIO_Init+0x2c8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <HAL_GPIO_Init+0x1e4>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3d      	ldr	r2, [pc, #244]	; (80053dc <HAL_GPIO_Init+0x2cc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d101      	bne.n	80052f0 <HAL_GPIO_Init+0x1e0>
 80052ec:	2303      	movs	r3, #3
 80052ee:	e006      	b.n	80052fe <HAL_GPIO_Init+0x1ee>
 80052f0:	2304      	movs	r3, #4
 80052f2:	e004      	b.n	80052fe <HAL_GPIO_Init+0x1ee>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e002      	b.n	80052fe <HAL_GPIO_Init+0x1ee>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_GPIO_Init+0x1ee>
 80052fc:	2300      	movs	r3, #0
 80052fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005300:	f002 0203 	and.w	r2, r2, #3
 8005304:	0092      	lsls	r2, r2, #2
 8005306:	4093      	lsls	r3, r2
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800530e:	492f      	ldr	r1, [pc, #188]	; (80053cc <HAL_GPIO_Init+0x2bc>)
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	089b      	lsrs	r3, r3, #2
 8005314:	3302      	adds	r3, #2
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005328:	4b2d      	ldr	r3, [pc, #180]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	492c      	ldr	r1, [pc, #176]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4313      	orrs	r3, r2
 8005332:	608b      	str	r3, [r1, #8]
 8005334:	e006      	b.n	8005344 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005336:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	43db      	mvns	r3, r3
 800533e:	4928      	ldr	r1, [pc, #160]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 8005340:	4013      	ands	r3, r2
 8005342:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d006      	beq.n	800535e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005350:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	4922      	ldr	r1, [pc, #136]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	4313      	orrs	r3, r2
 800535a:	60cb      	str	r3, [r1, #12]
 800535c:	e006      	b.n	800536c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800535e:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	43db      	mvns	r3, r3
 8005366:	491e      	ldr	r1, [pc, #120]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 8005368:	4013      	ands	r3, r2
 800536a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d006      	beq.n	8005386 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005378:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4918      	ldr	r1, [pc, #96]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	4313      	orrs	r3, r2
 8005382:	604b      	str	r3, [r1, #4]
 8005384:	e006      	b.n	8005394 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005386:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	43db      	mvns	r3, r3
 800538e:	4914      	ldr	r1, [pc, #80]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 8005390:	4013      	ands	r3, r2
 8005392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d021      	beq.n	80053e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80053a0:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	490e      	ldr	r1, [pc, #56]	; (80053e0 <HAL_GPIO_Init+0x2d0>)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]
 80053ac:	e021      	b.n	80053f2 <HAL_GPIO_Init+0x2e2>
 80053ae:	bf00      	nop
 80053b0:	10320000 	.word	0x10320000
 80053b4:	10310000 	.word	0x10310000
 80053b8:	10220000 	.word	0x10220000
 80053bc:	10210000 	.word	0x10210000
 80053c0:	10120000 	.word	0x10120000
 80053c4:	10110000 	.word	0x10110000
 80053c8:	40021000 	.word	0x40021000
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40010800 	.word	0x40010800
 80053d4:	40010c00 	.word	0x40010c00
 80053d8:	40011000 	.word	0x40011000
 80053dc:	40011400 	.word	0x40011400
 80053e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_GPIO_Init+0x304>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	4909      	ldr	r1, [pc, #36]	; (8005414 <HAL_GPIO_Init+0x304>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	3301      	adds	r3, #1
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	f47f ae8e 	bne.w	8005124 <HAL_GPIO_Init+0x14>
  }
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	372c      	adds	r7, #44	; 0x2c
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	40010400 	.word	0x40010400

08005418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
 8005424:	4613      	mov	r3, r2
 8005426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005428:	787b      	ldrb	r3, [r7, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005434:	e003      	b.n	800543e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005436:	887b      	ldrh	r3, [r7, #2]
 8005438:	041a      	lsls	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	611a      	str	r2, [r3, #16]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e272      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 8087 	beq.w	8005576 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005468:	4b92      	ldr	r3, [pc, #584]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f003 030c 	and.w	r3, r3, #12
 8005470:	2b04      	cmp	r3, #4
 8005472:	d00c      	beq.n	800548e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005474:	4b8f      	ldr	r3, [pc, #572]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b08      	cmp	r3, #8
 800547e:	d112      	bne.n	80054a6 <HAL_RCC_OscConfig+0x5e>
 8005480:	4b8c      	ldr	r3, [pc, #560]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548c:	d10b      	bne.n	80054a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800548e:	4b89      	ldr	r3, [pc, #548]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d06c      	beq.n	8005574 <HAL_RCC_OscConfig+0x12c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d168      	bne.n	8005574 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e24c      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ae:	d106      	bne.n	80054be <HAL_RCC_OscConfig+0x76>
 80054b0:	4b80      	ldr	r3, [pc, #512]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a7f      	ldr	r2, [pc, #508]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	e02e      	b.n	800551c <HAL_RCC_OscConfig+0xd4>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10c      	bne.n	80054e0 <HAL_RCC_OscConfig+0x98>
 80054c6:	4b7b      	ldr	r3, [pc, #492]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a7a      	ldr	r2, [pc, #488]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	4b78      	ldr	r3, [pc, #480]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a77      	ldr	r2, [pc, #476]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e01d      	b.n	800551c <HAL_RCC_OscConfig+0xd4>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e8:	d10c      	bne.n	8005504 <HAL_RCC_OscConfig+0xbc>
 80054ea:	4b72      	ldr	r3, [pc, #456]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a71      	ldr	r2, [pc, #452]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b6f      	ldr	r3, [pc, #444]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a6e      	ldr	r2, [pc, #440]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e00b      	b.n	800551c <HAL_RCC_OscConfig+0xd4>
 8005504:	4b6b      	ldr	r3, [pc, #428]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a6a      	ldr	r2, [pc, #424]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 800550a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	4b68      	ldr	r3, [pc, #416]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a67      	ldr	r2, [pc, #412]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800551a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d013      	beq.n	800554c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005524:	f7ff fce2 	bl	8004eec <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800552c:	f7ff fcde 	bl	8004eec <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	; 0x64
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e200      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553e:	4b5d      	ldr	r3, [pc, #372]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0xe4>
 800554a:	e014      	b.n	8005576 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7ff fcce 	bl	8004eec <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005554:	f7ff fcca 	bl	8004eec <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	; 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e1ec      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005566:	4b53      	ldr	r3, [pc, #332]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x10c>
 8005572:	e000      	b.n	8005576 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d063      	beq.n	800564a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005582:	4b4c      	ldr	r3, [pc, #304]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800558e:	4b49      	ldr	r3, [pc, #292]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b08      	cmp	r3, #8
 8005598:	d11c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x18c>
 800559a:	4b46      	ldr	r3, [pc, #280]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d116      	bne.n	80055d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a6:	4b43      	ldr	r3, [pc, #268]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_RCC_OscConfig+0x176>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d001      	beq.n	80055be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e1c0      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055be:	4b3d      	ldr	r3, [pc, #244]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4939      	ldr	r1, [pc, #228]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055d2:	e03a      	b.n	800564a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d020      	beq.n	800561e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055dc:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e2:	f7ff fc83 	bl	8004eec <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ea:	f7ff fc7f 	bl	8004eec <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e1a1      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fc:	4b2d      	ldr	r3, [pc, #180]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005608:	4b2a      	ldr	r3, [pc, #168]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	4927      	ldr	r1, [pc, #156]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]
 800561c:	e015      	b.n	800564a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561e:	4b26      	ldr	r3, [pc, #152]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7ff fc62 	bl	8004eec <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800562c:	f7ff fc5e 	bl	8004eec <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e180      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d03a      	beq.n	80056cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d019      	beq.n	8005692 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005664:	f7ff fc42 	bl	8004eec <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800566c:	f7ff fc3e 	bl	8004eec <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e160      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800568a:	2001      	movs	r0, #1
 800568c:	f000 fa9c 	bl	8005bc8 <RCC_Delay>
 8005690:	e01c      	b.n	80056cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005692:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005698:	f7ff fc28 	bl	8004eec <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800569e:	e00f      	b.n	80056c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a0:	f7ff fc24 	bl	8004eec <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d908      	bls.n	80056c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e146      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
 80056b2:	bf00      	nop
 80056b4:	40021000 	.word	0x40021000
 80056b8:	42420000 	.word	0x42420000
 80056bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c0:	4b92      	ldr	r3, [pc, #584]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e9      	bne.n	80056a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80a6 	beq.w	8005826 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056de:	4b8b      	ldr	r3, [pc, #556]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10d      	bne.n	8005706 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ea:	4b88      	ldr	r3, [pc, #544]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	4a87      	ldr	r2, [pc, #540]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f4:	61d3      	str	r3, [r2, #28]
 80056f6:	4b85      	ldr	r3, [pc, #532]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005706:	4b82      	ldr	r3, [pc, #520]	; (8005910 <HAL_RCC_OscConfig+0x4c8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570e:	2b00      	cmp	r3, #0
 8005710:	d118      	bne.n	8005744 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005712:	4b7f      	ldr	r3, [pc, #508]	; (8005910 <HAL_RCC_OscConfig+0x4c8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a7e      	ldr	r2, [pc, #504]	; (8005910 <HAL_RCC_OscConfig+0x4c8>)
 8005718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800571e:	f7ff fbe5 	bl	8004eec <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005726:	f7ff fbe1 	bl	8004eec <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b64      	cmp	r3, #100	; 0x64
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e103      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005738:	4b75      	ldr	r3, [pc, #468]	; (8005910 <HAL_RCC_OscConfig+0x4c8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d106      	bne.n	800575a <HAL_RCC_OscConfig+0x312>
 800574c:	4b6f      	ldr	r3, [pc, #444]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	4a6e      	ldr	r2, [pc, #440]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6213      	str	r3, [r2, #32]
 8005758:	e02d      	b.n	80057b6 <HAL_RCC_OscConfig+0x36e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10c      	bne.n	800577c <HAL_RCC_OscConfig+0x334>
 8005762:	4b6a      	ldr	r3, [pc, #424]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	4a69      	ldr	r2, [pc, #420]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	6213      	str	r3, [r2, #32]
 800576e:	4b67      	ldr	r3, [pc, #412]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4a66      	ldr	r2, [pc, #408]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005774:	f023 0304 	bic.w	r3, r3, #4
 8005778:	6213      	str	r3, [r2, #32]
 800577a:	e01c      	b.n	80057b6 <HAL_RCC_OscConfig+0x36e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b05      	cmp	r3, #5
 8005782:	d10c      	bne.n	800579e <HAL_RCC_OscConfig+0x356>
 8005784:	4b61      	ldr	r3, [pc, #388]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	4a60      	ldr	r2, [pc, #384]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 800578a:	f043 0304 	orr.w	r3, r3, #4
 800578e:	6213      	str	r3, [r2, #32]
 8005790:	4b5e      	ldr	r3, [pc, #376]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	4a5d      	ldr	r2, [pc, #372]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	6213      	str	r3, [r2, #32]
 800579c:	e00b      	b.n	80057b6 <HAL_RCC_OscConfig+0x36e>
 800579e:	4b5b      	ldr	r3, [pc, #364]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	4a5a      	ldr	r2, [pc, #360]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	6213      	str	r3, [r2, #32]
 80057aa:	4b58      	ldr	r3, [pc, #352]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	4a57      	ldr	r2, [pc, #348]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80057b0:	f023 0304 	bic.w	r3, r3, #4
 80057b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d015      	beq.n	80057ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057be:	f7ff fb95 	bl	8004eec <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c4:	e00a      	b.n	80057dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c6:	f7ff fb91 	bl	8004eec <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e0b1      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057dc:	4b4b      	ldr	r3, [pc, #300]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0ee      	beq.n	80057c6 <HAL_RCC_OscConfig+0x37e>
 80057e8:	e014      	b.n	8005814 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ea:	f7ff fb7f 	bl	8004eec <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f0:	e00a      	b.n	8005808 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f2:	f7ff fb7b 	bl	8004eec <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005800:	4293      	cmp	r3, r2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e09b      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005808:	4b40      	ldr	r3, [pc, #256]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1ee      	bne.n	80057f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d105      	bne.n	8005826 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800581a:	4b3c      	ldr	r3, [pc, #240]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	4a3b      	ldr	r2, [pc, #236]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005824:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8087 	beq.w	800593e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005830:	4b36      	ldr	r3, [pc, #216]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f003 030c 	and.w	r3, r3, #12
 8005838:	2b08      	cmp	r3, #8
 800583a:	d061      	beq.n	8005900 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d146      	bne.n	80058d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005844:	4b33      	ldr	r3, [pc, #204]	; (8005914 <HAL_RCC_OscConfig+0x4cc>)
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584a:	f7ff fb4f 	bl	8004eec <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005852:	f7ff fb4b 	bl	8004eec <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e06d      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005864:	4b29      	ldr	r3, [pc, #164]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1f0      	bne.n	8005852 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005878:	d108      	bne.n	800588c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800587a:	4b24      	ldr	r3, [pc, #144]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4921      	ldr	r1, [pc, #132]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 8005888:	4313      	orrs	r3, r2
 800588a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800588c:	4b1f      	ldr	r3, [pc, #124]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a19      	ldr	r1, [r3, #32]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	430b      	orrs	r3, r1
 800589e:	491b      	ldr	r1, [pc, #108]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058a4:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <HAL_RCC_OscConfig+0x4cc>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058aa:	f7ff fb1f 	bl	8004eec <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b2:	f7ff fb1b 	bl	8004eec <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e03d      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCC_OscConfig+0x46a>
 80058d0:	e035      	b.n	800593e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <HAL_RCC_OscConfig+0x4cc>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7ff fb08 	bl	8004eec <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e0:	f7ff fb04 	bl	8004eec <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e026      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_RCC_OscConfig+0x4c4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x498>
 80058fe:	e01e      	b.n	800593e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e019      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
 800590c:	40021000 	.word	0x40021000
 8005910:	40007000 	.word	0x40007000
 8005914:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCC_OscConfig+0x500>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	429a      	cmp	r2, r3
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005936:	429a      	cmp	r2, r3
 8005938:	d001      	beq.n	800593e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40021000 	.word	0x40021000

0800594c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0d0      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005960:	4b6a      	ldr	r3, [pc, #424]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d910      	bls.n	8005990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b67      	ldr	r3, [pc, #412]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 0207 	bic.w	r2, r3, #7
 8005976:	4965      	ldr	r1, [pc, #404]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	4313      	orrs	r3, r2
 800597c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597e:	4b63      	ldr	r3, [pc, #396]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d001      	beq.n	8005990 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0b8      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d020      	beq.n	80059de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a8:	4b59      	ldr	r3, [pc, #356]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4a58      	ldr	r2, [pc, #352]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 80059ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c0:	4b53      	ldr	r3, [pc, #332]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4a52      	ldr	r2, [pc, #328]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 80059c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059cc:	4b50      	ldr	r3, [pc, #320]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	494d      	ldr	r1, [pc, #308]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d040      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d107      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f2:	4b47      	ldr	r3, [pc, #284]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d115      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e07f      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0a:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e073      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1a:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e06b      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2a:	4b39      	ldr	r3, [pc, #228]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f023 0203 	bic.w	r2, r3, #3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4936      	ldr	r1, [pc, #216]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a3c:	f7ff fa56 	bl	8004eec <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a44:	f7ff fa52 	bl	8004eec <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e053      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	4b2d      	ldr	r3, [pc, #180]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f003 020c 	and.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d1eb      	bne.n	8005a44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d210      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 0207 	bic.w	r2, r3, #7
 8005a82:	4922      	ldr	r1, [pc, #136]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8a:	4b20      	ldr	r3, [pc, #128]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d001      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e032      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa8:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4916      	ldr	r1, [pc, #88]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	490e      	ldr	r1, [pc, #56]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ada:	f000 f821 	bl	8005b20 <HAL_RCC_GetSysClockFreq>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	091b      	lsrs	r3, r3, #4
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	490a      	ldr	r1, [pc, #40]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005aec:	5ccb      	ldrb	r3, [r1, r3]
 8005aee:	fa22 f303 	lsr.w	r3, r2, r3
 8005af2:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <HAL_RCC_ClockConfig+0x1cc>)
 8005af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005af6:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <HAL_RCC_ClockConfig+0x1d0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff f9b4 	bl	8004e68 <HAL_InitTick>

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40022000 	.word	0x40022000
 8005b10:	40021000 	.word	0x40021000
 8005b14:	08007a24 	.word	0x08007a24
 8005b18:	20000000 	.word	0x20000000
 8005b1c:	2000001c 	.word	0x2000001c

08005b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b3a:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d002      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0x30>
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d003      	beq.n	8005b56 <HAL_RCC_GetSysClockFreq+0x36>
 8005b4e:	e027      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b50:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b52:	613b      	str	r3, [r7, #16]
      break;
 8005b54:	e027      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	0c9b      	lsrs	r3, r3, #18
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b60:	5cd3      	ldrb	r3, [r2, r3]
 8005b62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d010      	beq.n	8005b90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b6e:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	0c5b      	lsrs	r3, r3, #17
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	4a11      	ldr	r2, [pc, #68]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b7a:	5cd3      	ldrb	r3, [r2, r3]
 8005b7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a0d      	ldr	r2, [pc, #52]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b82:	fb03 f202 	mul.w	r2, r3, r2
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e004      	b.n	8005b9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a0c      	ldr	r2, [pc, #48]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	613b      	str	r3, [r7, #16]
      break;
 8005b9e:	e002      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ba0:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ba2:	613b      	str	r3, [r7, #16]
      break;
 8005ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ba6:	693b      	ldr	r3, [r7, #16]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	007a1200 	.word	0x007a1200
 8005bbc:	08007f84 	.word	0x08007f84
 8005bc0:	08007f94 	.word	0x08007f94
 8005bc4:	003d0900 	.word	0x003d0900

08005bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <RCC_Delay+0x34>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <RCC_Delay+0x38>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	0a5b      	lsrs	r3, r3, #9
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005be4:	bf00      	nop
  }
  while (Delay --);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	1e5a      	subs	r2, r3, #1
 8005bea:	60fa      	str	r2, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f9      	bne.n	8005be4 <RCC_Delay+0x1c>
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr
 8005bfc:	20000000 	.word	0x20000000
 8005c00:	10624dd3 	.word	0x10624dd3

08005c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e076      	b.n	8005d04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d108      	bne.n	8005c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c26:	d009      	beq.n	8005c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	61da      	str	r2, [r3, #28]
 8005c2e:	e005      	b.n	8005c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fa fbd2 	bl	8000400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc0:	ea42 0103 	orr.w	r1, r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	0c1a      	lsrs	r2, r3, #16
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f002 0204 	and.w	r2, r2, #4
 8005ce2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_SPI_Transmit+0x22>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e12d      	b.n	8005f8a <HAL_SPI_Transmit+0x27e>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d36:	f7ff f8d9 	bl	8004eec <HAL_GetTick>
 8005d3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d002      	beq.n	8005d52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d50:	e116      	b.n	8005f80 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <HAL_SPI_Transmit+0x52>
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d62:	e10d      	b.n	8005f80 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2203      	movs	r2, #3
 8005d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	88fa      	ldrh	r2, [r7, #6]
 8005d7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	88fa      	ldrh	r2, [r7, #6]
 8005d82:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005daa:	d10f      	bne.n	8005dcc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d007      	beq.n	8005dea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df2:	d14f      	bne.n	8005e94 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_SPI_Transmit+0xf6>
 8005dfc:	8afb      	ldrh	r3, [r7, #22]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d142      	bne.n	8005e88 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	881a      	ldrh	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	1c9a      	adds	r2, r3, #2
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e26:	e02f      	b.n	8005e88 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d112      	bne.n	8005e5c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e5a:	e015      	b.n	8005e88 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5c:	f7ff f846 	bl	8004eec <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d803      	bhi.n	8005e74 <HAL_SPI_Transmit+0x168>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e72:	d102      	bne.n	8005e7a <HAL_SPI_Transmit+0x16e>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e86:	e07b      	b.n	8005f80 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ca      	bne.n	8005e28 <HAL_SPI_Transmit+0x11c>
 8005e92:	e050      	b.n	8005f36 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_SPI_Transmit+0x196>
 8005e9c:	8afb      	ldrh	r3, [r7, #22]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d144      	bne.n	8005f2c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	7812      	ldrb	r2, [r2, #0]
 8005eae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ec8:	e030      	b.n	8005f2c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d113      	bne.n	8005f00 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005efe:	e015      	b.n	8005f2c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f00:	f7fe fff4 	bl	8004eec <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d803      	bhi.n	8005f18 <HAL_SPI_Transmit+0x20c>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f16:	d102      	bne.n	8005f1e <HAL_SPI_Transmit+0x212>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005f2a:	e029      	b.n	8005f80 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1c9      	bne.n	8005eca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fa6e 	bl	800641c <SPI_EndRxTxTransaction>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	77fb      	strb	r3, [r7, #31]
 8005f76:	e003      	b.n	8005f80 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b08c      	sub	sp, #48	; 0x30
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_SPI_TransmitReceive+0x26>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e198      	b.n	80062ea <HAL_SPI_TransmitReceive+0x358>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fc0:	f7fe ff94 	bl	8004eec <HAL_GetTick>
 8005fc4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005fd6:	887b      	ldrh	r3, [r7, #2]
 8005fd8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d00f      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x70>
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe8:	d107      	bne.n	8005ffa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <HAL_SPI_TransmitReceive+0x68>
 8005ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d003      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006000:	e16d      	b.n	80062de <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x82>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x82>
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d103      	bne.n	800601c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800601a:	e160      	b.n	80062de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b04      	cmp	r3, #4
 8006026:	d003      	beq.n	8006030 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2205      	movs	r2, #5
 800602c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	887a      	ldrh	r2, [r7, #2]
 8006040:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	887a      	ldrh	r2, [r7, #2]
 8006046:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	887a      	ldrh	r2, [r7, #2]
 8006052:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006070:	2b40      	cmp	r3, #64	; 0x40
 8006072:	d007      	beq.n	8006084 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800608c:	d17c      	bne.n	8006188 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_SPI_TransmitReceive+0x10a>
 8006096:	8b7b      	ldrh	r3, [r7, #26]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d16a      	bne.n	8006172 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	881a      	ldrh	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	1c9a      	adds	r2, r3, #2
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060c0:	e057      	b.n	8006172 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d11b      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x176>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d016      	beq.n	8006108 <HAL_SPI_TransmitReceive+0x176>
 80060da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d113      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	881a      	ldrh	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	d119      	bne.n	800614a <HAL_SPI_TransmitReceive+0x1b8>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d014      	beq.n	800614a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	b292      	uxth	r2, r2
 800612c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	1c9a      	adds	r2, r3, #2
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006146:	2301      	movs	r3, #1
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800614a:	f7fe fecf 	bl	8004eec <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006156:	429a      	cmp	r2, r3
 8006158:	d80b      	bhi.n	8006172 <HAL_SPI_TransmitReceive+0x1e0>
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006160:	d007      	beq.n	8006172 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006170:	e0b5      	b.n	80062de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1a2      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x130>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d19d      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x130>
 8006186:	e080      	b.n	800628a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x204>
 8006190:	8b7b      	ldrh	r3, [r7, #26]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d16f      	bne.n	8006276 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061bc:	e05b      	b.n	8006276 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d11c      	bne.n	8006206 <HAL_SPI_TransmitReceive+0x274>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d017      	beq.n	8006206 <HAL_SPI_TransmitReceive+0x274>
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d114      	bne.n	8006206 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	7812      	ldrb	r2, [r2, #0]
 80061e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	d119      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x2b6>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d014      	beq.n	8006248 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006244:	2301      	movs	r3, #1
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006248:	f7fe fe50 	bl	8004eec <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006254:	429a      	cmp	r2, r3
 8006256:	d803      	bhi.n	8006260 <HAL_SPI_TransmitReceive+0x2ce>
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800625e:	d102      	bne.n	8006266 <HAL_SPI_TransmitReceive+0x2d4>
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	2b00      	cmp	r3, #0
 8006264:	d107      	bne.n	8006276 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006274:	e033      	b.n	80062de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d19e      	bne.n	80061be <HAL_SPI_TransmitReceive+0x22c>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d199      	bne.n	80061be <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800628a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f8c4 	bl	800641c <SPI_EndRxTxTransaction>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d006      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062a6:	e01a      	b.n	80062de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d4:	e003      	b.n	80062de <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3730      	adds	r7, #48	; 0x30
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006300:	b2db      	uxtb	r3, r3
}
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr

0800630c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800631c:	f7fe fde6 	bl	8004eec <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	4413      	add	r3, r2
 800632a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800632c:	f7fe fdde 	bl	8004eec <HAL_GetTick>
 8006330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006332:	4b39      	ldr	r3, [pc, #228]	; (8006418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	015b      	lsls	r3, r3, #5
 8006338:	0d1b      	lsrs	r3, r3, #20
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006342:	e054      	b.n	80063ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800634a:	d050      	beq.n	80063ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800634c:	f7fe fdce 	bl	8004eec <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	429a      	cmp	r2, r3
 800635a:	d902      	bls.n	8006362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d13d      	bne.n	80063de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800637a:	d111      	bne.n	80063a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006384:	d004      	beq.n	8006390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800638e:	d107      	bne.n	80063a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800639e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a8:	d10f      	bne.n	80063ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e017      	b.n	800640e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4013      	ands	r3, r2
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	bf0c      	ite	eq
 80063fe:	2301      	moveq	r3, #1
 8006400:	2300      	movne	r3, #0
 8006402:	b2db      	uxtb	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	429a      	cmp	r2, r3
 800640a:	d19b      	bne.n	8006344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000000 	.word	0x20000000

0800641c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	2180      	movs	r1, #128	; 0x80
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff ff6a 	bl	800630c <SPI_WaitFlagStateUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e000      	b.n	8006450 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e041      	b.n	80064ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fa f808 	bl	8000494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3304      	adds	r3, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4610      	mov	r0, r2
 8006498:	f000 f8f4 	bl	8006684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_TIM_ConfigClockSource+0x1c>
 800650e:	2302      	movs	r3, #2
 8006510:	e0b4      	b.n	800667c <HAL_TIM_ConfigClockSource+0x186>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006530:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006538:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654a:	d03e      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0xd4>
 800654c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006550:	f200 8087 	bhi.w	8006662 <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	f000 8086 	beq.w	8006668 <HAL_TIM_ConfigClockSource+0x172>
 800655c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006560:	d87f      	bhi.n	8006662 <HAL_TIM_ConfigClockSource+0x16c>
 8006562:	2b70      	cmp	r3, #112	; 0x70
 8006564:	d01a      	beq.n	800659c <HAL_TIM_ConfigClockSource+0xa6>
 8006566:	2b70      	cmp	r3, #112	; 0x70
 8006568:	d87b      	bhi.n	8006662 <HAL_TIM_ConfigClockSource+0x16c>
 800656a:	2b60      	cmp	r3, #96	; 0x60
 800656c:	d050      	beq.n	8006610 <HAL_TIM_ConfigClockSource+0x11a>
 800656e:	2b60      	cmp	r3, #96	; 0x60
 8006570:	d877      	bhi.n	8006662 <HAL_TIM_ConfigClockSource+0x16c>
 8006572:	2b50      	cmp	r3, #80	; 0x50
 8006574:	d03c      	beq.n	80065f0 <HAL_TIM_ConfigClockSource+0xfa>
 8006576:	2b50      	cmp	r3, #80	; 0x50
 8006578:	d873      	bhi.n	8006662 <HAL_TIM_ConfigClockSource+0x16c>
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d058      	beq.n	8006630 <HAL_TIM_ConfigClockSource+0x13a>
 800657e:	2b40      	cmp	r3, #64	; 0x40
 8006580:	d86f      	bhi.n	8006662 <HAL_TIM_ConfigClockSource+0x16c>
 8006582:	2b30      	cmp	r3, #48	; 0x30
 8006584:	d064      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0x15a>
 8006586:	2b30      	cmp	r3, #48	; 0x30
 8006588:	d86b      	bhi.n	8006662 <HAL_TIM_ConfigClockSource+0x16c>
 800658a:	2b20      	cmp	r3, #32
 800658c:	d060      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0x15a>
 800658e:	2b20      	cmp	r3, #32
 8006590:	d867      	bhi.n	8006662 <HAL_TIM_ConfigClockSource+0x16c>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d05c      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0x15a>
 8006596:	2b10      	cmp	r3, #16
 8006598:	d05a      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0x15a>
 800659a:	e062      	b.n	8006662 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065ac:	f000 f943 	bl	8006836 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	609a      	str	r2, [r3, #8]
      break;
 80065c8:	e04f      	b.n	800666a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065da:	f000 f92c 	bl	8006836 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ec:	609a      	str	r2, [r3, #8]
      break;
 80065ee:	e03c      	b.n	800666a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fc:	461a      	mov	r2, r3
 80065fe:	f000 f8a3 	bl	8006748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2150      	movs	r1, #80	; 0x50
 8006608:	4618      	mov	r0, r3
 800660a:	f000 f8fa 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 800660e:	e02c      	b.n	800666a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800661c:	461a      	mov	r2, r3
 800661e:	f000 f8c1 	bl	80067a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2160      	movs	r1, #96	; 0x60
 8006628:	4618      	mov	r0, r3
 800662a:	f000 f8ea 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 800662e:	e01c      	b.n	800666a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800663c:	461a      	mov	r2, r3
 800663e:	f000 f883 	bl	8006748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2140      	movs	r1, #64	; 0x40
 8006648:	4618      	mov	r0, r3
 800664a:	f000 f8da 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 800664e:	e00c      	b.n	800666a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f000 f8d1 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8006660:	e003      	b.n	800666a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
      break;
 8006666:	e000      	b.n	800666a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006668:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a29      	ldr	r2, [pc, #164]	; (800673c <TIM_Base_SetConfig+0xb8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00b      	beq.n	80066b4 <TIM_Base_SetConfig+0x30>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a2:	d007      	beq.n	80066b4 <TIM_Base_SetConfig+0x30>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a26      	ldr	r2, [pc, #152]	; (8006740 <TIM_Base_SetConfig+0xbc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_Base_SetConfig+0x30>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a25      	ldr	r2, [pc, #148]	; (8006744 <TIM_Base_SetConfig+0xc0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d108      	bne.n	80066c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1c      	ldr	r2, [pc, #112]	; (800673c <TIM_Base_SetConfig+0xb8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00b      	beq.n	80066e6 <TIM_Base_SetConfig+0x62>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d4:	d007      	beq.n	80066e6 <TIM_Base_SetConfig+0x62>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a19      	ldr	r2, [pc, #100]	; (8006740 <TIM_Base_SetConfig+0xbc>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_Base_SetConfig+0x62>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a18      	ldr	r2, [pc, #96]	; (8006744 <TIM_Base_SetConfig+0xc0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d108      	bne.n	80066f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a07      	ldr	r2, [pc, #28]	; (800673c <TIM_Base_SetConfig+0xb8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d103      	bne.n	800672c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	615a      	str	r2, [r3, #20]
}
 8006732:	bf00      	nop
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	40012c00 	.word	0x40012c00
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800

08006748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f023 0201 	bic.w	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 030a 	bic.w	r3, r3, #10
 8006784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr

080067a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0210 	bic.w	r2, r3, #16
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	031b      	lsls	r3, r3, #12
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	621a      	str	r2, [r3, #32]
}
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	f043 0307 	orr.w	r3, r3, #7
 8006824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	609a      	str	r2, [r3, #8]
}
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006836:	b480      	push	{r7}
 8006838:	b087      	sub	sp, #28
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006850:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	021a      	lsls	r2, r3, #8
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	431a      	orrs	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4313      	orrs	r3, r2
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	609a      	str	r2, [r3, #8]
}
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006888:	2302      	movs	r3, #2
 800688a:	e046      	b.n	800691a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a16      	ldr	r2, [pc, #88]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d8:	d009      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a12      	ldr	r2, [pc, #72]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a10      	ldr	r2, [pc, #64]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d10c      	bne.n	8006908 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800

08006930 <readFileAndProcessData>:
 *
 * @param filename The name of the file to be read.
 * @param processBuffer A function pointer to the function that processes the buffer.
 * @return FileReadStatus indicating the status of the file read operation.
 */
FileReadStatus readFileAndProcessData(const TCHAR* filename, ProcessBufferFunc processBuffer) {
 8006930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006934:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8006938:	b081      	sub	sp, #4
 800693a:	af00      	add	r7, sp, #0
 800693c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006940:	f843 0c7c 	str.w	r0, [r3, #-124]
 8006944:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006948:	f843 1c80 	str.w	r1, [r3, #-128]
 800694c:	466b      	mov	r3, sp
 800694e:	461e      	mov	r6, r3
    SD_FILE_DELAY(START_DELAY);
 8006950:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006954:	f7fe fad4 	bl	8004f00 <HAL_Delay>
    FIL file;                   // File object
    UINT bytesRead;             // Number of bytes read from the file
    char buffer[BUFFER_SIZE8_SD]; // Buffer for reading file data
 8006958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800695c:	3b01      	subs	r3, #1
 800695e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006962:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800696c:	2300      	movs	r3, #0
 800696e:	4690      	mov	r8, r2
 8006970:	4699      	mov	r9, r3
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800697e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698a:	2300      	movs	r3, #0
 800698c:	4614      	mov	r4, r2
 800698e:	461d      	mov	r5, r3
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	00eb      	lsls	r3, r5, #3
 800699a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800699e:	00e2      	lsls	r2, r4, #3
 80069a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a4:	3307      	adds	r3, #7
 80069a6:	08db      	lsrs	r3, r3, #3
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	ebad 0d03 	sub.w	sp, sp, r3
 80069ae:	466b      	mov	r3, sp
 80069b0:	3300      	adds	r3, #0
 80069b2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80069b6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80069ba:	6013      	str	r3, [r2, #0]
    uint32_t countRead =0;
 80069bc:	2300      	movs	r3, #0
 80069be:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80069c2:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80069c6:	6013      	str	r3, [r2, #0]
    FRESULT fres;               // Variable to store file operation results
    FATFS Fs;                   // File system structure

    fres = f_mount(&Fs, "", 1);    // 1=mount now
 80069c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069cc:	3b34      	subs	r3, #52	; 0x34
 80069ce:	2201      	movs	r2, #1
 80069d0:	4954      	ldr	r1, [pc, #336]	; (8006b24 <readFileAndProcessData+0x1f4>)
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fd f84a 	bl	8003a6c <f_mount>
 80069d8:	4603      	mov	r3, r0
 80069da:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80069de:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80069e2:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 80069e4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80069e8:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <readFileAndProcessData+0xc6>
        return FILE_READ_OPEN_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e08d      	b.n	8006b12 <readFileAndProcessData+0x1e2>
    }

    // Open the file for reading
    if (f_open(&file, filename, FA_READ) != FR_OK) {
 80069f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80069fa:	4619      	mov	r1, r3
 80069fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a00:	2201      	movs	r2, #1
 8006a02:	f851 1c7c 	ldr.w	r1, [r1, #-124]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fd f87a 	bl	8003b00 <f_open>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <readFileAndProcessData+0xe6>
        return FILE_READ_OPEN_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e07d      	b.n	8006b12 <readFileAndProcessData+0x1e2>
    }

    // Variable to track the position in the file
    DWORD filePosition = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006a1c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8006a20:	6013      	str	r3, [r2, #0]

    // Read the contents of the file
    while (1) {
        // Read data from the file into the buffer
        if (f_read(&file, buffer, BUFFER_SIZE8_SD, &bytesRead) != FR_OK) {
 8006a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a2a:	3b04      	subs	r3, #4
 8006a2c:	f507 5082 	add.w	r0, r7, #4160	; 0x1040
 8006a30:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 8006a34:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006a38:	6809      	ldr	r1, [r1, #0]
 8006a3a:	f7fd fb79 	bl	8004130 <f_read>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d006      	beq.n	8006a52 <readFileAndProcessData+0x122>
            f_close(&file); // Close the file before exiting
 8006a44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fd fe27 	bl	800469c <f_close>
            return FILE_READ_ERROR;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e05f      	b.n	8006b12 <readFileAndProcessData+0x1e2>
        }
        ++countRead;
 8006a52:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006a56:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006a62:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8006a66:	6013      	str	r3, [r2, #0]

        // If all data has been read from the file, exit the loop
        if (bytesRead == 0) {
 8006a68:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8006a6c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d03d      	beq.n	8006af0 <readFileAndProcessData+0x1c0>
            break;
        }
        SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8006a74:	4b2c      	ldr	r3, [pc, #176]	; (8006b28 <readFileAndProcessData+0x1f8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2b      	ldr	r2, [pc, #172]	; (8006b28 <readFileAndProcessData+0x1f8>)
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	6013      	str	r3, [r2, #0]
        // Process the read data, for example, output it to the console
        // (Replace this part of the code with your data processing logic)
        processBuffer(buffer, bytesRead);
 8006a80:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8006a84:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8006a88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a8c:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8006a90:	4611      	mov	r1, r2
 8006a92:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006a96:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8006a9a:	6810      	ldr	r0, [r2, #0]
 8006a9c:	4798      	blx	r3
        SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8006a9e:	4b22      	ldr	r3, [pc, #136]	; (8006b28 <readFileAndProcessData+0x1f8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a21      	ldr	r2, [pc, #132]	; (8006b28 <readFileAndProcessData+0x1f8>)
 8006aa4:	f043 0301 	orr.w	r3, r3, #1
 8006aa8:	6013      	str	r3, [r2, #0]
        // Update the file position
        filePosition += bytesRead;
 8006aaa:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8006aae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ab2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006ab6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	4413      	add	r3, r2
 8006abe:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006ac2:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8006ac6:	6013      	str	r3, [r2, #0]

        // Move the file pointer to the current position
        if (f_lseek(&file, filePosition) != FR_OK) {
 8006ac8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006acc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006ad0:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8006ad4:	6811      	ldr	r1, [r2, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fd fe0b 	bl	80046f2 <f_lseek>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d09f      	beq.n	8006a22 <readFileAndProcessData+0xf2>
            f_close(&file); // Close the file before exiting
 8006ae2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fd fdd8 	bl	800469c <f_close>
            return FILE_READ_ERROR;
 8006aec:	2302      	movs	r3, #2
 8006aee:	e010      	b.n	8006b12 <readFileAndProcessData+0x1e2>
            break;
 8006af0:	bf00      	nop
        }
    }

    // Close the file after reading
    f_close(&file);
 8006af2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd fdd0 	bl	800469c <f_close>

    // Unmount the SD card with integrity check
    if (f_mount(NULL, "0:/", 1) != FR_OK) {
 8006afc:	2201      	movs	r2, #1
 8006afe:	490b      	ldr	r1, [pc, #44]	; (8006b2c <readFileAndProcessData+0x1fc>)
 8006b00:	2000      	movs	r0, #0
 8006b02:	f7fc ffb3 	bl	8003a6c <f_mount>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <readFileAndProcessData+0x1e0>
        return FILE_READ_OPEN_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <readFileAndProcessData+0x1e2>
    }

    return FILE_READ_SUCCESS;
 8006b10:	2300      	movs	r3, #0
 8006b12:	46b5      	mov	sp, r6
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8006b1a:	3704      	adds	r7, #4
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b22:	bf00      	nop
 8006b24:	08007a1c 	.word	0x08007a1c
 8006b28:	e000e010 	.word	0xe000e010
 8006b2c:	08007a20 	.word	0x08007a20

08006b30 <std>:
 8006b30:	2300      	movs	r3, #0
 8006b32:	b510      	push	{r4, lr}
 8006b34:	4604      	mov	r4, r0
 8006b36:	e9c0 3300 	strd	r3, r3, [r0]
 8006b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b3e:	6083      	str	r3, [r0, #8]
 8006b40:	8181      	strh	r1, [r0, #12]
 8006b42:	6643      	str	r3, [r0, #100]	; 0x64
 8006b44:	81c2      	strh	r2, [r0, #14]
 8006b46:	6183      	str	r3, [r0, #24]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	305c      	adds	r0, #92	; 0x5c
 8006b4e:	f000 f906 	bl	8006d5e <memset>
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <std+0x58>)
 8006b54:	6224      	str	r4, [r4, #32]
 8006b56:	6263      	str	r3, [r4, #36]	; 0x24
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <std+0x5c>)
 8006b5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <std+0x60>)
 8006b5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <std+0x64>)
 8006b62:	6323      	str	r3, [r4, #48]	; 0x30
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <std+0x68>)
 8006b66:	429c      	cmp	r4, r3
 8006b68:	d006      	beq.n	8006b78 <std+0x48>
 8006b6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b6e:	4294      	cmp	r4, r2
 8006b70:	d002      	beq.n	8006b78 <std+0x48>
 8006b72:	33d0      	adds	r3, #208	; 0xd0
 8006b74:	429c      	cmp	r4, r3
 8006b76:	d105      	bne.n	8006b84 <std+0x54>
 8006b78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b80:	f000 b966 	b.w	8006e50 <__retarget_lock_init_recursive>
 8006b84:	bd10      	pop	{r4, pc}
 8006b86:	bf00      	nop
 8006b88:	08006cd9 	.word	0x08006cd9
 8006b8c:	08006cfb 	.word	0x08006cfb
 8006b90:	08006d33 	.word	0x08006d33
 8006b94:	08006d57 	.word	0x08006d57
 8006b98:	2000037c 	.word	0x2000037c

08006b9c <stdio_exit_handler>:
 8006b9c:	4a02      	ldr	r2, [pc, #8]	; (8006ba8 <stdio_exit_handler+0xc>)
 8006b9e:	4903      	ldr	r1, [pc, #12]	; (8006bac <stdio_exit_handler+0x10>)
 8006ba0:	4803      	ldr	r0, [pc, #12]	; (8006bb0 <stdio_exit_handler+0x14>)
 8006ba2:	f000 b869 	b.w	8006c78 <_fwalk_sglue>
 8006ba6:	bf00      	nop
 8006ba8:	20000024 	.word	0x20000024
 8006bac:	080076f1 	.word	0x080076f1
 8006bb0:	20000030 	.word	0x20000030

08006bb4 <cleanup_stdio>:
 8006bb4:	6841      	ldr	r1, [r0, #4]
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <cleanup_stdio+0x34>)
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4299      	cmp	r1, r3
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	d001      	beq.n	8006bc4 <cleanup_stdio+0x10>
 8006bc0:	f000 fd96 	bl	80076f0 <_fflush_r>
 8006bc4:	68a1      	ldr	r1, [r4, #8]
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <cleanup_stdio+0x38>)
 8006bc8:	4299      	cmp	r1, r3
 8006bca:	d002      	beq.n	8006bd2 <cleanup_stdio+0x1e>
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fd8f 	bl	80076f0 <_fflush_r>
 8006bd2:	68e1      	ldr	r1, [r4, #12]
 8006bd4:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <cleanup_stdio+0x3c>)
 8006bd6:	4299      	cmp	r1, r3
 8006bd8:	d004      	beq.n	8006be4 <cleanup_stdio+0x30>
 8006bda:	4620      	mov	r0, r4
 8006bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be0:	f000 bd86 	b.w	80076f0 <_fflush_r>
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	bf00      	nop
 8006be8:	2000037c 	.word	0x2000037c
 8006bec:	200003e4 	.word	0x200003e4
 8006bf0:	2000044c 	.word	0x2000044c

08006bf4 <global_stdio_init.part.0>:
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <global_stdio_init.part.0+0x30>)
 8006bf8:	4c0b      	ldr	r4, [pc, #44]	; (8006c28 <global_stdio_init.part.0+0x34>)
 8006bfa:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <global_stdio_init.part.0+0x38>)
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	2104      	movs	r1, #4
 8006c02:	2200      	movs	r2, #0
 8006c04:	f7ff ff94 	bl	8006b30 <std>
 8006c08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	2109      	movs	r1, #9
 8006c10:	f7ff ff8e 	bl	8006b30 <std>
 8006c14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c18:	2202      	movs	r2, #2
 8006c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1e:	2112      	movs	r1, #18
 8006c20:	f7ff bf86 	b.w	8006b30 <std>
 8006c24:	200004b4 	.word	0x200004b4
 8006c28:	2000037c 	.word	0x2000037c
 8006c2c:	08006b9d 	.word	0x08006b9d

08006c30 <__sfp_lock_acquire>:
 8006c30:	4801      	ldr	r0, [pc, #4]	; (8006c38 <__sfp_lock_acquire+0x8>)
 8006c32:	f000 b90e 	b.w	8006e52 <__retarget_lock_acquire_recursive>
 8006c36:	bf00      	nop
 8006c38:	200004bd 	.word	0x200004bd

08006c3c <__sfp_lock_release>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	; (8006c44 <__sfp_lock_release+0x8>)
 8006c3e:	f000 b909 	b.w	8006e54 <__retarget_lock_release_recursive>
 8006c42:	bf00      	nop
 8006c44:	200004bd 	.word	0x200004bd

08006c48 <__sinit>:
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	f7ff fff0 	bl	8006c30 <__sfp_lock_acquire>
 8006c50:	6a23      	ldr	r3, [r4, #32]
 8006c52:	b11b      	cbz	r3, 8006c5c <__sinit+0x14>
 8006c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c58:	f7ff bff0 	b.w	8006c3c <__sfp_lock_release>
 8006c5c:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <__sinit+0x28>)
 8006c5e:	6223      	str	r3, [r4, #32]
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <__sinit+0x2c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1f5      	bne.n	8006c54 <__sinit+0xc>
 8006c68:	f7ff ffc4 	bl	8006bf4 <global_stdio_init.part.0>
 8006c6c:	e7f2      	b.n	8006c54 <__sinit+0xc>
 8006c6e:	bf00      	nop
 8006c70:	08006bb5 	.word	0x08006bb5
 8006c74:	200004b4 	.word	0x200004b4

08006c78 <_fwalk_sglue>:
 8006c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	4688      	mov	r8, r1
 8006c80:	4614      	mov	r4, r2
 8006c82:	2600      	movs	r6, #0
 8006c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c88:	f1b9 0901 	subs.w	r9, r9, #1
 8006c8c:	d505      	bpl.n	8006c9a <_fwalk_sglue+0x22>
 8006c8e:	6824      	ldr	r4, [r4, #0]
 8006c90:	2c00      	cmp	r4, #0
 8006c92:	d1f7      	bne.n	8006c84 <_fwalk_sglue+0xc>
 8006c94:	4630      	mov	r0, r6
 8006c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9a:	89ab      	ldrh	r3, [r5, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d907      	bls.n	8006cb0 <_fwalk_sglue+0x38>
 8006ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	d003      	beq.n	8006cb0 <_fwalk_sglue+0x38>
 8006ca8:	4629      	mov	r1, r5
 8006caa:	4638      	mov	r0, r7
 8006cac:	47c0      	blx	r8
 8006cae:	4306      	orrs	r6, r0
 8006cb0:	3568      	adds	r5, #104	; 0x68
 8006cb2:	e7e9      	b.n	8006c88 <_fwalk_sglue+0x10>

08006cb4 <iprintf>:
 8006cb4:	b40f      	push	{r0, r1, r2, r3}
 8006cb6:	b507      	push	{r0, r1, r2, lr}
 8006cb8:	4906      	ldr	r1, [pc, #24]	; (8006cd4 <iprintf+0x20>)
 8006cba:	ab04      	add	r3, sp, #16
 8006cbc:	6808      	ldr	r0, [r1, #0]
 8006cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cc2:	6881      	ldr	r1, [r0, #8]
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	f000 f9e3 	bl	8007090 <_vfiprintf_r>
 8006cca:	b003      	add	sp, #12
 8006ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cd0:	b004      	add	sp, #16
 8006cd2:	4770      	bx	lr
 8006cd4:	2000007c 	.word	0x2000007c

08006cd8 <__sread>:
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	460c      	mov	r4, r1
 8006cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce0:	f000 f868 	bl	8006db4 <_read_r>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	bfab      	itete	ge
 8006ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cea:	89a3      	ldrhlt	r3, [r4, #12]
 8006cec:	181b      	addge	r3, r3, r0
 8006cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cf2:	bfac      	ite	ge
 8006cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cf6:	81a3      	strhlt	r3, [r4, #12]
 8006cf8:	bd10      	pop	{r4, pc}

08006cfa <__swrite>:
 8006cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfe:	461f      	mov	r7, r3
 8006d00:	898b      	ldrh	r3, [r1, #12]
 8006d02:	4605      	mov	r5, r0
 8006d04:	05db      	lsls	r3, r3, #23
 8006d06:	460c      	mov	r4, r1
 8006d08:	4616      	mov	r6, r2
 8006d0a:	d505      	bpl.n	8006d18 <__swrite+0x1e>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d14:	f000 f83c 	bl	8006d90 <_lseek_r>
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	4632      	mov	r2, r6
 8006d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	4628      	mov	r0, r5
 8006d24:	463b      	mov	r3, r7
 8006d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2e:	f000 b853 	b.w	8006dd8 <_write_r>

08006d32 <__sseek>:
 8006d32:	b510      	push	{r4, lr}
 8006d34:	460c      	mov	r4, r1
 8006d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3a:	f000 f829 	bl	8006d90 <_lseek_r>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	bf15      	itete	ne
 8006d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d4e:	81a3      	strheq	r3, [r4, #12]
 8006d50:	bf18      	it	ne
 8006d52:	81a3      	strhne	r3, [r4, #12]
 8006d54:	bd10      	pop	{r4, pc}

08006d56 <__sclose>:
 8006d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5a:	f000 b809 	b.w	8006d70 <_close_r>

08006d5e <memset>:
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4402      	add	r2, r0
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d100      	bne.n	8006d68 <memset+0xa>
 8006d66:	4770      	bx	lr
 8006d68:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6c:	e7f9      	b.n	8006d62 <memset+0x4>
	...

08006d70 <_close_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	2300      	movs	r3, #0
 8006d74:	4d05      	ldr	r5, [pc, #20]	; (8006d8c <_close_r+0x1c>)
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	f7f9 fc2a 	bl	80005d4 <_close>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_close_r+0x1a>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_close_r+0x1a>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	200004b8 	.word	0x200004b8

08006d90 <_lseek_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4d05      	ldr	r5, [pc, #20]	; (8006db0 <_lseek_r+0x20>)
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7f9 fc3c 	bl	800061c <_lseek>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_lseek_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_lseek_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	200004b8 	.word	0x200004b8

08006db4 <_read_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4604      	mov	r4, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4d05      	ldr	r5, [pc, #20]	; (8006dd4 <_read_r+0x20>)
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f7f9 fbcd 	bl	8000562 <_read>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_read_r+0x1e>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_read_r+0x1e>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	200004b8 	.word	0x200004b8

08006dd8 <_write_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	2200      	movs	r2, #0
 8006de2:	4d05      	ldr	r5, [pc, #20]	; (8006df8 <_write_r+0x20>)
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f7f9 fbd8 	bl	800059c <_write>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_write_r+0x1e>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_write_r+0x1e>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	200004b8 	.word	0x200004b8

08006dfc <__errno>:
 8006dfc:	4b01      	ldr	r3, [pc, #4]	; (8006e04 <__errno+0x8>)
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	2000007c 	.word	0x2000007c

08006e08 <__libc_init_array>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	2600      	movs	r6, #0
 8006e0c:	4d0c      	ldr	r5, [pc, #48]	; (8006e40 <__libc_init_array+0x38>)
 8006e0e:	4c0d      	ldr	r4, [pc, #52]	; (8006e44 <__libc_init_array+0x3c>)
 8006e10:	1b64      	subs	r4, r4, r5
 8006e12:	10a4      	asrs	r4, r4, #2
 8006e14:	42a6      	cmp	r6, r4
 8006e16:	d109      	bne.n	8006e2c <__libc_init_array+0x24>
 8006e18:	f000 fdca 	bl	80079b0 <_init>
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	4d0a      	ldr	r5, [pc, #40]	; (8006e48 <__libc_init_array+0x40>)
 8006e20:	4c0a      	ldr	r4, [pc, #40]	; (8006e4c <__libc_init_array+0x44>)
 8006e22:	1b64      	subs	r4, r4, r5
 8006e24:	10a4      	asrs	r4, r4, #2
 8006e26:	42a6      	cmp	r6, r4
 8006e28:	d105      	bne.n	8006e36 <__libc_init_array+0x2e>
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e30:	4798      	blx	r3
 8006e32:	3601      	adds	r6, #1
 8006e34:	e7ee      	b.n	8006e14 <__libc_init_array+0xc>
 8006e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3a:	4798      	blx	r3
 8006e3c:	3601      	adds	r6, #1
 8006e3e:	e7f2      	b.n	8006e26 <__libc_init_array+0x1e>
 8006e40:	08007fcc 	.word	0x08007fcc
 8006e44:	08007fcc 	.word	0x08007fcc
 8006e48:	08007fcc 	.word	0x08007fcc
 8006e4c:	08007fd0 	.word	0x08007fd0

08006e50 <__retarget_lock_init_recursive>:
 8006e50:	4770      	bx	lr

08006e52 <__retarget_lock_acquire_recursive>:
 8006e52:	4770      	bx	lr

08006e54 <__retarget_lock_release_recursive>:
 8006e54:	4770      	bx	lr
	...

08006e58 <_free_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	d040      	beq.n	8006ee2 <_free_r+0x8a>
 8006e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e64:	1f0c      	subs	r4, r1, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	bfb8      	it	lt
 8006e6a:	18e4      	addlt	r4, r4, r3
 8006e6c:	f000 f8dc 	bl	8007028 <__malloc_lock>
 8006e70:	4a1c      	ldr	r2, [pc, #112]	; (8006ee4 <_free_r+0x8c>)
 8006e72:	6813      	ldr	r3, [r2, #0]
 8006e74:	b933      	cbnz	r3, 8006e84 <_free_r+0x2c>
 8006e76:	6063      	str	r3, [r4, #4]
 8006e78:	6014      	str	r4, [r2, #0]
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e80:	f000 b8d8 	b.w	8007034 <__malloc_unlock>
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	d908      	bls.n	8006e9a <_free_r+0x42>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	1821      	adds	r1, r4, r0
 8006e8c:	428b      	cmp	r3, r1
 8006e8e:	bf01      	itttt	eq
 8006e90:	6819      	ldreq	r1, [r3, #0]
 8006e92:	685b      	ldreq	r3, [r3, #4]
 8006e94:	1809      	addeq	r1, r1, r0
 8006e96:	6021      	streq	r1, [r4, #0]
 8006e98:	e7ed      	b.n	8006e76 <_free_r+0x1e>
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	b10b      	cbz	r3, 8006ea4 <_free_r+0x4c>
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	d9fa      	bls.n	8006e9a <_free_r+0x42>
 8006ea4:	6811      	ldr	r1, [r2, #0]
 8006ea6:	1850      	adds	r0, r2, r1
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d10b      	bne.n	8006ec4 <_free_r+0x6c>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	4401      	add	r1, r0
 8006eb0:	1850      	adds	r0, r2, r1
 8006eb2:	4283      	cmp	r3, r0
 8006eb4:	6011      	str	r1, [r2, #0]
 8006eb6:	d1e0      	bne.n	8006e7a <_free_r+0x22>
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4408      	add	r0, r1
 8006ebe:	6010      	str	r0, [r2, #0]
 8006ec0:	6053      	str	r3, [r2, #4]
 8006ec2:	e7da      	b.n	8006e7a <_free_r+0x22>
 8006ec4:	d902      	bls.n	8006ecc <_free_r+0x74>
 8006ec6:	230c      	movs	r3, #12
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	e7d6      	b.n	8006e7a <_free_r+0x22>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	1821      	adds	r1, r4, r0
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	bf01      	itttt	eq
 8006ed4:	6819      	ldreq	r1, [r3, #0]
 8006ed6:	685b      	ldreq	r3, [r3, #4]
 8006ed8:	1809      	addeq	r1, r1, r0
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	6054      	str	r4, [r2, #4]
 8006ee0:	e7cb      	b.n	8006e7a <_free_r+0x22>
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	200004c0 	.word	0x200004c0

08006ee8 <sbrk_aligned>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0e      	ldr	r6, [pc, #56]	; (8006f24 <sbrk_aligned+0x3c>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	6831      	ldr	r1, [r6, #0]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b911      	cbnz	r1, 8006efa <sbrk_aligned+0x12>
 8006ef4:	f000 fcba 	bl	800786c <_sbrk_r>
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 fcb5 	bl	800786c <_sbrk_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d00a      	beq.n	8006f1c <sbrk_aligned+0x34>
 8006f06:	1cc4      	adds	r4, r0, #3
 8006f08:	f024 0403 	bic.w	r4, r4, #3
 8006f0c:	42a0      	cmp	r0, r4
 8006f0e:	d007      	beq.n	8006f20 <sbrk_aligned+0x38>
 8006f10:	1a21      	subs	r1, r4, r0
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 fcaa 	bl	800786c <_sbrk_r>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d101      	bne.n	8006f20 <sbrk_aligned+0x38>
 8006f1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	200004c4 	.word	0x200004c4

08006f28 <_malloc_r>:
 8006f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f2c:	1ccd      	adds	r5, r1, #3
 8006f2e:	f025 0503 	bic.w	r5, r5, #3
 8006f32:	3508      	adds	r5, #8
 8006f34:	2d0c      	cmp	r5, #12
 8006f36:	bf38      	it	cc
 8006f38:	250c      	movcc	r5, #12
 8006f3a:	2d00      	cmp	r5, #0
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	db01      	blt.n	8006f44 <_malloc_r+0x1c>
 8006f40:	42a9      	cmp	r1, r5
 8006f42:	d905      	bls.n	8006f50 <_malloc_r+0x28>
 8006f44:	230c      	movs	r3, #12
 8006f46:	2600      	movs	r6, #0
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007024 <_malloc_r+0xfc>
 8006f54:	f000 f868 	bl	8007028 <__malloc_lock>
 8006f58:	f8d8 3000 	ldr.w	r3, [r8]
 8006f5c:	461c      	mov	r4, r3
 8006f5e:	bb5c      	cbnz	r4, 8006fb8 <_malloc_r+0x90>
 8006f60:	4629      	mov	r1, r5
 8006f62:	4638      	mov	r0, r7
 8006f64:	f7ff ffc0 	bl	8006ee8 <sbrk_aligned>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	d155      	bne.n	800701a <_malloc_r+0xf2>
 8006f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8006f72:	4626      	mov	r6, r4
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	d145      	bne.n	8007004 <_malloc_r+0xdc>
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d048      	beq.n	800700e <_malloc_r+0xe6>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4638      	mov	r0, r7
 8006f82:	eb04 0903 	add.w	r9, r4, r3
 8006f86:	f000 fc71 	bl	800786c <_sbrk_r>
 8006f8a:	4581      	cmp	r9, r0
 8006f8c:	d13f      	bne.n	800700e <_malloc_r+0xe6>
 8006f8e:	6821      	ldr	r1, [r4, #0]
 8006f90:	4638      	mov	r0, r7
 8006f92:	1a6d      	subs	r5, r5, r1
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7ff ffa7 	bl	8006ee8 <sbrk_aligned>
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d037      	beq.n	800700e <_malloc_r+0xe6>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	442b      	add	r3, r5
 8006fa2:	6023      	str	r3, [r4, #0]
 8006fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d038      	beq.n	800701e <_malloc_r+0xf6>
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	42a2      	cmp	r2, r4
 8006fb0:	d12b      	bne.n	800700a <_malloc_r+0xe2>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	e00f      	b.n	8006fd8 <_malloc_r+0xb0>
 8006fb8:	6822      	ldr	r2, [r4, #0]
 8006fba:	1b52      	subs	r2, r2, r5
 8006fbc:	d41f      	bmi.n	8006ffe <_malloc_r+0xd6>
 8006fbe:	2a0b      	cmp	r2, #11
 8006fc0:	d917      	bls.n	8006ff2 <_malloc_r+0xca>
 8006fc2:	1961      	adds	r1, r4, r5
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	6025      	str	r5, [r4, #0]
 8006fc8:	bf18      	it	ne
 8006fca:	6059      	strne	r1, [r3, #4]
 8006fcc:	6863      	ldr	r3, [r4, #4]
 8006fce:	bf08      	it	eq
 8006fd0:	f8c8 1000 	streq.w	r1, [r8]
 8006fd4:	5162      	str	r2, [r4, r5]
 8006fd6:	604b      	str	r3, [r1, #4]
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f104 060b 	add.w	r6, r4, #11
 8006fde:	f000 f829 	bl	8007034 <__malloc_unlock>
 8006fe2:	f026 0607 	bic.w	r6, r6, #7
 8006fe6:	1d23      	adds	r3, r4, #4
 8006fe8:	1af2      	subs	r2, r6, r3
 8006fea:	d0ae      	beq.n	8006f4a <_malloc_r+0x22>
 8006fec:	1b9b      	subs	r3, r3, r6
 8006fee:	50a3      	str	r3, [r4, r2]
 8006ff0:	e7ab      	b.n	8006f4a <_malloc_r+0x22>
 8006ff2:	42a3      	cmp	r3, r4
 8006ff4:	6862      	ldr	r2, [r4, #4]
 8006ff6:	d1dd      	bne.n	8006fb4 <_malloc_r+0x8c>
 8006ff8:	f8c8 2000 	str.w	r2, [r8]
 8006ffc:	e7ec      	b.n	8006fd8 <_malloc_r+0xb0>
 8006ffe:	4623      	mov	r3, r4
 8007000:	6864      	ldr	r4, [r4, #4]
 8007002:	e7ac      	b.n	8006f5e <_malloc_r+0x36>
 8007004:	4634      	mov	r4, r6
 8007006:	6876      	ldr	r6, [r6, #4]
 8007008:	e7b4      	b.n	8006f74 <_malloc_r+0x4c>
 800700a:	4613      	mov	r3, r2
 800700c:	e7cc      	b.n	8006fa8 <_malloc_r+0x80>
 800700e:	230c      	movs	r3, #12
 8007010:	4638      	mov	r0, r7
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	f000 f80e 	bl	8007034 <__malloc_unlock>
 8007018:	e797      	b.n	8006f4a <_malloc_r+0x22>
 800701a:	6025      	str	r5, [r4, #0]
 800701c:	e7dc      	b.n	8006fd8 <_malloc_r+0xb0>
 800701e:	605b      	str	r3, [r3, #4]
 8007020:	deff      	udf	#255	; 0xff
 8007022:	bf00      	nop
 8007024:	200004c0 	.word	0x200004c0

08007028 <__malloc_lock>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__malloc_lock+0x8>)
 800702a:	f7ff bf12 	b.w	8006e52 <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	200004bc 	.word	0x200004bc

08007034 <__malloc_unlock>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__malloc_unlock+0x8>)
 8007036:	f7ff bf0d 	b.w	8006e54 <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	200004bc 	.word	0x200004bc

08007040 <__sfputc_r>:
 8007040:	6893      	ldr	r3, [r2, #8]
 8007042:	b410      	push	{r4}
 8007044:	3b01      	subs	r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	6093      	str	r3, [r2, #8]
 800704a:	da07      	bge.n	800705c <__sfputc_r+0x1c>
 800704c:	6994      	ldr	r4, [r2, #24]
 800704e:	42a3      	cmp	r3, r4
 8007050:	db01      	blt.n	8007056 <__sfputc_r+0x16>
 8007052:	290a      	cmp	r1, #10
 8007054:	d102      	bne.n	800705c <__sfputc_r+0x1c>
 8007056:	bc10      	pop	{r4}
 8007058:	f000 bb72 	b.w	8007740 <__swbuf_r>
 800705c:	6813      	ldr	r3, [r2, #0]
 800705e:	1c58      	adds	r0, r3, #1
 8007060:	6010      	str	r0, [r2, #0]
 8007062:	7019      	strb	r1, [r3, #0]
 8007064:	4608      	mov	r0, r1
 8007066:	bc10      	pop	{r4}
 8007068:	4770      	bx	lr

0800706a <__sfputs_r>:
 800706a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706c:	4606      	mov	r6, r0
 800706e:	460f      	mov	r7, r1
 8007070:	4614      	mov	r4, r2
 8007072:	18d5      	adds	r5, r2, r3
 8007074:	42ac      	cmp	r4, r5
 8007076:	d101      	bne.n	800707c <__sfputs_r+0x12>
 8007078:	2000      	movs	r0, #0
 800707a:	e007      	b.n	800708c <__sfputs_r+0x22>
 800707c:	463a      	mov	r2, r7
 800707e:	4630      	mov	r0, r6
 8007080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007084:	f7ff ffdc 	bl	8007040 <__sfputc_r>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d1f3      	bne.n	8007074 <__sfputs_r+0xa>
 800708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007090 <_vfiprintf_r>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	460d      	mov	r5, r1
 8007096:	4614      	mov	r4, r2
 8007098:	4698      	mov	r8, r3
 800709a:	4606      	mov	r6, r0
 800709c:	b09d      	sub	sp, #116	; 0x74
 800709e:	b118      	cbz	r0, 80070a8 <_vfiprintf_r+0x18>
 80070a0:	6a03      	ldr	r3, [r0, #32]
 80070a2:	b90b      	cbnz	r3, 80070a8 <_vfiprintf_r+0x18>
 80070a4:	f7ff fdd0 	bl	8006c48 <__sinit>
 80070a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070aa:	07d9      	lsls	r1, r3, #31
 80070ac:	d405      	bmi.n	80070ba <_vfiprintf_r+0x2a>
 80070ae:	89ab      	ldrh	r3, [r5, #12]
 80070b0:	059a      	lsls	r2, r3, #22
 80070b2:	d402      	bmi.n	80070ba <_vfiprintf_r+0x2a>
 80070b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b6:	f7ff fecc 	bl	8006e52 <__retarget_lock_acquire_recursive>
 80070ba:	89ab      	ldrh	r3, [r5, #12]
 80070bc:	071b      	lsls	r3, r3, #28
 80070be:	d501      	bpl.n	80070c4 <_vfiprintf_r+0x34>
 80070c0:	692b      	ldr	r3, [r5, #16]
 80070c2:	b99b      	cbnz	r3, 80070ec <_vfiprintf_r+0x5c>
 80070c4:	4629      	mov	r1, r5
 80070c6:	4630      	mov	r0, r6
 80070c8:	f000 fb78 	bl	80077bc <__swsetup_r>
 80070cc:	b170      	cbz	r0, 80070ec <_vfiprintf_r+0x5c>
 80070ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d0:	07dc      	lsls	r4, r3, #31
 80070d2:	d504      	bpl.n	80070de <_vfiprintf_r+0x4e>
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070d8:	b01d      	add	sp, #116	; 0x74
 80070da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	0598      	lsls	r0, r3, #22
 80070e2:	d4f7      	bmi.n	80070d4 <_vfiprintf_r+0x44>
 80070e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070e6:	f7ff feb5 	bl	8006e54 <__retarget_lock_release_recursive>
 80070ea:	e7f3      	b.n	80070d4 <_vfiprintf_r+0x44>
 80070ec:	2300      	movs	r3, #0
 80070ee:	9309      	str	r3, [sp, #36]	; 0x24
 80070f0:	2320      	movs	r3, #32
 80070f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070f6:	2330      	movs	r3, #48	; 0x30
 80070f8:	f04f 0901 	mov.w	r9, #1
 80070fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007100:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80072b0 <_vfiprintf_r+0x220>
 8007104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007108:	4623      	mov	r3, r4
 800710a:	469a      	mov	sl, r3
 800710c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007110:	b10a      	cbz	r2, 8007116 <_vfiprintf_r+0x86>
 8007112:	2a25      	cmp	r2, #37	; 0x25
 8007114:	d1f9      	bne.n	800710a <_vfiprintf_r+0x7a>
 8007116:	ebba 0b04 	subs.w	fp, sl, r4
 800711a:	d00b      	beq.n	8007134 <_vfiprintf_r+0xa4>
 800711c:	465b      	mov	r3, fp
 800711e:	4622      	mov	r2, r4
 8007120:	4629      	mov	r1, r5
 8007122:	4630      	mov	r0, r6
 8007124:	f7ff ffa1 	bl	800706a <__sfputs_r>
 8007128:	3001      	adds	r0, #1
 800712a:	f000 80a9 	beq.w	8007280 <_vfiprintf_r+0x1f0>
 800712e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007130:	445a      	add	r2, fp
 8007132:	9209      	str	r2, [sp, #36]	; 0x24
 8007134:	f89a 3000 	ldrb.w	r3, [sl]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80a1 	beq.w	8007280 <_vfiprintf_r+0x1f0>
 800713e:	2300      	movs	r3, #0
 8007140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007148:	f10a 0a01 	add.w	sl, sl, #1
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	9307      	str	r3, [sp, #28]
 8007150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007154:	931a      	str	r3, [sp, #104]	; 0x68
 8007156:	4654      	mov	r4, sl
 8007158:	2205      	movs	r2, #5
 800715a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715e:	4854      	ldr	r0, [pc, #336]	; (80072b0 <_vfiprintf_r+0x220>)
 8007160:	f000 fb94 	bl	800788c <memchr>
 8007164:	9a04      	ldr	r2, [sp, #16]
 8007166:	b9d8      	cbnz	r0, 80071a0 <_vfiprintf_r+0x110>
 8007168:	06d1      	lsls	r1, r2, #27
 800716a:	bf44      	itt	mi
 800716c:	2320      	movmi	r3, #32
 800716e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007172:	0713      	lsls	r3, r2, #28
 8007174:	bf44      	itt	mi
 8007176:	232b      	movmi	r3, #43	; 0x2b
 8007178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800717c:	f89a 3000 	ldrb.w	r3, [sl]
 8007180:	2b2a      	cmp	r3, #42	; 0x2a
 8007182:	d015      	beq.n	80071b0 <_vfiprintf_r+0x120>
 8007184:	4654      	mov	r4, sl
 8007186:	2000      	movs	r0, #0
 8007188:	f04f 0c0a 	mov.w	ip, #10
 800718c:	9a07      	ldr	r2, [sp, #28]
 800718e:	4621      	mov	r1, r4
 8007190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007194:	3b30      	subs	r3, #48	; 0x30
 8007196:	2b09      	cmp	r3, #9
 8007198:	d94d      	bls.n	8007236 <_vfiprintf_r+0x1a6>
 800719a:	b1b0      	cbz	r0, 80071ca <_vfiprintf_r+0x13a>
 800719c:	9207      	str	r2, [sp, #28]
 800719e:	e014      	b.n	80071ca <_vfiprintf_r+0x13a>
 80071a0:	eba0 0308 	sub.w	r3, r0, r8
 80071a4:	fa09 f303 	lsl.w	r3, r9, r3
 80071a8:	4313      	orrs	r3, r2
 80071aa:	46a2      	mov	sl, r4
 80071ac:	9304      	str	r3, [sp, #16]
 80071ae:	e7d2      	b.n	8007156 <_vfiprintf_r+0xc6>
 80071b0:	9b03      	ldr	r3, [sp, #12]
 80071b2:	1d19      	adds	r1, r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	9103      	str	r1, [sp, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	bfbb      	ittet	lt
 80071bc:	425b      	neglt	r3, r3
 80071be:	f042 0202 	orrlt.w	r2, r2, #2
 80071c2:	9307      	strge	r3, [sp, #28]
 80071c4:	9307      	strlt	r3, [sp, #28]
 80071c6:	bfb8      	it	lt
 80071c8:	9204      	strlt	r2, [sp, #16]
 80071ca:	7823      	ldrb	r3, [r4, #0]
 80071cc:	2b2e      	cmp	r3, #46	; 0x2e
 80071ce:	d10c      	bne.n	80071ea <_vfiprintf_r+0x15a>
 80071d0:	7863      	ldrb	r3, [r4, #1]
 80071d2:	2b2a      	cmp	r3, #42	; 0x2a
 80071d4:	d134      	bne.n	8007240 <_vfiprintf_r+0x1b0>
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	3402      	adds	r4, #2
 80071da:	1d1a      	adds	r2, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	9203      	str	r2, [sp, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bfb8      	it	lt
 80071e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071e8:	9305      	str	r3, [sp, #20]
 80071ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072b4 <_vfiprintf_r+0x224>
 80071ee:	2203      	movs	r2, #3
 80071f0:	4650      	mov	r0, sl
 80071f2:	7821      	ldrb	r1, [r4, #0]
 80071f4:	f000 fb4a 	bl	800788c <memchr>
 80071f8:	b138      	cbz	r0, 800720a <_vfiprintf_r+0x17a>
 80071fa:	2240      	movs	r2, #64	; 0x40
 80071fc:	9b04      	ldr	r3, [sp, #16]
 80071fe:	eba0 000a 	sub.w	r0, r0, sl
 8007202:	4082      	lsls	r2, r0
 8007204:	4313      	orrs	r3, r2
 8007206:	3401      	adds	r4, #1
 8007208:	9304      	str	r3, [sp, #16]
 800720a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800720e:	2206      	movs	r2, #6
 8007210:	4829      	ldr	r0, [pc, #164]	; (80072b8 <_vfiprintf_r+0x228>)
 8007212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007216:	f000 fb39 	bl	800788c <memchr>
 800721a:	2800      	cmp	r0, #0
 800721c:	d03f      	beq.n	800729e <_vfiprintf_r+0x20e>
 800721e:	4b27      	ldr	r3, [pc, #156]	; (80072bc <_vfiprintf_r+0x22c>)
 8007220:	bb1b      	cbnz	r3, 800726a <_vfiprintf_r+0x1da>
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	3307      	adds	r3, #7
 8007226:	f023 0307 	bic.w	r3, r3, #7
 800722a:	3308      	adds	r3, #8
 800722c:	9303      	str	r3, [sp, #12]
 800722e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007230:	443b      	add	r3, r7
 8007232:	9309      	str	r3, [sp, #36]	; 0x24
 8007234:	e768      	b.n	8007108 <_vfiprintf_r+0x78>
 8007236:	460c      	mov	r4, r1
 8007238:	2001      	movs	r0, #1
 800723a:	fb0c 3202 	mla	r2, ip, r2, r3
 800723e:	e7a6      	b.n	800718e <_vfiprintf_r+0xfe>
 8007240:	2300      	movs	r3, #0
 8007242:	f04f 0c0a 	mov.w	ip, #10
 8007246:	4619      	mov	r1, r3
 8007248:	3401      	adds	r4, #1
 800724a:	9305      	str	r3, [sp, #20]
 800724c:	4620      	mov	r0, r4
 800724e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007252:	3a30      	subs	r2, #48	; 0x30
 8007254:	2a09      	cmp	r2, #9
 8007256:	d903      	bls.n	8007260 <_vfiprintf_r+0x1d0>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0c6      	beq.n	80071ea <_vfiprintf_r+0x15a>
 800725c:	9105      	str	r1, [sp, #20]
 800725e:	e7c4      	b.n	80071ea <_vfiprintf_r+0x15a>
 8007260:	4604      	mov	r4, r0
 8007262:	2301      	movs	r3, #1
 8007264:	fb0c 2101 	mla	r1, ip, r1, r2
 8007268:	e7f0      	b.n	800724c <_vfiprintf_r+0x1bc>
 800726a:	ab03      	add	r3, sp, #12
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	462a      	mov	r2, r5
 8007270:	4630      	mov	r0, r6
 8007272:	4b13      	ldr	r3, [pc, #76]	; (80072c0 <_vfiprintf_r+0x230>)
 8007274:	a904      	add	r1, sp, #16
 8007276:	f3af 8000 	nop.w
 800727a:	4607      	mov	r7, r0
 800727c:	1c78      	adds	r0, r7, #1
 800727e:	d1d6      	bne.n	800722e <_vfiprintf_r+0x19e>
 8007280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007282:	07d9      	lsls	r1, r3, #31
 8007284:	d405      	bmi.n	8007292 <_vfiprintf_r+0x202>
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	059a      	lsls	r2, r3, #22
 800728a:	d402      	bmi.n	8007292 <_vfiprintf_r+0x202>
 800728c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800728e:	f7ff fde1 	bl	8006e54 <__retarget_lock_release_recursive>
 8007292:	89ab      	ldrh	r3, [r5, #12]
 8007294:	065b      	lsls	r3, r3, #25
 8007296:	f53f af1d 	bmi.w	80070d4 <_vfiprintf_r+0x44>
 800729a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800729c:	e71c      	b.n	80070d8 <_vfiprintf_r+0x48>
 800729e:	ab03      	add	r3, sp, #12
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	462a      	mov	r2, r5
 80072a4:	4630      	mov	r0, r6
 80072a6:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <_vfiprintf_r+0x230>)
 80072a8:	a904      	add	r1, sp, #16
 80072aa:	f000 f87d 	bl	80073a8 <_printf_i>
 80072ae:	e7e4      	b.n	800727a <_vfiprintf_r+0x1ea>
 80072b0:	08007f96 	.word	0x08007f96
 80072b4:	08007f9c 	.word	0x08007f9c
 80072b8:	08007fa0 	.word	0x08007fa0
 80072bc:	00000000 	.word	0x00000000
 80072c0:	0800706b 	.word	0x0800706b

080072c4 <_printf_common>:
 80072c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	4616      	mov	r6, r2
 80072ca:	4699      	mov	r9, r3
 80072cc:	688a      	ldr	r2, [r1, #8]
 80072ce:	690b      	ldr	r3, [r1, #16]
 80072d0:	4607      	mov	r7, r0
 80072d2:	4293      	cmp	r3, r2
 80072d4:	bfb8      	it	lt
 80072d6:	4613      	movlt	r3, r2
 80072d8:	6033      	str	r3, [r6, #0]
 80072da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072de:	460c      	mov	r4, r1
 80072e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072e4:	b10a      	cbz	r2, 80072ea <_printf_common+0x26>
 80072e6:	3301      	adds	r3, #1
 80072e8:	6033      	str	r3, [r6, #0]
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	0699      	lsls	r1, r3, #26
 80072ee:	bf42      	ittt	mi
 80072f0:	6833      	ldrmi	r3, [r6, #0]
 80072f2:	3302      	addmi	r3, #2
 80072f4:	6033      	strmi	r3, [r6, #0]
 80072f6:	6825      	ldr	r5, [r4, #0]
 80072f8:	f015 0506 	ands.w	r5, r5, #6
 80072fc:	d106      	bne.n	800730c <_printf_common+0x48>
 80072fe:	f104 0a19 	add.w	sl, r4, #25
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	6832      	ldr	r2, [r6, #0]
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	42ab      	cmp	r3, r5
 800730a:	dc2b      	bgt.n	8007364 <_printf_common+0xa0>
 800730c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007310:	1e13      	subs	r3, r2, #0
 8007312:	6822      	ldr	r2, [r4, #0]
 8007314:	bf18      	it	ne
 8007316:	2301      	movne	r3, #1
 8007318:	0692      	lsls	r2, r2, #26
 800731a:	d430      	bmi.n	800737e <_printf_common+0xba>
 800731c:	4649      	mov	r1, r9
 800731e:	4638      	mov	r0, r7
 8007320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007324:	47c0      	blx	r8
 8007326:	3001      	adds	r0, #1
 8007328:	d023      	beq.n	8007372 <_printf_common+0xae>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	6922      	ldr	r2, [r4, #16]
 800732e:	f003 0306 	and.w	r3, r3, #6
 8007332:	2b04      	cmp	r3, #4
 8007334:	bf14      	ite	ne
 8007336:	2500      	movne	r5, #0
 8007338:	6833      	ldreq	r3, [r6, #0]
 800733a:	f04f 0600 	mov.w	r6, #0
 800733e:	bf08      	it	eq
 8007340:	68e5      	ldreq	r5, [r4, #12]
 8007342:	f104 041a 	add.w	r4, r4, #26
 8007346:	bf08      	it	eq
 8007348:	1aed      	subeq	r5, r5, r3
 800734a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800734e:	bf08      	it	eq
 8007350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007354:	4293      	cmp	r3, r2
 8007356:	bfc4      	itt	gt
 8007358:	1a9b      	subgt	r3, r3, r2
 800735a:	18ed      	addgt	r5, r5, r3
 800735c:	42b5      	cmp	r5, r6
 800735e:	d11a      	bne.n	8007396 <_printf_common+0xd2>
 8007360:	2000      	movs	r0, #0
 8007362:	e008      	b.n	8007376 <_printf_common+0xb2>
 8007364:	2301      	movs	r3, #1
 8007366:	4652      	mov	r2, sl
 8007368:	4649      	mov	r1, r9
 800736a:	4638      	mov	r0, r7
 800736c:	47c0      	blx	r8
 800736e:	3001      	adds	r0, #1
 8007370:	d103      	bne.n	800737a <_printf_common+0xb6>
 8007372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737a:	3501      	adds	r5, #1
 800737c:	e7c1      	b.n	8007302 <_printf_common+0x3e>
 800737e:	2030      	movs	r0, #48	; 0x30
 8007380:	18e1      	adds	r1, r4, r3
 8007382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800738c:	4422      	add	r2, r4
 800738e:	3302      	adds	r3, #2
 8007390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007394:	e7c2      	b.n	800731c <_printf_common+0x58>
 8007396:	2301      	movs	r3, #1
 8007398:	4622      	mov	r2, r4
 800739a:	4649      	mov	r1, r9
 800739c:	4638      	mov	r0, r7
 800739e:	47c0      	blx	r8
 80073a0:	3001      	adds	r0, #1
 80073a2:	d0e6      	beq.n	8007372 <_printf_common+0xae>
 80073a4:	3601      	adds	r6, #1
 80073a6:	e7d9      	b.n	800735c <_printf_common+0x98>

080073a8 <_printf_i>:
 80073a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	7e0f      	ldrb	r7, [r1, #24]
 80073ae:	4691      	mov	r9, r2
 80073b0:	2f78      	cmp	r7, #120	; 0x78
 80073b2:	4680      	mov	r8, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	469a      	mov	sl, r3
 80073b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073be:	d807      	bhi.n	80073d0 <_printf_i+0x28>
 80073c0:	2f62      	cmp	r7, #98	; 0x62
 80073c2:	d80a      	bhi.n	80073da <_printf_i+0x32>
 80073c4:	2f00      	cmp	r7, #0
 80073c6:	f000 80d5 	beq.w	8007574 <_printf_i+0x1cc>
 80073ca:	2f58      	cmp	r7, #88	; 0x58
 80073cc:	f000 80c1 	beq.w	8007552 <_printf_i+0x1aa>
 80073d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073d8:	e03a      	b.n	8007450 <_printf_i+0xa8>
 80073da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073de:	2b15      	cmp	r3, #21
 80073e0:	d8f6      	bhi.n	80073d0 <_printf_i+0x28>
 80073e2:	a101      	add	r1, pc, #4	; (adr r1, 80073e8 <_printf_i+0x40>)
 80073e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073e8:	08007441 	.word	0x08007441
 80073ec:	08007455 	.word	0x08007455
 80073f0:	080073d1 	.word	0x080073d1
 80073f4:	080073d1 	.word	0x080073d1
 80073f8:	080073d1 	.word	0x080073d1
 80073fc:	080073d1 	.word	0x080073d1
 8007400:	08007455 	.word	0x08007455
 8007404:	080073d1 	.word	0x080073d1
 8007408:	080073d1 	.word	0x080073d1
 800740c:	080073d1 	.word	0x080073d1
 8007410:	080073d1 	.word	0x080073d1
 8007414:	0800755b 	.word	0x0800755b
 8007418:	08007481 	.word	0x08007481
 800741c:	08007515 	.word	0x08007515
 8007420:	080073d1 	.word	0x080073d1
 8007424:	080073d1 	.word	0x080073d1
 8007428:	0800757d 	.word	0x0800757d
 800742c:	080073d1 	.word	0x080073d1
 8007430:	08007481 	.word	0x08007481
 8007434:	080073d1 	.word	0x080073d1
 8007438:	080073d1 	.word	0x080073d1
 800743c:	0800751d 	.word	0x0800751d
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	1d1a      	adds	r2, r3, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	602a      	str	r2, [r5, #0]
 8007448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800744c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007450:	2301      	movs	r3, #1
 8007452:	e0a0      	b.n	8007596 <_printf_i+0x1ee>
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	682b      	ldr	r3, [r5, #0]
 8007458:	0607      	lsls	r7, r0, #24
 800745a:	f103 0104 	add.w	r1, r3, #4
 800745e:	6029      	str	r1, [r5, #0]
 8007460:	d501      	bpl.n	8007466 <_printf_i+0xbe>
 8007462:	681e      	ldr	r6, [r3, #0]
 8007464:	e003      	b.n	800746e <_printf_i+0xc6>
 8007466:	0646      	lsls	r6, r0, #25
 8007468:	d5fb      	bpl.n	8007462 <_printf_i+0xba>
 800746a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800746e:	2e00      	cmp	r6, #0
 8007470:	da03      	bge.n	800747a <_printf_i+0xd2>
 8007472:	232d      	movs	r3, #45	; 0x2d
 8007474:	4276      	negs	r6, r6
 8007476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747a:	230a      	movs	r3, #10
 800747c:	4859      	ldr	r0, [pc, #356]	; (80075e4 <_printf_i+0x23c>)
 800747e:	e012      	b.n	80074a6 <_printf_i+0xfe>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	6820      	ldr	r0, [r4, #0]
 8007484:	1d19      	adds	r1, r3, #4
 8007486:	6029      	str	r1, [r5, #0]
 8007488:	0605      	lsls	r5, r0, #24
 800748a:	d501      	bpl.n	8007490 <_printf_i+0xe8>
 800748c:	681e      	ldr	r6, [r3, #0]
 800748e:	e002      	b.n	8007496 <_printf_i+0xee>
 8007490:	0641      	lsls	r1, r0, #25
 8007492:	d5fb      	bpl.n	800748c <_printf_i+0xe4>
 8007494:	881e      	ldrh	r6, [r3, #0]
 8007496:	2f6f      	cmp	r7, #111	; 0x6f
 8007498:	bf0c      	ite	eq
 800749a:	2308      	moveq	r3, #8
 800749c:	230a      	movne	r3, #10
 800749e:	4851      	ldr	r0, [pc, #324]	; (80075e4 <_printf_i+0x23c>)
 80074a0:	2100      	movs	r1, #0
 80074a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074a6:	6865      	ldr	r5, [r4, #4]
 80074a8:	2d00      	cmp	r5, #0
 80074aa:	bfa8      	it	ge
 80074ac:	6821      	ldrge	r1, [r4, #0]
 80074ae:	60a5      	str	r5, [r4, #8]
 80074b0:	bfa4      	itt	ge
 80074b2:	f021 0104 	bicge.w	r1, r1, #4
 80074b6:	6021      	strge	r1, [r4, #0]
 80074b8:	b90e      	cbnz	r6, 80074be <_printf_i+0x116>
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	d04b      	beq.n	8007556 <_printf_i+0x1ae>
 80074be:	4615      	mov	r5, r2
 80074c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80074c4:	fb03 6711 	mls	r7, r3, r1, r6
 80074c8:	5dc7      	ldrb	r7, [r0, r7]
 80074ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074ce:	4637      	mov	r7, r6
 80074d0:	42bb      	cmp	r3, r7
 80074d2:	460e      	mov	r6, r1
 80074d4:	d9f4      	bls.n	80074c0 <_printf_i+0x118>
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d10b      	bne.n	80074f2 <_printf_i+0x14a>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	07de      	lsls	r6, r3, #31
 80074de:	d508      	bpl.n	80074f2 <_printf_i+0x14a>
 80074e0:	6923      	ldr	r3, [r4, #16]
 80074e2:	6861      	ldr	r1, [r4, #4]
 80074e4:	4299      	cmp	r1, r3
 80074e6:	bfde      	ittt	le
 80074e8:	2330      	movle	r3, #48	; 0x30
 80074ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80074f2:	1b52      	subs	r2, r2, r5
 80074f4:	6122      	str	r2, [r4, #16]
 80074f6:	464b      	mov	r3, r9
 80074f8:	4621      	mov	r1, r4
 80074fa:	4640      	mov	r0, r8
 80074fc:	f8cd a000 	str.w	sl, [sp]
 8007500:	aa03      	add	r2, sp, #12
 8007502:	f7ff fedf 	bl	80072c4 <_printf_common>
 8007506:	3001      	adds	r0, #1
 8007508:	d14a      	bne.n	80075a0 <_printf_i+0x1f8>
 800750a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800750e:	b004      	add	sp, #16
 8007510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	f043 0320 	orr.w	r3, r3, #32
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	2778      	movs	r7, #120	; 0x78
 800751e:	4832      	ldr	r0, [pc, #200]	; (80075e8 <_printf_i+0x240>)
 8007520:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	6829      	ldr	r1, [r5, #0]
 8007528:	061f      	lsls	r7, r3, #24
 800752a:	f851 6b04 	ldr.w	r6, [r1], #4
 800752e:	d402      	bmi.n	8007536 <_printf_i+0x18e>
 8007530:	065f      	lsls	r7, r3, #25
 8007532:	bf48      	it	mi
 8007534:	b2b6      	uxthmi	r6, r6
 8007536:	07df      	lsls	r7, r3, #31
 8007538:	bf48      	it	mi
 800753a:	f043 0320 	orrmi.w	r3, r3, #32
 800753e:	6029      	str	r1, [r5, #0]
 8007540:	bf48      	it	mi
 8007542:	6023      	strmi	r3, [r4, #0]
 8007544:	b91e      	cbnz	r6, 800754e <_printf_i+0x1a6>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	f023 0320 	bic.w	r3, r3, #32
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	2310      	movs	r3, #16
 8007550:	e7a6      	b.n	80074a0 <_printf_i+0xf8>
 8007552:	4824      	ldr	r0, [pc, #144]	; (80075e4 <_printf_i+0x23c>)
 8007554:	e7e4      	b.n	8007520 <_printf_i+0x178>
 8007556:	4615      	mov	r5, r2
 8007558:	e7bd      	b.n	80074d6 <_printf_i+0x12e>
 800755a:	682b      	ldr	r3, [r5, #0]
 800755c:	6826      	ldr	r6, [r4, #0]
 800755e:	1d18      	adds	r0, r3, #4
 8007560:	6961      	ldr	r1, [r4, #20]
 8007562:	6028      	str	r0, [r5, #0]
 8007564:	0635      	lsls	r5, r6, #24
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	d501      	bpl.n	800756e <_printf_i+0x1c6>
 800756a:	6019      	str	r1, [r3, #0]
 800756c:	e002      	b.n	8007574 <_printf_i+0x1cc>
 800756e:	0670      	lsls	r0, r6, #25
 8007570:	d5fb      	bpl.n	800756a <_printf_i+0x1c2>
 8007572:	8019      	strh	r1, [r3, #0]
 8007574:	2300      	movs	r3, #0
 8007576:	4615      	mov	r5, r2
 8007578:	6123      	str	r3, [r4, #16]
 800757a:	e7bc      	b.n	80074f6 <_printf_i+0x14e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	2100      	movs	r1, #0
 8007580:	1d1a      	adds	r2, r3, #4
 8007582:	602a      	str	r2, [r5, #0]
 8007584:	681d      	ldr	r5, [r3, #0]
 8007586:	6862      	ldr	r2, [r4, #4]
 8007588:	4628      	mov	r0, r5
 800758a:	f000 f97f 	bl	800788c <memchr>
 800758e:	b108      	cbz	r0, 8007594 <_printf_i+0x1ec>
 8007590:	1b40      	subs	r0, r0, r5
 8007592:	6060      	str	r0, [r4, #4]
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	6123      	str	r3, [r4, #16]
 8007598:	2300      	movs	r3, #0
 800759a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759e:	e7aa      	b.n	80074f6 <_printf_i+0x14e>
 80075a0:	462a      	mov	r2, r5
 80075a2:	4649      	mov	r1, r9
 80075a4:	4640      	mov	r0, r8
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	47d0      	blx	sl
 80075aa:	3001      	adds	r0, #1
 80075ac:	d0ad      	beq.n	800750a <_printf_i+0x162>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	079b      	lsls	r3, r3, #30
 80075b2:	d413      	bmi.n	80075dc <_printf_i+0x234>
 80075b4:	68e0      	ldr	r0, [r4, #12]
 80075b6:	9b03      	ldr	r3, [sp, #12]
 80075b8:	4298      	cmp	r0, r3
 80075ba:	bfb8      	it	lt
 80075bc:	4618      	movlt	r0, r3
 80075be:	e7a6      	b.n	800750e <_printf_i+0x166>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4632      	mov	r2, r6
 80075c4:	4649      	mov	r1, r9
 80075c6:	4640      	mov	r0, r8
 80075c8:	47d0      	blx	sl
 80075ca:	3001      	adds	r0, #1
 80075cc:	d09d      	beq.n	800750a <_printf_i+0x162>
 80075ce:	3501      	adds	r5, #1
 80075d0:	68e3      	ldr	r3, [r4, #12]
 80075d2:	9903      	ldr	r1, [sp, #12]
 80075d4:	1a5b      	subs	r3, r3, r1
 80075d6:	42ab      	cmp	r3, r5
 80075d8:	dcf2      	bgt.n	80075c0 <_printf_i+0x218>
 80075da:	e7eb      	b.n	80075b4 <_printf_i+0x20c>
 80075dc:	2500      	movs	r5, #0
 80075de:	f104 0619 	add.w	r6, r4, #25
 80075e2:	e7f5      	b.n	80075d0 <_printf_i+0x228>
 80075e4:	08007fa7 	.word	0x08007fa7
 80075e8:	08007fb8 	.word	0x08007fb8

080075ec <__sflush_r>:
 80075ec:	898a      	ldrh	r2, [r1, #12]
 80075ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f0:	4605      	mov	r5, r0
 80075f2:	0710      	lsls	r0, r2, #28
 80075f4:	460c      	mov	r4, r1
 80075f6:	d457      	bmi.n	80076a8 <__sflush_r+0xbc>
 80075f8:	684b      	ldr	r3, [r1, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	dc04      	bgt.n	8007608 <__sflush_r+0x1c>
 80075fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	dc01      	bgt.n	8007608 <__sflush_r+0x1c>
 8007604:	2000      	movs	r0, #0
 8007606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800760a:	2e00      	cmp	r6, #0
 800760c:	d0fa      	beq.n	8007604 <__sflush_r+0x18>
 800760e:	2300      	movs	r3, #0
 8007610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007614:	682f      	ldr	r7, [r5, #0]
 8007616:	6a21      	ldr	r1, [r4, #32]
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	d032      	beq.n	8007682 <__sflush_r+0x96>
 800761c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	075a      	lsls	r2, r3, #29
 8007622:	d505      	bpl.n	8007630 <__sflush_r+0x44>
 8007624:	6863      	ldr	r3, [r4, #4]
 8007626:	1ac0      	subs	r0, r0, r3
 8007628:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800762a:	b10b      	cbz	r3, 8007630 <__sflush_r+0x44>
 800762c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800762e:	1ac0      	subs	r0, r0, r3
 8007630:	2300      	movs	r3, #0
 8007632:	4602      	mov	r2, r0
 8007634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007636:	4628      	mov	r0, r5
 8007638:	6a21      	ldr	r1, [r4, #32]
 800763a:	47b0      	blx	r6
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	d106      	bne.n	8007650 <__sflush_r+0x64>
 8007642:	6829      	ldr	r1, [r5, #0]
 8007644:	291d      	cmp	r1, #29
 8007646:	d82b      	bhi.n	80076a0 <__sflush_r+0xb4>
 8007648:	4a28      	ldr	r2, [pc, #160]	; (80076ec <__sflush_r+0x100>)
 800764a:	410a      	asrs	r2, r1
 800764c:	07d6      	lsls	r6, r2, #31
 800764e:	d427      	bmi.n	80076a0 <__sflush_r+0xb4>
 8007650:	2200      	movs	r2, #0
 8007652:	6062      	str	r2, [r4, #4]
 8007654:	6922      	ldr	r2, [r4, #16]
 8007656:	04d9      	lsls	r1, r3, #19
 8007658:	6022      	str	r2, [r4, #0]
 800765a:	d504      	bpl.n	8007666 <__sflush_r+0x7a>
 800765c:	1c42      	adds	r2, r0, #1
 800765e:	d101      	bne.n	8007664 <__sflush_r+0x78>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b903      	cbnz	r3, 8007666 <__sflush_r+0x7a>
 8007664:	6560      	str	r0, [r4, #84]	; 0x54
 8007666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007668:	602f      	str	r7, [r5, #0]
 800766a:	2900      	cmp	r1, #0
 800766c:	d0ca      	beq.n	8007604 <__sflush_r+0x18>
 800766e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007672:	4299      	cmp	r1, r3
 8007674:	d002      	beq.n	800767c <__sflush_r+0x90>
 8007676:	4628      	mov	r0, r5
 8007678:	f7ff fbee 	bl	8006e58 <_free_r>
 800767c:	2000      	movs	r0, #0
 800767e:	6360      	str	r0, [r4, #52]	; 0x34
 8007680:	e7c1      	b.n	8007606 <__sflush_r+0x1a>
 8007682:	2301      	movs	r3, #1
 8007684:	4628      	mov	r0, r5
 8007686:	47b0      	blx	r6
 8007688:	1c41      	adds	r1, r0, #1
 800768a:	d1c8      	bne.n	800761e <__sflush_r+0x32>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0c5      	beq.n	800761e <__sflush_r+0x32>
 8007692:	2b1d      	cmp	r3, #29
 8007694:	d001      	beq.n	800769a <__sflush_r+0xae>
 8007696:	2b16      	cmp	r3, #22
 8007698:	d101      	bne.n	800769e <__sflush_r+0xb2>
 800769a:	602f      	str	r7, [r5, #0]
 800769c:	e7b2      	b.n	8007604 <__sflush_r+0x18>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	e7ae      	b.n	8007606 <__sflush_r+0x1a>
 80076a8:	690f      	ldr	r7, [r1, #16]
 80076aa:	2f00      	cmp	r7, #0
 80076ac:	d0aa      	beq.n	8007604 <__sflush_r+0x18>
 80076ae:	0793      	lsls	r3, r2, #30
 80076b0:	bf18      	it	ne
 80076b2:	2300      	movne	r3, #0
 80076b4:	680e      	ldr	r6, [r1, #0]
 80076b6:	bf08      	it	eq
 80076b8:	694b      	ldreq	r3, [r1, #20]
 80076ba:	1bf6      	subs	r6, r6, r7
 80076bc:	600f      	str	r7, [r1, #0]
 80076be:	608b      	str	r3, [r1, #8]
 80076c0:	2e00      	cmp	r6, #0
 80076c2:	dd9f      	ble.n	8007604 <__sflush_r+0x18>
 80076c4:	4633      	mov	r3, r6
 80076c6:	463a      	mov	r2, r7
 80076c8:	4628      	mov	r0, r5
 80076ca:	6a21      	ldr	r1, [r4, #32]
 80076cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80076d0:	47e0      	blx	ip
 80076d2:	2800      	cmp	r0, #0
 80076d4:	dc06      	bgt.n	80076e4 <__sflush_r+0xf8>
 80076d6:	89a3      	ldrh	r3, [r4, #12]
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	e790      	b.n	8007606 <__sflush_r+0x1a>
 80076e4:	4407      	add	r7, r0
 80076e6:	1a36      	subs	r6, r6, r0
 80076e8:	e7ea      	b.n	80076c0 <__sflush_r+0xd4>
 80076ea:	bf00      	nop
 80076ec:	dfbffffe 	.word	0xdfbffffe

080076f0 <_fflush_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	690b      	ldr	r3, [r1, #16]
 80076f4:	4605      	mov	r5, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	b913      	cbnz	r3, 8007700 <_fflush_r+0x10>
 80076fa:	2500      	movs	r5, #0
 80076fc:	4628      	mov	r0, r5
 80076fe:	bd38      	pop	{r3, r4, r5, pc}
 8007700:	b118      	cbz	r0, 800770a <_fflush_r+0x1a>
 8007702:	6a03      	ldr	r3, [r0, #32]
 8007704:	b90b      	cbnz	r3, 800770a <_fflush_r+0x1a>
 8007706:	f7ff fa9f 	bl	8006c48 <__sinit>
 800770a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f3      	beq.n	80076fa <_fflush_r+0xa>
 8007712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007714:	07d0      	lsls	r0, r2, #31
 8007716:	d404      	bmi.n	8007722 <_fflush_r+0x32>
 8007718:	0599      	lsls	r1, r3, #22
 800771a:	d402      	bmi.n	8007722 <_fflush_r+0x32>
 800771c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771e:	f7ff fb98 	bl	8006e52 <__retarget_lock_acquire_recursive>
 8007722:	4628      	mov	r0, r5
 8007724:	4621      	mov	r1, r4
 8007726:	f7ff ff61 	bl	80075ec <__sflush_r>
 800772a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800772c:	4605      	mov	r5, r0
 800772e:	07da      	lsls	r2, r3, #31
 8007730:	d4e4      	bmi.n	80076fc <_fflush_r+0xc>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	059b      	lsls	r3, r3, #22
 8007736:	d4e1      	bmi.n	80076fc <_fflush_r+0xc>
 8007738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800773a:	f7ff fb8b 	bl	8006e54 <__retarget_lock_release_recursive>
 800773e:	e7dd      	b.n	80076fc <_fflush_r+0xc>

08007740 <__swbuf_r>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	460e      	mov	r6, r1
 8007744:	4614      	mov	r4, r2
 8007746:	4605      	mov	r5, r0
 8007748:	b118      	cbz	r0, 8007752 <__swbuf_r+0x12>
 800774a:	6a03      	ldr	r3, [r0, #32]
 800774c:	b90b      	cbnz	r3, 8007752 <__swbuf_r+0x12>
 800774e:	f7ff fa7b 	bl	8006c48 <__sinit>
 8007752:	69a3      	ldr	r3, [r4, #24]
 8007754:	60a3      	str	r3, [r4, #8]
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	071a      	lsls	r2, r3, #28
 800775a:	d525      	bpl.n	80077a8 <__swbuf_r+0x68>
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	b31b      	cbz	r3, 80077a8 <__swbuf_r+0x68>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	6922      	ldr	r2, [r4, #16]
 8007764:	b2f6      	uxtb	r6, r6
 8007766:	1a98      	subs	r0, r3, r2
 8007768:	6963      	ldr	r3, [r4, #20]
 800776a:	4637      	mov	r7, r6
 800776c:	4283      	cmp	r3, r0
 800776e:	dc04      	bgt.n	800777a <__swbuf_r+0x3a>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f7ff ffbc 	bl	80076f0 <_fflush_r>
 8007778:	b9e0      	cbnz	r0, 80077b4 <__swbuf_r+0x74>
 800777a:	68a3      	ldr	r3, [r4, #8]
 800777c:	3b01      	subs	r3, #1
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	701e      	strb	r6, [r3, #0]
 8007788:	6962      	ldr	r2, [r4, #20]
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	429a      	cmp	r2, r3
 800778e:	d004      	beq.n	800779a <__swbuf_r+0x5a>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	07db      	lsls	r3, r3, #31
 8007794:	d506      	bpl.n	80077a4 <__swbuf_r+0x64>
 8007796:	2e0a      	cmp	r6, #10
 8007798:	d104      	bne.n	80077a4 <__swbuf_r+0x64>
 800779a:	4621      	mov	r1, r4
 800779c:	4628      	mov	r0, r5
 800779e:	f7ff ffa7 	bl	80076f0 <_fflush_r>
 80077a2:	b938      	cbnz	r0, 80077b4 <__swbuf_r+0x74>
 80077a4:	4638      	mov	r0, r7
 80077a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a8:	4621      	mov	r1, r4
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 f806 	bl	80077bc <__swsetup_r>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d0d5      	beq.n	8007760 <__swbuf_r+0x20>
 80077b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80077b8:	e7f4      	b.n	80077a4 <__swbuf_r+0x64>
	...

080077bc <__swsetup_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4b2a      	ldr	r3, [pc, #168]	; (8007868 <__swsetup_r+0xac>)
 80077c0:	4605      	mov	r5, r0
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	460c      	mov	r4, r1
 80077c6:	b118      	cbz	r0, 80077d0 <__swsetup_r+0x14>
 80077c8:	6a03      	ldr	r3, [r0, #32]
 80077ca:	b90b      	cbnz	r3, 80077d0 <__swsetup_r+0x14>
 80077cc:	f7ff fa3c 	bl	8006c48 <__sinit>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077d6:	0718      	lsls	r0, r3, #28
 80077d8:	d422      	bmi.n	8007820 <__swsetup_r+0x64>
 80077da:	06d9      	lsls	r1, r3, #27
 80077dc:	d407      	bmi.n	80077ee <__swsetup_r+0x32>
 80077de:	2309      	movs	r3, #9
 80077e0:	602b      	str	r3, [r5, #0]
 80077e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	e034      	b.n	8007858 <__swsetup_r+0x9c>
 80077ee:	0758      	lsls	r0, r3, #29
 80077f0:	d512      	bpl.n	8007818 <__swsetup_r+0x5c>
 80077f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077f4:	b141      	cbz	r1, 8007808 <__swsetup_r+0x4c>
 80077f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077fa:	4299      	cmp	r1, r3
 80077fc:	d002      	beq.n	8007804 <__swsetup_r+0x48>
 80077fe:	4628      	mov	r0, r5
 8007800:	f7ff fb2a 	bl	8006e58 <_free_r>
 8007804:	2300      	movs	r3, #0
 8007806:	6363      	str	r3, [r4, #52]	; 0x34
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	2300      	movs	r3, #0
 8007812:	6063      	str	r3, [r4, #4]
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f043 0308 	orr.w	r3, r3, #8
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	b94b      	cbnz	r3, 8007838 <__swsetup_r+0x7c>
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800782a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782e:	d003      	beq.n	8007838 <__swsetup_r+0x7c>
 8007830:	4621      	mov	r1, r4
 8007832:	4628      	mov	r0, r5
 8007834:	f000 f85d 	bl	80078f2 <__smakebuf_r>
 8007838:	89a0      	ldrh	r0, [r4, #12]
 800783a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800783e:	f010 0301 	ands.w	r3, r0, #1
 8007842:	d00a      	beq.n	800785a <__swsetup_r+0x9e>
 8007844:	2300      	movs	r3, #0
 8007846:	60a3      	str	r3, [r4, #8]
 8007848:	6963      	ldr	r3, [r4, #20]
 800784a:	425b      	negs	r3, r3
 800784c:	61a3      	str	r3, [r4, #24]
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	b943      	cbnz	r3, 8007864 <__swsetup_r+0xa8>
 8007852:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007856:	d1c4      	bne.n	80077e2 <__swsetup_r+0x26>
 8007858:	bd38      	pop	{r3, r4, r5, pc}
 800785a:	0781      	lsls	r1, r0, #30
 800785c:	bf58      	it	pl
 800785e:	6963      	ldrpl	r3, [r4, #20]
 8007860:	60a3      	str	r3, [r4, #8]
 8007862:	e7f4      	b.n	800784e <__swsetup_r+0x92>
 8007864:	2000      	movs	r0, #0
 8007866:	e7f7      	b.n	8007858 <__swsetup_r+0x9c>
 8007868:	2000007c 	.word	0x2000007c

0800786c <_sbrk_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	2300      	movs	r3, #0
 8007870:	4d05      	ldr	r5, [pc, #20]	; (8007888 <_sbrk_r+0x1c>)
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7f8 fedc 	bl	8000634 <_sbrk>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_sbrk_r+0x1a>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_sbrk_r+0x1a>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	200004b8 	.word	0x200004b8

0800788c <memchr>:
 800788c:	4603      	mov	r3, r0
 800788e:	b510      	push	{r4, lr}
 8007890:	b2c9      	uxtb	r1, r1
 8007892:	4402      	add	r2, r0
 8007894:	4293      	cmp	r3, r2
 8007896:	4618      	mov	r0, r3
 8007898:	d101      	bne.n	800789e <memchr+0x12>
 800789a:	2000      	movs	r0, #0
 800789c:	e003      	b.n	80078a6 <memchr+0x1a>
 800789e:	7804      	ldrb	r4, [r0, #0]
 80078a0:	3301      	adds	r3, #1
 80078a2:	428c      	cmp	r4, r1
 80078a4:	d1f6      	bne.n	8007894 <memchr+0x8>
 80078a6:	bd10      	pop	{r4, pc}

080078a8 <__swhatbuf_r>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	460c      	mov	r4, r1
 80078ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b0:	4615      	mov	r5, r2
 80078b2:	2900      	cmp	r1, #0
 80078b4:	461e      	mov	r6, r3
 80078b6:	b096      	sub	sp, #88	; 0x58
 80078b8:	da0c      	bge.n	80078d4 <__swhatbuf_r+0x2c>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	2100      	movs	r1, #0
 80078be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078c2:	bf0c      	ite	eq
 80078c4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80078c8:	2340      	movne	r3, #64	; 0x40
 80078ca:	2000      	movs	r0, #0
 80078cc:	6031      	str	r1, [r6, #0]
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	b016      	add	sp, #88	; 0x58
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	466a      	mov	r2, sp
 80078d6:	f000 f849 	bl	800796c <_fstat_r>
 80078da:	2800      	cmp	r0, #0
 80078dc:	dbed      	blt.n	80078ba <__swhatbuf_r+0x12>
 80078de:	9901      	ldr	r1, [sp, #4]
 80078e0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80078e4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80078e8:	4259      	negs	r1, r3
 80078ea:	4159      	adcs	r1, r3
 80078ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078f0:	e7eb      	b.n	80078ca <__swhatbuf_r+0x22>

080078f2 <__smakebuf_r>:
 80078f2:	898b      	ldrh	r3, [r1, #12]
 80078f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078f6:	079d      	lsls	r5, r3, #30
 80078f8:	4606      	mov	r6, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	d507      	bpl.n	800790e <__smakebuf_r+0x1c>
 80078fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	2301      	movs	r3, #1
 8007908:	6163      	str	r3, [r4, #20]
 800790a:	b002      	add	sp, #8
 800790c:	bd70      	pop	{r4, r5, r6, pc}
 800790e:	466a      	mov	r2, sp
 8007910:	ab01      	add	r3, sp, #4
 8007912:	f7ff ffc9 	bl	80078a8 <__swhatbuf_r>
 8007916:	9900      	ldr	r1, [sp, #0]
 8007918:	4605      	mov	r5, r0
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff fb04 	bl	8006f28 <_malloc_r>
 8007920:	b948      	cbnz	r0, 8007936 <__smakebuf_r+0x44>
 8007922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007926:	059a      	lsls	r2, r3, #22
 8007928:	d4ef      	bmi.n	800790a <__smakebuf_r+0x18>
 800792a:	f023 0303 	bic.w	r3, r3, #3
 800792e:	f043 0302 	orr.w	r3, r3, #2
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	e7e3      	b.n	80078fe <__smakebuf_r+0xc>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	6020      	str	r0, [r4, #0]
 800793a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	9b00      	ldr	r3, [sp, #0]
 8007942:	6120      	str	r0, [r4, #16]
 8007944:	6163      	str	r3, [r4, #20]
 8007946:	9b01      	ldr	r3, [sp, #4]
 8007948:	b15b      	cbz	r3, 8007962 <__smakebuf_r+0x70>
 800794a:	4630      	mov	r0, r6
 800794c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007950:	f000 f81e 	bl	8007990 <_isatty_r>
 8007954:	b128      	cbz	r0, 8007962 <__smakebuf_r+0x70>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f023 0303 	bic.w	r3, r3, #3
 800795c:	f043 0301 	orr.w	r3, r3, #1
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	431d      	orrs	r5, r3
 8007966:	81a5      	strh	r5, [r4, #12]
 8007968:	e7cf      	b.n	800790a <__smakebuf_r+0x18>
	...

0800796c <_fstat_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	2300      	movs	r3, #0
 8007970:	4d06      	ldr	r5, [pc, #24]	; (800798c <_fstat_r+0x20>)
 8007972:	4604      	mov	r4, r0
 8007974:	4608      	mov	r0, r1
 8007976:	4611      	mov	r1, r2
 8007978:	602b      	str	r3, [r5, #0]
 800797a:	f7f8 fe36 	bl	80005ea <_fstat>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	d102      	bne.n	8007988 <_fstat_r+0x1c>
 8007982:	682b      	ldr	r3, [r5, #0]
 8007984:	b103      	cbz	r3, 8007988 <_fstat_r+0x1c>
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	bd38      	pop	{r3, r4, r5, pc}
 800798a:	bf00      	nop
 800798c:	200004b8 	.word	0x200004b8

08007990 <_isatty_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	2300      	movs	r3, #0
 8007994:	4d05      	ldr	r5, [pc, #20]	; (80079ac <_isatty_r+0x1c>)
 8007996:	4604      	mov	r4, r0
 8007998:	4608      	mov	r0, r1
 800799a:	602b      	str	r3, [r5, #0]
 800799c:	f7f8 fe34 	bl	8000608 <_isatty>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_isatty_r+0x1a>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_isatty_r+0x1a>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	200004b8 	.word	0x200004b8

080079b0 <_init>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	bf00      	nop
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr

080079bc <_fini>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	bf00      	nop
 80079c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c2:	bc08      	pop	{r3}
 80079c4:	469e      	mov	lr, r3
 80079c6:	4770      	bx	lr
